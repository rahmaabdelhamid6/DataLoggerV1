
DataLoggeer_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800de50  0800de50  0000ee50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e274  0800e274  000102d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e274  0800e274  0000f274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e27c  0800e27c  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e27c  0800e27c  0000f27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e280  0800e280  0000f280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800e284  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001610  200002d8  0800e55c  000102d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018e8  0800e55c  000108e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192e2  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004822  00000000  00000000  000295ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100a  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edcd  00000000  00000000  000303a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7ed  00000000  00000000  0004f16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab7e1  00000000  00000000  0006d95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011913d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000667c  00000000  00000000  00119180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0011f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de34 	.word	0x0800de34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800de34 	.word	0x0800de34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <APP_GPIO_EXTI_Callback>:
 *******************************************************************************/
/**
 * @brief  Callback function executed on GPIO external interrupt to reconfigure the system clock and toggle stop mode/EEPROM write flags
 */
void APP_GPIO_EXTI_Callback(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000c4c:	f000 ff50 	bl	8001af0 <SystemClock_Config>
	if(g_ui8StopModeFlag==0)
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <APP_GPIO_EXTI_Callback+0x30>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d106      	bne.n	8000c66 <APP_GPIO_EXTI_Callback+0x1e>
	{
		g_ui8_WriteToEepromFlag = 1;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <APP_GPIO_EXTI_Callback+0x34>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
		g_ui8StopModeFlag=1;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <APP_GPIO_EXTI_Callback+0x30>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
	else
	{
		g_ui8StopModeFlag=0;
		g_ui8_WriteToEepromFlag = 0;
	}
}
 8000c64:	e005      	b.n	8000c72 <APP_GPIO_EXTI_Callback+0x2a>
		g_ui8StopModeFlag=0;
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <APP_GPIO_EXTI_Callback+0x30>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
		g_ui8_WriteToEepromFlag = 0;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <APP_GPIO_EXTI_Callback+0x34>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200002f4 	.word	0x200002f4
 8000c7c:	200002f5 	.word	0x200002f5

08000c80 <APP_RTC_WakeUpCallback>:
 *******************************************************************************/
/**
 * @brief  Callback function executed on RTC wake-up timer event to reconfigure the system clock
 */
void APP_RTC_WakeUpCallback(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	SystemClock_Config ();
 8000c84:	f000 ff34 	bl	8001af0 <SystemClock_Config>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_BME280_TrimmingRead>:
 * @brief  Read the Trimming parameters saved in the NVM ROM of the device
 * @param  void
 * @retval void
 */
HALBME280Status_et HAL_BME280_TrimmingRead(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	@ 0x38
 8000c90:	af04      	add	r7, sp, #16
	HALBME280Status_et etHALBME280Status = HAL_BME280_SUCCESS;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	/*Array to Store the Trimming Data From sensor*/
	uint8_t aui8TrimmingData[32];

	//Read NVM from 0x88 to 0xA1    -->> ATT why last address read is 0xA1 why noy 0xE7  and why 25 Byte not 32 byte
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, 0x88, HAL_BME280_SIZE_ADDRESS, aui8TrimmingData, 25, HAL_MAX_DELAY);
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	2319      	movs	r3, #25
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2288      	movs	r2, #136	@ 0x88
 8000caa:	21ec      	movs	r1, #236	@ 0xec
 8000cac:	4862      	ldr	r0, [pc, #392]	@ (8000e38 <HAL_BME280_TrimmingRead+0x1ac>)
 8000cae:	f001 ffd7 	bl	8002c60 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, 0xE1, HAL_BME280_SIZE_ADDRESS, (uint8_t *)aui8TrimmingData+25, 7, HAL_MAX_DELAY);
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	3319      	adds	r3, #25
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	9202      	str	r2, [sp, #8]
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	9201      	str	r2, [sp, #4]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	22e1      	movs	r2, #225	@ 0xe1
 8000cc6:	21ec      	movs	r1, #236	@ 0xec
 8000cc8:	485b      	ldr	r0, [pc, #364]	@ (8000e38 <HAL_BME280_TrimmingRead+0x1ac>)
 8000cca:	f001 ffc9 	bl	8002c60 <HAL_I2C_Mem_Read>


	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (aui8TrimmingData[1]<<8)  | aui8TrimmingData[0];
 8000cce:	797b      	ldrb	r3, [r7, #5]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	793b      	ldrb	r3, [r7, #4]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b56      	ldr	r3, [pc, #344]	@ (8000e3c <HAL_BME280_TrimmingRead+0x1b0>)
 8000ce2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (aui8TrimmingData[3]<<8)  | aui8TrimmingData[2];
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	4b52      	ldr	r3, [pc, #328]	@ (8000e40 <HAL_BME280_TrimmingRead+0x1b4>)
 8000cf6:	801a      	strh	r2, [r3, #0]
	dig_T3 = (aui8TrimmingData[5]<<8)  | aui8TrimmingData[4];
 8000cf8:	7a7b      	ldrb	r3, [r7, #9]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	7a3b      	ldrb	r3, [r7, #8]
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	4b4e      	ldr	r3, [pc, #312]	@ (8000e44 <HAL_BME280_TrimmingRead+0x1b8>)
 8000d0a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (aui8TrimmingData[7]<<8)  | aui8TrimmingData[5];
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	7a7b      	ldrb	r3, [r7, #9]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e48 <HAL_BME280_TrimmingRead+0x1bc>)
 8000d20:	801a      	strh	r2, [r3, #0]
	dig_P2 = (aui8TrimmingData[9]<<8)  | aui8TrimmingData[6];
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	7abb      	ldrb	r3, [r7, #10]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <HAL_BME280_TrimmingRead+0x1c0>)
 8000d34:	801a      	strh	r2, [r3, #0]
	dig_P3 = (aui8TrimmingData[11]<<8) | aui8TrimmingData[10];
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <HAL_BME280_TrimmingRead+0x1c4>)
 8000d48:	801a      	strh	r2, [r3, #0]
	dig_P4 = (aui8TrimmingData[13]<<8) | aui8TrimmingData[12];
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	7c3b      	ldrb	r3, [r7, #16]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e54 <HAL_BME280_TrimmingRead+0x1c8>)
 8000d5c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (aui8TrimmingData[15]<<8) | aui8TrimmingData[14];
 8000d5e:	7cfb      	ldrb	r3, [r7, #19]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	7cbb      	ldrb	r3, [r7, #18]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <HAL_BME280_TrimmingRead+0x1cc>)
 8000d70:	801a      	strh	r2, [r3, #0]
	dig_P6 = (aui8TrimmingData[17]<<8) | aui8TrimmingData[16];
 8000d72:	7d7b      	ldrb	r3, [r7, #21]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	7d3b      	ldrb	r3, [r7, #20]
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b36      	ldr	r3, [pc, #216]	@ (8000e5c <HAL_BME280_TrimmingRead+0x1d0>)
 8000d84:	801a      	strh	r2, [r3, #0]
	dig_P7 = (aui8TrimmingData[19]<<8) | aui8TrimmingData[18];
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	7dbb      	ldrb	r3, [r7, #22]
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <HAL_BME280_TrimmingRead+0x1d4>)
 8000d98:	801a      	strh	r2, [r3, #0]
	dig_P8 = (aui8TrimmingData[21]<<8) | aui8TrimmingData[20];
 8000d9a:	7e7b      	ldrb	r3, [r7, #25]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	7e3b      	ldrb	r3, [r7, #24]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <HAL_BME280_TrimmingRead+0x1d8>)
 8000dac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (aui8TrimmingData[23]<<8) | aui8TrimmingData[22];
 8000dae:	7efb      	ldrb	r3, [r7, #27]
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	7ebb      	ldrb	r3, [r7, #26]
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000e68 <HAL_BME280_TrimmingRead+0x1dc>)
 8000dc0:	801a      	strh	r2, [r3, #0]
	dig_H1 =  aui8TrimmingData[24];
 8000dc2:	7f3b      	ldrb	r3, [r7, #28]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <HAL_BME280_TrimmingRead+0x1e0>)
 8000dc8:	801a      	strh	r2, [r3, #0]
	dig_H2 = (aui8TrimmingData[26]<<8) | aui8TrimmingData[25];
 8000dca:	7fbb      	ldrb	r3, [r7, #30]
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	7f7b      	ldrb	r3, [r7, #29]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <HAL_BME280_TrimmingRead+0x1e4>)
 8000ddc:	801a      	strh	r2, [r3, #0]
	dig_H3 = (aui8TrimmingData[27]);
 8000dde:	7ffb      	ldrb	r3, [r7, #31]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <HAL_BME280_TrimmingRead+0x1e8>)
 8000de4:	801a      	strh	r2, [r3, #0]
	dig_H4 = (aui8TrimmingData[28]<<4) | (aui8TrimmingData[29] & 0x0f);
 8000de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_BME280_TrimmingRead+0x1ec>)
 8000e02:	801a      	strh	r2, [r3, #0]
	dig_H5 = (aui8TrimmingData[30]<<4) | (aui8TrimmingData[29]>>4);
 8000e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_BME280_TrimmingRead+0x1f0>)
 8000e1e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (aui8TrimmingData[31]);
 8000e20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_BME280_TrimmingRead+0x1f4>)
 8000e28:	801a      	strh	r2, [r3, #0]

	return etHALBME280Status;
 8000e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3728      	adds	r7, #40	@ 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000390 	.word	0x20000390
 8000e3c:	200002f6 	.word	0x200002f6
 8000e40:	200002fe 	.word	0x200002fe
 8000e44:	20000300 	.word	0x20000300
 8000e48:	200002f8 	.word	0x200002f8
 8000e4c:	20000302 	.word	0x20000302
 8000e50:	20000304 	.word	0x20000304
 8000e54:	20000306 	.word	0x20000306
 8000e58:	20000308 	.word	0x20000308
 8000e5c:	2000030a 	.word	0x2000030a
 8000e60:	2000030c 	.word	0x2000030c
 8000e64:	2000030e 	.word	0x2000030e
 8000e68:	20000310 	.word	0x20000310
 8000e6c:	200002fa 	.word	0x200002fa
 8000e70:	20000312 	.word	0x20000312
 8000e74:	200002fc 	.word	0x200002fc
 8000e78:	20000314 	.word	0x20000314
 8000e7c:	20000316 	.word	0x20000316
 8000e80:	20000318 	.word	0x20000318

08000e84 <HAL_BME280_SensorConfig>:
 *         Check datasheet page no 18 and page no 30
 *
 * @retval HAL_StatusTypeDef status:
 */
HALBME280Status_et HAL_BME280_SensorConfig (uint8_t ui8osrs_Temp, uint8_t ui8osrs_Pressure, uint8_t ui8osrs_Humidity, uint8_t ui8SensorMode, uint8_t ui8StandbyTime, uint8_t ui8Filter)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4623      	mov	r3, r4
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	4603      	mov	r3, r0
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	717b      	strb	r3, [r7, #5]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	713b      	strb	r3, [r7, #4]

	HALBME280Status_et etHALBME280Status = HAL_BME280_SUCCESS;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]

	// Read the Trimming parameters
	HAL_BME280_TrimmingRead();
 8000ea6:	f7ff fef1 	bl	8000c8c <HAL_BME280_TrimmingRead>

	/*Data to Write To Sensor*/
	uint8_t ui8DataWrite = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73bb      	strb	r3, [r7, #14]

	/*Variable to checking the correct Data Ok is Write */
	uint8_t ui8DataCheck = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	737b      	strb	r3, [r7, #13]

	// Reset sequence the device
	ui8DataWrite = HAL_BME280_RESET_COMPLETE;
 8000eb2:	23b6      	movs	r3, #182	@ 0xb6
 8000eb4:	73bb      	strb	r3, [r7, #14]

	/*Write in Reset Address to apply Reset*/
	if (HAL_I2C_Mem_Write(&hi2c1, HAL_BME280_ADDRESS, RESET_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000) != HAL_OK)
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f107 030e 	add.w	r3, r7, #14
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	22e0      	movs	r2, #224	@ 0xe0
 8000eca:	21ec      	movs	r1, #236	@ 0xec
 8000ecc:	4860      	ldr	r0, [pc, #384]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000ece:	f001 fdb3 	bl	8002a38 <HAL_I2C_Mem_Write>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <HAL_BME280_SensorConfig+0x5e>
	{
		etHALBME280Status = HAL_BME280_ERROR;      //NACK
 8000ed8:	23ff      	movs	r3, #255	@ 0xff
 8000eda:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	e0b2      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}
	HAL_Delay (100);
 8000ee2:	2064      	movs	r0, #100	@ 0x64
 8000ee4:	f001 fa4c 	bl	8002380 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	ui8DataWrite = ui8osrs_Humidity;
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Mem_Write(&hi2c1, HAL_BME280_ADDRESS, CTRL_HUM_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000) != HAL_OK)
 8000eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f107 030e 	add.w	r3, r7, #14
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	22f2      	movs	r2, #242	@ 0xf2
 8000f00:	21ec      	movs	r1, #236	@ 0xec
 8000f02:	4853      	ldr	r0, [pc, #332]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000f04:	f001 fd98 	bl	8002a38 <HAL_I2C_Mem_Write>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <HAL_BME280_SensorConfig+0x94>
	{
		etHALBME280Status = HAL_BME280_ERROR;
 8000f0e:	23ff      	movs	r3, #255	@ 0xff
 8000f10:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	e097      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}
	HAL_Delay (100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f001 fa31 	bl	8002380 <HAL_Delay>
	/*Read for Checking the Value in CTRL_HUM_REG */
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, CTRL_HUM_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataCheck, 1, 1000);
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2301      	movs	r3, #1
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	f107 030d 	add.w	r3, r7, #13
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	22f2      	movs	r2, #242	@ 0xf2
 8000f32:	21ec      	movs	r1, #236	@ 0xec
 8000f34:	4846      	ldr	r0, [pc, #280]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000f36:	f001 fe93 	bl	8002c60 <HAL_I2C_Mem_Read>
	if (ui8DataCheck != ui8DataWrite)
 8000f3a:	7b7a      	ldrb	r2, [r7, #13]
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d004      	beq.n	8000f4c <HAL_BME280_SensorConfig+0xc8>
	{
		etHALBME280Status = HAL_BME280_ERROR;
 8000f42:	23ff      	movs	r3, #255	@ 0xff
 8000f44:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	e07d      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}


	// write the standby time and IIR ui8Filter coeff to 0xF5
	ui8DataWrite = (ui8StandbyTime <<5) |(ui8Filter << 2);
 8000f4c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000f50:	015b      	lsls	r3, r3, #5
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Mem_Write(&hi2c1, HAL_BME280_ADDRESS, CONFIG_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000) != HAL_OK)
 8000f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 030e 	add.w	r3, r7, #14
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	22f5      	movs	r2, #245	@ 0xf5
 8000f78:	21ec      	movs	r1, #236	@ 0xec
 8000f7a:	4835      	ldr	r0, [pc, #212]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000f7c:	f001 fd5c 	bl	8002a38 <HAL_I2C_Mem_Write>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d004      	beq.n	8000f90 <HAL_BME280_SensorConfig+0x10c>
	{
		etHALBME280Status = HAL_BME280_ERROR;
 8000f86:	23ff      	movs	r3, #255	@ 0xff
 8000f88:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	e05b      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}
	HAL_Delay (100);
 8000f90:	2064      	movs	r0, #100	@ 0x64
 8000f92:	f001 f9f5 	bl	8002380 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, CONFIG_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataCheck, 1, 1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 030d 	add.w	r3, r7, #13
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	22f5      	movs	r2, #245	@ 0xf5
 8000faa:	21ec      	movs	r1, #236	@ 0xec
 8000fac:	4828      	ldr	r0, [pc, #160]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000fae:	f001 fe57 	bl	8002c60 <HAL_I2C_Mem_Read>
	if (ui8DataCheck != ui8DataWrite)
 8000fb2:	7b7a      	ldrb	r2, [r7, #13]
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d004      	beq.n	8000fc4 <HAL_BME280_SensorConfig+0x140>
	{
		etHALBME280Status = HAL_BME280_ERROR;
 8000fba:	23ff      	movs	r3, #255	@ 0xff
 8000fbc:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	e041      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	ui8DataWrite = (ui8osrs_Temp <<5) |(ui8osrs_Pressure << 2) | ui8SensorMode;
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	015b      	lsls	r3, r3, #5
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	73bb      	strb	r3, [r7, #14]
	if (HAL_I2C_Mem_Write(&hi2c1, HAL_BME280_ADDRESS, CTRL_MEAS_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000) != HAL_OK)
 8000fe4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	22f4      	movs	r2, #244	@ 0xf4
 8000ff8:	21ec      	movs	r1, #236	@ 0xec
 8000ffa:	4815      	ldr	r0, [pc, #84]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 8000ffc:	f001 fd1c 	bl	8002a38 <HAL_I2C_Mem_Write>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HAL_BME280_SensorConfig+0x18c>
	{
		etHALBME280Status =  HAL_BME280_ERROR;
 8001006:	23ff      	movs	r3, #255	@ 0xff
 8001008:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	e01b      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}
	HAL_Delay (100);
 8001010:	2064      	movs	r0, #100	@ 0x64
 8001012:	f001 f9b5 	bl	8002380 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, CTRL_MEAS_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataCheck, 1, 1000);
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	2301      	movs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 030d 	add.w	r3, r7, #13
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	22f4      	movs	r2, #244	@ 0xf4
 800102a:	21ec      	movs	r1, #236	@ 0xec
 800102c:	4808      	ldr	r0, [pc, #32]	@ (8001050 <HAL_BME280_SensorConfig+0x1cc>)
 800102e:	f001 fe17 	bl	8002c60 <HAL_I2C_Mem_Read>
	if (ui8DataCheck != ui8DataWrite)
 8001032:	7b7a      	ldrb	r2, [r7, #13]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	429a      	cmp	r2, r3
 8001038:	d004      	beq.n	8001044 <HAL_BME280_SensorConfig+0x1c0>
	{
		etHALBME280Status = HAL_BME280_ERROR;
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	73fb      	strb	r3, [r7, #15]
		return etHALBME280Status;
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	e001      	b.n	8001048 <HAL_BME280_SensorConfig+0x1c4>
	}

	return etHALBME280Status;
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	20000390 	.word	0x20000390

08001054 <HAL_BME280_ReadRawData>:
 * 4. Returns HAL_OK if successful, otherwise HAL_ERROR.
 *
 * @return HALBME280Status_et - HAL_BME280_SUCCESS if data is read successfully, HAL_BME280_ERROR if chip ID check fails.
 */
HALBME280Status_et HAL_BME280_ReadRawData(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
	HALBME280Status_et etHALBME280Status = HAL_BME280_SUCCESS;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]

	/*For ID Check Chip*/
	uint8_t ui8ChipID;

	// Check the chip ID before reading sensor data
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, ID_REG, HAL_BME280_SIZE_ADDRESS, &ui8ChipID, 1, 1000);
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2301      	movs	r3, #1
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	1cfb      	adds	r3, r7, #3
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	22d0      	movs	r2, #208	@ 0xd0
 8001070:	21ec      	movs	r1, #236	@ 0xec
 8001072:	481c      	ldr	r0, [pc, #112]	@ (80010e4 <HAL_BME280_ReadRawData+0x90>)
 8001074:	f001 fdf4 	bl	8002c60 <HAL_I2C_Mem_Read>

	// Verify if the sensor has been properly initialized (device reset number check)
	if (ui8ChipID == HAL_BM280_DEVICE_FINISHED_RESET_NUMBER)
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b60      	cmp	r3, #96	@ 0x60
 800107c:	d129      	bne.n	80010d2 <HAL_BME280_ReadRawData+0x7e>
	{
		// Read 8 bytes starting from the PRESS_MSB_REG (0xF7 to 0xFE)
		// Data includes pressure (20-bit), temperature (20-bit), and humidity (16-bit)
		HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, PRESS_MSB_REG, HAL_BME280_SIZE_ADDRESS, ui8RawData, 8, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2308      	movs	r3, #8
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	22f7      	movs	r2, #247	@ 0xf7
 8001090:	21ec      	movs	r1, #236	@ 0xec
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <HAL_BME280_ReadRawData+0x90>)
 8001094:	f001 fde4 	bl	8002c60 <HAL_I2C_Mem_Read>

		/* Extract raw pressure, temperature, and humidity values */
		// Pressure: 20-bit value extracted from registers 0xF7, 0xF8, and 0xF9
		g_i32PressureRaw = (ui8RawData[0] << 12) | (ui8RawData[1] << 4) | (ui8RawData[2] >> 4);
 8001098:	793b      	ldrb	r3, [r7, #4]
 800109a:	031a      	lsls	r2, r3, #12
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4313      	orrs	r3, r2
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	0912      	lsrs	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	4313      	orrs	r3, r2
 80010aa:	4a0f      	ldr	r2, [pc, #60]	@ (80010e8 <HAL_BME280_ReadRawData+0x94>)
 80010ac:	6013      	str	r3, [r2, #0]

		// Temperature: 20-bit value extracted from registers 0xFA, 0xFB, and 0xFC
		g_i32TempRaw = (ui8RawData[3] << 12) | (ui8RawData[4] << 4) | (ui8RawData[5] >> 4);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	031a      	lsls	r2, r3, #12
 80010b2:	7a3b      	ldrb	r3, [r7, #8]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4313      	orrs	r3, r2
 80010b8:	7a7a      	ldrb	r2, [r7, #9]
 80010ba:	0912      	lsrs	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	4313      	orrs	r3, r2
 80010c0:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_BME280_ReadRawData+0x98>)
 80010c2:	6013      	str	r3, [r2, #0]

		// Humidity: 16-bit value extracted from registers 0xFD and 0xFE
		g_i32HumidityRaw = (ui8RawData[6] << 8) | (ui8RawData[7]);
 80010c4:	7abb      	ldrb	r3, [r7, #10]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	7afa      	ldrb	r2, [r7, #11]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <HAL_BME280_ReadRawData+0x9c>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e001      	b.n	80010d6 <HAL_BME280_ReadRawData+0x82>
	}
	else
	{
		// Return error if the chip ID check fails
		etHALBME280Status = HAL_BME280_ERROR;
 80010d2:	23ff      	movs	r3, #255	@ 0xff
 80010d4:	73fb      	strb	r3, [r7, #15]
	}

	return etHALBME280Status;
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000390 	.word	0x20000390
 80010e8:	20000320 	.word	0x20000320
 80010ec:	2000031c 	.word	0x2000031c
 80010f0:	20000324 	.word	0x20000324

080010f4 <HAL_BME280_WakeUPSensor>:

/* To be used when doing the force measurement
 * the Device need to be put in forced mode every time the measurement is needed
 */
HALBME280Status_et HAL_BME280_WakeUPSensor(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af04      	add	r7, sp, #16
	HALBME280Status_et etHALBME280Status = HAL_BME280_SUCCESS;
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]
	uint8_t ui8DataWrite = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71bb      	strb	r3, [r7, #6]

	// first read the register
	HAL_I2C_Mem_Read(&hi2c1, HAL_BME280_ADDRESS, CTRL_MEAS_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	22f4      	movs	r2, #244	@ 0xf4
 8001114:	21ec      	movs	r1, #236	@ 0xec
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <HAL_BME280_WakeUPSensor+0x60>)
 8001118:	f001 fda2 	bl	8002c60 <HAL_I2C_Mem_Read>

	// modify the data with the forced mode
	ui8DataWrite = ui8DataWrite | MODE_FORCED;
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	71bb      	strb	r3, [r7, #6]

	// write the new data to the register
	HAL_I2C_Mem_Write(&hi2c1, HAL_BME280_ADDRESS, CTRL_MEAS_REG, HAL_BME280_SIZE_ADDRESS, &ui8DataWrite, 1, 1000);
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	22f4      	movs	r2, #244	@ 0xf4
 8001138:	21ec      	movs	r1, #236	@ 0xec
 800113a:	4806      	ldr	r0, [pc, #24]	@ (8001154 <HAL_BME280_WakeUPSensor+0x60>)
 800113c:	f001 fc7c 	bl	8002a38 <HAL_I2C_Mem_Write>

	HAL_Delay (100);
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	f001 f91d 	bl	8002380 <HAL_Delay>

	return etHALBME280Status;
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000390 	.word	0x20000390

08001158 <HAL_BME280_Measure>:
 *
 * @note The function will return 0 for any parameter if the measurement was disabled
 *       or if the sensor is not properly connected.
 */
HALBME280Status_et HAL_BME280_Measure (float *fpTemperatureRead  ,float *fpHumidityRead )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	HALBME280Status_et etHALBME280Status = HAL_BME280_SUCCESS;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]
	if (HAL_BME280_ReadRawData() == HAL_BME280_SUCCESS)
 8001166:	f7ff ff75 	bl	8001054 <HAL_BME280_ReadRawData>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d142      	bne.n	80011f6 <HAL_BME280_Measure+0x9e>
	{
		if (g_i32TempRaw == 0x800000)
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <HAL_BME280_Measure+0xc4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001178:	d104      	bne.n	8001184 <HAL_BME280_Measure+0x2c>
		{
			*fpTemperatureRead = 0; // value in case temp measurement was disabled
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e016      	b.n	80011b2 <HAL_BME280_Measure+0x5a>
		}
		else
		{
			*fpTemperatureRead = (HAL_BME280_compensate_T_int32 (g_i32TempRaw))/100.0;  // as per datasheet, the temp is x100
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_BME280_Measure+0xc4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f84f 	bl	800122c <HAL_BME280_compensate_T_int32>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HAL_BME280_Measure+0xc8>)
 800119c:	f7ff fb56 	bl	800084c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fcfe 	bl	8000ba8 <__aeabi_d2f>
 80011ac:	4602      	mov	r2, r0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
		}

		if (g_i32HumidityRaw == 0x800000)
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_BME280_Measure+0xcc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011ba:	d104      	bne.n	80011c6 <HAL_BME280_Measure+0x6e>
		{
			*fpHumidityRead = 0; // value in case temp measurement was disabled
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e024      	b.n	8001210 <HAL_BME280_Measure+0xb8>
		}
		else
		{
			*fpHumidityRead = (HAL_BME280_compensate_H_int32 (g_i32HumidityRaw))/1024.0;  // as per datasheet, the temp is x1024
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_BME280_Measure+0xcc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f870 	bl	80012b0 <HAL_BME280_compensate_H_int32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f996 	bl	8000504 <__aeabi_ui2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_BME280_Measure+0xd0>)
 80011de:	f7ff fb35 	bl	800084c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fcdd 	bl	8000ba8 <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e00c      	b.n	8001210 <HAL_BME280_Measure+0xb8>


	// if the device is detached
	else
	{
		*fpTemperatureRead = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
		*fpHumidityRead    = 0;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
		 etHALBME280Status = HAL_BME280_ERROR;
 8001206:	23ff      	movs	r3, #255	@ 0xff
 8001208:	73fb      	strb	r3, [r7, #15]
		 return etHALBME280Status;
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <HAL_BME280_Measure+0xbc>
	}
	return etHALBME280Status;
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000031c 	.word	0x2000031c
 8001220:	40590000 	.word	0x40590000
 8001224:	20000324 	.word	0x20000324
 8001228:	40900000 	.word	0x40900000

0800122c <HAL_BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
 */
int32_t t_fine;
int32_t HAL_BME280_compensate_T_int32(int32_t adc_T)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	10da      	asrs	r2, r3, #3
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_BME280_compensate_T_int32+0x74>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	4a18      	ldr	r2, [pc, #96]	@ (80012a4 <HAL_BME280_compensate_T_int32+0x78>)
 8001242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	12db      	asrs	r3, r3, #11
 800124c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	111b      	asrs	r3, r3, #4
 8001252:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <HAL_BME280_compensate_T_int32+0x74>)
 8001254:	8812      	ldrh	r2, [r2, #0]
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	1112      	asrs	r2, r2, #4
 800125c:	4910      	ldr	r1, [pc, #64]	@ (80012a0 <HAL_BME280_compensate_T_int32+0x74>)
 800125e:	8809      	ldrh	r1, [r1, #0]
 8001260:	1a52      	subs	r2, r2, r1
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	131b      	asrs	r3, r3, #12
 8001268:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <HAL_BME280_compensate_T_int32+0x7c>)
 800126a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	139b      	asrs	r3, r3, #14
 8001274:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4413      	add	r3, r2
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_BME280_compensate_T_int32+0x80>)
 800127e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_BME280_compensate_T_int32+0x80>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3380      	adds	r3, #128	@ 0x80
 800128c:	121b      	asrs	r3, r3, #8
 800128e:	60fb      	str	r3, [r7, #12]
	return T;
 8001290:	68fb      	ldr	r3, [r7, #12]
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200002f6 	.word	0x200002f6
 80012a4:	200002fe 	.word	0x200002fe
 80012a8:	20000300 	.word	0x20000300
 80012ac:	20000328 	.word	0x20000328

080012b0 <HAL_BME280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
 */
uint32_t HAL_BME280_compensate_H_int32(int32_t adc_H)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 80012b8:	4b2c      	ldr	r3, [pc, #176]	@ (800136c <HAL_BME280_compensate_H_int32+0xbc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80012c0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	039a      	lsls	r2, r3, #14
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <HAL_BME280_compensate_H_int32+0xc0>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	051b      	lsls	r3, r3, #20
 80012ce:	1ad2      	subs	r2, r2, r3
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_BME280_compensate_H_int32+0xc4>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80012e0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80012e4:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80012e6:	4a24      	ldr	r2, [pc, #144]	@ (8001378 <HAL_BME280_compensate_H_int32+0xc8>)
 80012e8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012ec:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 80012f4:	1292      	asrs	r2, r2, #10
 80012f6:	4921      	ldr	r1, [pc, #132]	@ (800137c <HAL_BME280_compensate_H_int32+0xcc>)
 80012f8:	8809      	ldrh	r1, [r1, #0]
 80012fa:	4608      	mov	r0, r1
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	fb00 f101 	mul.w	r1, r0, r1
 8001302:	12c9      	asrs	r1, r1, #11
 8001304:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001308:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800130c:	1292      	asrs	r2, r2, #10
 800130e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001312:	491b      	ldr	r1, [pc, #108]	@ (8001380 <HAL_BME280_compensate_H_int32+0xd0>)
 8001314:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001318:	fb01 f202 	mul.w	r2, r1, r2
 800131c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001320:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	13db      	asrs	r3, r3, #15
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	13d2      	asrs	r2, r2, #15
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001336:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <HAL_BME280_compensate_H_int32+0xd4>)
 8001338:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800133a:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800133e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800134c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001354:	bfa8      	it	ge
 8001356:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800135a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	131b      	asrs	r3, r3, #12
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000328 	.word	0x20000328
 8001370:	20000314 	.word	0x20000314
 8001374:	20000316 	.word	0x20000316
 8001378:	20000318 	.word	0x20000318
 800137c:	200002fc 	.word	0x200002fc
 8001380:	20000312 	.word	0x20000312
 8001384:	200002fa 	.word	0x200002fa

08001388 <HAL_EEPROM_WriteByte>:
 *           - HAL_EEPROM_SUCCESS: Operation successful
 *           - HAL_EEPROM_ERROR_ADDRESS: Invalid byte address
 *           - HAL_EEPROM_ERROR_INTERFACE: I2C communication error
 */
HALEepromStatus_et HAL_EEPROM_WriteByte(uint16_t ui16ByteNumber,uint8_t ui8WriteData)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af04      	add	r7, sp, #16
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	717b      	strb	r3, [r7, #5]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
	if (ui16ByteNumber >= HAL_EEPROM_SIZE)
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
		return etHALEepromStatus;
	}
	if (HAL_I2C_Mem_Write(&hi2c2, HAL_EEPROM_ADDR, ui16ByteNumber, I2C_MEMADD_SIZE_16BIT, (uint8_t *)&ui8WriteData, sizeof(ui8WriteData), HAL_MAX_DELAY) !=  HAL_OK)
 800139c:	88fa      	ldrh	r2, [r7, #6]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	1d7b      	adds	r3, r7, #5
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2302      	movs	r3, #2
 80013ae:	21a0      	movs	r1, #160	@ 0xa0
 80013b0:	4807      	ldr	r0, [pc, #28]	@ (80013d0 <HAL_EEPROM_WriteByte+0x48>)
 80013b2:	f001 fb41 	bl	8002a38 <HAL_I2C_Mem_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_EEPROM_WriteByte+0x3c>
	{

		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 80013bc:	2304      	movs	r3, #4
 80013be:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	e000      	b.n	80013c6 <HAL_EEPROM_WriteByte+0x3e>
	}
	return etHALEepromStatus;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200003e4 	.word	0x200003e4

080013d4 <HAL_EEPROM_WritePage>:
 *           - HAL_EEPROM_ERROR_PAGE_ADDRESS: Invalid page number
 *           - HAL_EEPROM_ERROR_BUFFER_SIZE: Buffer size exceeds page size
 *           - HAL_EEPROM_ERROR_INTERFACE: I2C communication error
 */
HALEepromStatus_et HAL_EEPROM_WritePage(uint16_t ui16PageNumber, uint8_t aui8TxBuffer[], uint8_t ui8TxBufSize)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4613      	mov	r3, r2
 80013e2:	717b      	strb	r3, [r7, #5]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]

	uint16_t ui16PageAddress = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	81bb      	strh	r3, [r7, #12]

	if (ui16PageNumber > HAL_EEPROM_PAGE_NUMS)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f2:	d903      	bls.n	80013fc <HAL_EEPROM_WritePage+0x28>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_PAGE_ADDRESS;
 80013f4:	2302      	movs	r3, #2
 80013f6:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	e01f      	b.n	800143c <HAL_EEPROM_WritePage+0x68>
	}
	// Calculate the starting byte address from the page number
	ui16PageAddress = ui16PageNumber * HAL_EEPROM_PAGE_SIZE;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	81bb      	strh	r3, [r7, #12]

	// Check if buffer size is valid (should not exceed page size)
	if (ui8TxBufSize > HAL_EEPROM_PAGE_SIZE)
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b80      	cmp	r3, #128	@ 0x80
 8001406:	d903      	bls.n	8001410 <HAL_EEPROM_WritePage+0x3c>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_BUFFER_SIZE;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e015      	b.n	800143c <HAL_EEPROM_WritePage+0x68>
	}
	if (HAL_I2C_Mem_Write(&hi2c2, HAL_EEPROM_ADDR, ui16PageAddress, I2C_MEMADD_SIZE_16BIT, aui8TxBuffer, ui8TxBufSize, HAL_MAX_DELAY) !=  HAL_OK)
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	b29b      	uxth	r3, r3
 8001414:	89ba      	ldrh	r2, [r7, #12]
 8001416:	f04f 31ff 	mov.w	r1, #4294967295
 800141a:	9102      	str	r1, [sp, #8]
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2302      	movs	r3, #2
 8001424:	21a0      	movs	r1, #160	@ 0xa0
 8001426:	4807      	ldr	r0, [pc, #28]	@ (8001444 <HAL_EEPROM_WritePage+0x70>)
 8001428:	f001 fb06 	bl	8002a38 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_EEPROM_WritePage+0x66>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 8001432:	2304      	movs	r3, #4
 8001434:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	e000      	b.n	800143c <HAL_EEPROM_WritePage+0x68>
	}
	return etHALEepromStatus;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200003e4 	.word	0x200003e4

08001448 <HAL_EEPROM_ReadByte>:
 *           - HAL_EEPROM_SUCCESS: Operation successful
 *           - HAL_EEPROM_ERROR_ADDRESS: Invalid byte address
 *           - HAL_EEPROM_ERROR_INTERFACE: I2C communication error
 */
HALEepromStatus_et HAL_EEPROM_ReadByte(uint16_t ui16ByteNumber, uint8_t *ui8ReadData)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af04      	add	r7, sp, #16
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
	if (ui16ByteNumber >= HAL_EEPROM_SIZE)
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
		return etHALEepromStatus;
	}
	if (HAL_I2C_Mem_Read(&hi2c2, HAL_EEPROM_ADDR, ui16ByteNumber, I2C_MEMADD_SIZE_16BIT, ui8ReadData, sizeof(ui8ReadData), HAL_MAX_DELAY) !=  HAL_OK)
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2304      	movs	r3, #4
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2302      	movs	r3, #2
 800146a:	21a0      	movs	r1, #160	@ 0xa0
 800146c:	4807      	ldr	r0, [pc, #28]	@ (800148c <HAL_EEPROM_ReadByte+0x44>)
 800146e:	f001 fbf7 	bl	8002c60 <HAL_I2C_Mem_Read>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_EEPROM_ReadByte+0x38>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 8001478:	2304      	movs	r3, #4
 800147a:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	e000      	b.n	8001482 <HAL_EEPROM_ReadByte+0x3a>
	}

	return etHALEepromStatus;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200003e4 	.word	0x200003e4

08001490 <HAL_EEPROM_ReadPage>:
 *           - HAL_EEPROM_ERROR_PAGE_ADDRESS: Invalid page number
 *           - HAL_EEPROM_ERROR_BUFFER_SIZE: Buffer size exceeds page size
 *           - HAL_EEPROM_ERROR_INTERFACE: I2C communication error
 */
HALEepromStatus_et HAL_EEPROM_ReadPage(uint16_t ui16PageNumber, uint8_t aui8RxBuffer[], uint8_t ui8RxBufSize)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	80fb      	strh	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	717b      	strb	r3, [r7, #5]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

	// Calculate the starting byte address from the page number
	uint16_t ui16PageAddress = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	81bb      	strh	r3, [r7, #12]

	if (ui16PageNumber > HAL_EEPROM_PAGE_NUMS)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ae:	d903      	bls.n	80014b8 <HAL_EEPROM_ReadPage+0x28>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_PAGE_ADDRESS;
 80014b0:	2302      	movs	r3, #2
 80014b2:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	e01f      	b.n	80014f8 <HAL_EEPROM_ReadPage+0x68>
	}
	// Calculate the starting byte address from the page number
	ui16PageAddress = ui16PageNumber * HAL_EEPROM_PAGE_SIZE;
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	81bb      	strh	r3, [r7, #12]

	// Check if buffer size is valid (should not exceed page size)
	if (ui8RxBufSize > HAL_EEPROM_PAGE_SIZE)
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2b80      	cmp	r3, #128	@ 0x80
 80014c2:	d903      	bls.n	80014cc <HAL_EEPROM_ReadPage+0x3c>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_BUFFER_SIZE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	e015      	b.n	80014f8 <HAL_EEPROM_ReadPage+0x68>
	}
	if (HAL_I2C_Mem_Read(&hi2c2, HAL_EEPROM_ADDR, ui16PageAddress, I2C_MEMADD_SIZE_16BIT, aui8RxBuffer, ui8RxBufSize, HAL_MAX_DELAY) !=  HAL_OK)
 80014cc:	797b      	ldrb	r3, [r7, #5]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	89ba      	ldrh	r2, [r7, #12]
 80014d2:	f04f 31ff 	mov.w	r1, #4294967295
 80014d6:	9102      	str	r1, [sp, #8]
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2302      	movs	r3, #2
 80014e0:	21a0      	movs	r1, #160	@ 0xa0
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <HAL_EEPROM_ReadPage+0x70>)
 80014e4:	f001 fbbc 	bl	8002c60 <HAL_I2C_Mem_Read>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_EEPROM_ReadPage+0x66>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 80014ee:	2304      	movs	r3, #4
 80014f0:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	e000      	b.n	80014f8 <HAL_EEPROM_ReadPage+0x68>
	}

	return etHALEepromStatus;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200003e4 	.word	0x200003e4

08001504 <HAL_EEPROM_Write>:
  * @param  ui8WriteBuff Pointer to the data buffer to be written
  * @param  ui16WriteBuffSize Size of the data buffer to be written
  * @retval HAL EEPROM status
  */
HALEepromStatus_et HAL_EEPROM_Write(uint16_t ui16EepromAdd, uint8_t* ui8WriteBuff, uint16_t ui16WriteBuffSize)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af04      	add	r7, sp, #16
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	80fb      	strh	r3, [r7, #6]
 8001510:	4613      	mov	r3, r2
 8001512:	80bb      	strh	r3, [r7, #4]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	if (ui16WriteBuffSize >= HAL_EEPROM_SIZE)
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
		return etHALEepromStatus;
	}
	if (HAL_I2C_Mem_Write(&hi2c2, HAL_EEPROM_ADDR, ui16EepromAdd, I2C_MEMADD_SIZE_16BIT, ui8WriteBuff, ui16WriteBuffSize, HAL_MAX_DELAY) !=  HAL_OK)
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2302      	movs	r3, #2
 800152a:	21a0      	movs	r1, #160	@ 0xa0
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <HAL_EEPROM_Write+0x48>)
 800152e:	f001 fa83 	bl	8002a38 <HAL_I2C_Mem_Write>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_EEPROM_Write+0x3c>
	{

		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 8001538:	2304      	movs	r3, #4
 800153a:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	e000      	b.n	8001542 <HAL_EEPROM_Write+0x3e>
	}
	return etHALEepromStatus;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003e4 	.word	0x200003e4

08001550 <HAL_EEPROM_Read>:
  * @param  ui8ReadBuff Pointer to the data buffer to store the read data
  * @param  ui16ReadBuffSize Size of the data buffer to be read
  * @retval HAL EEPROM status
  */
HALEepromStatus_et HAL_EEPROM_Read(uint16_t ui16EepromAdd ,uint8_t* ui8ReadBuff, uint16_t ui16ReadBuffSize)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af04      	add	r7, sp, #16
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	80fb      	strh	r3, [r7, #6]
 800155c:	4613      	mov	r3, r2
 800155e:	80bb      	strh	r3, [r7, #4]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
	if (ui16ReadBuffSize >= HAL_EEPROM_SIZE)
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
		return etHALEepromStatus;
	}
	if (HAL_I2C_Mem_Read(&hi2c2, HAL_EEPROM_ADDR, ui16EepromAdd, I2C_MEMADD_SIZE_16BIT, ui8ReadBuff, ui16ReadBuffSize, HAL_MAX_DELAY) !=  HAL_OK)
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	21a0      	movs	r1, #160	@ 0xa0
 8001578:	4807      	ldr	r0, [pc, #28]	@ (8001598 <HAL_EEPROM_Read+0x48>)
 800157a:	f001 fb71 	bl	8002c60 <HAL_I2C_Mem_Read>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_EEPROM_Read+0x3c>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_INTERFACE;
 8001584:	2304      	movs	r3, #4
 8001586:	73fb      	strb	r3, [r7, #15]
		return etHALEepromStatus;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	e000      	b.n	800158e <HAL_EEPROM_Read+0x3e>
	}
	return etHALEepromStatus;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200003e4 	.word	0x200003e4

0800159c <HAL_EEPROM_SaveLastAddress>:
/**
  * @brief  Save the last used EEPROM address to a predefined location (fist two byte in the EEPROM)
  * @retval HAL EEPROM status
  */
HALEepromStatus_et  HAL_EEPROM_SaveLastAddress(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]

	uint8_t aui8AddrData[2] = { (g_ui16EEPROMLastAddress >> 8) & 0xFF, g_ui16EEPROMLastAddress & 0xFF };
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_EEPROM_SaveLastAddress+0x44>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	713b      	strb	r3, [r7, #4]
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_EEPROM_SaveLastAddress+0x44>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	717b      	strb	r3, [r7, #5]

	if (HAL_EEPROM_Write(HAL_EEPROM_LAST_ADDRESS_LOC, aui8AddrData, sizeof(aui8AddrData))!=  HAL_EEPROM_SUCCESS)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2202      	movs	r2, #2
 80015be:	4619      	mov	r1, r3
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ff9f 	bl	8001504 <HAL_EEPROM_Write>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_EEPROM_SaveLastAddress+0x38>
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
 80015cc:	2303      	movs	r3, #3
 80015ce:	71fb      	strb	r3, [r7, #7]
		return etHALEepromStatus;
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	e000      	b.n	80015d6 <HAL_EEPROM_SaveLastAddress+0x3a>
	}
	return etHALEepromStatus;
 80015d4:	79fb      	ldrb	r3, [r7, #7]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000000 	.word	0x20000000

080015e4 <HAL_EEPROM_LoadLastAddress>:
/**
  * @brief  Load the last used EEPROM address from a predefined location
  * @retval HAL EEPROM status
  */
HALEepromStatus_et HAL_EEPROM_LoadLastAddress(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
	uint8_t aui8AddrData[2];
	if (HAL_EEPROM_Read(HAL_EEPROM_LAST_ADDRESS_LOC, aui8AddrData, sizeof(aui8AddrData)) ==  HAL_EEPROM_SUCCESS)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2202      	movs	r2, #2
 80015f2:	4619      	mov	r1, r3
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff ffab 	bl	8001550 <HAL_EEPROM_Read>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10e      	bne.n	800161e <HAL_EEPROM_LoadLastAddress+0x3a>
	{
		etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001600:	2300      	movs	r3, #0
 8001602:	71fb      	strb	r3, [r7, #7]
		g_ui16EEPROMLastAddress = (aui8AddrData[0] << 8) | aui8AddrData[1];
 8001604:	793b      	ldrb	r3, [r7, #4]
 8001606:	b21b      	sxth	r3, r3
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	797b      	ldrb	r3, [r7, #5]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_EEPROM_LoadLastAddress+0x48>)
 8001618:	801a      	strh	r2, [r3, #0]
	else
	{
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
		return etHALEepromStatus;
	}
	return etHALEepromStatus;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	e002      	b.n	8001624 <HAL_EEPROM_LoadLastAddress+0x40>
		etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
 800161e:	2303      	movs	r3, #3
 8001620:	71fb      	strb	r3, [r7, #7]
		return etHALEepromStatus;
 8001622:	79fb      	ldrb	r3, [r7, #7]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_EEPROM_Write_DateTime>:
  * @param  fTemperature Temperature value to be stored
  * @param  fHumidity Humidity value to be stored
  * @retval HAL EEPROM status
  */
HAL_StatusTypeDef HAL_EEPROM_Write_DateTime(float fTemperature, float fHumidity)
{
 8001630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001632:	b09d      	sub	sp, #116	@ 0x74
 8001634:	af0a      	add	r7, sp, #40	@ 0x28
 8001636:	ed87 0a07 	vstr	s0, [r7, #28]
 800163a:	edc7 0a06 	vstr	s1, [r7, #24]
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	char cDateTimeBuff[32];
	int i32length = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	643b      	str	r3, [r7, #64]	@ 0x40

	HAL_RTC_Get_TimeDate();
 8001648:	f000 f914 	bl	8001874 <HAL_RTC_Get_TimeDate>

	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
			g_sTimeStampDate.Year + 2000, g_sTimeStampDate.Month, g_sTimeStampDate.Date,
 800164c:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <HAL_EEPROM_Write_DateTime+0xe8>)
 800164e:	78db      	ldrb	r3, [r3, #3]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 8001650:	f503 66fa 	add.w	r6, r3, #2000	@ 0x7d0
			g_sTimeStampDate.Year + 2000, g_sTimeStampDate.Month, g_sTimeStampDate.Date,
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_EEPROM_Write_DateTime+0xe8>)
 8001656:	785b      	ldrb	r3, [r3, #1]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 8001658:	617b      	str	r3, [r7, #20]
			g_sTimeStampDate.Year + 2000, g_sTimeStampDate.Month, g_sTimeStampDate.Date,
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_EEPROM_Write_DateTime+0xe8>)
 800165c:	789b      	ldrb	r3, [r3, #2]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 800165e:	613b      	str	r3, [r7, #16]
			g_sTimeStampTime.Hours, g_sTimeStampTime.Minutes, g_sTimeStampTime.Seconds,
 8001660:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <HAL_EEPROM_Write_DateTime+0xec>)
 8001662:	781b      	ldrb	r3, [r3, #0]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 8001664:	60fb      	str	r3, [r7, #12]
			g_sTimeStampTime.Hours, g_sTimeStampTime.Minutes, g_sTimeStampTime.Seconds,
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_EEPROM_Write_DateTime+0xec>)
 8001668:	785b      	ldrb	r3, [r3, #1]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 800166a:	60bb      	str	r3, [r7, #8]
			g_sTimeStampTime.Hours, g_sTimeStampTime.Minutes, g_sTimeStampTime.Seconds,
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_EEPROM_Write_DateTime+0xec>)
 800166e:	789b      	ldrb	r3, [r3, #2]
	i32length = snprintf(cDateTimeBuff, sizeof(cDateTimeBuff), "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,",
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	69f8      	ldr	r0, [r7, #28]
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4604      	mov	r4, r0
 800167a:	460d      	mov	r5, r1
 800167c:	69b8      	ldr	r0, [r7, #24]
 800167e:	f7fe ff63 	bl	8000548 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	f107 0020 	add.w	r0, r7, #32
 800168a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800168e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	9204      	str	r2, [sp, #16]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	9203      	str	r2, [sp, #12]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	9202      	str	r2, [sp, #8]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	9201      	str	r2, [sp, #4]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4633      	mov	r3, r6
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_EEPROM_Write_DateTime+0xf0>)
 80016aa:	2120      	movs	r1, #32
 80016ac:	f00a fa64 	bl	800bb78 <sniprintf>
 80016b0:	6438      	str	r0, [r7, #64]	@ 0x40
			fTemperature, fHumidity);

	if (g_ui16EEPROMLastAddress + i32length >= HAL_EEPROM_SIZE)
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_EEPROM_Write_DateTime+0xf4>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ba:	4413      	add	r3, r2
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c0:	db01      	blt.n	80016c6 <HAL_EEPROM_Write_DateTime+0x96>
	{
		return HAL_EEPROM_FULL_SIZE; // EEPROM Full
 80016c2:	2305      	movs	r3, #5
 80016c4:	e023      	b.n	800170e <HAL_EEPROM_Write_DateTime+0xde>
	}

	etHALEepromStatus = HAL_EEPROM_Write(g_ui16EEPROMLastAddress, (uint8_t *)cDateTimeBuff, sizeof(cDateTimeBuff));
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_EEPROM_Write_DateTime+0xf4>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	f107 0120 	add.w	r1, r7, #32
 80016ce:	2220      	movs	r2, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff17 	bl	8001504 <HAL_EEPROM_Write>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	HAL_Delay(10); // EEPROM write cycle delay
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 fe4f 	bl	8002380 <HAL_Delay>

	if (etHALEepromStatus == HAL_EEPROM_SUCCESS)
 80016e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_EEPROM_Write_DateTime+0xda>
	{
		g_ui16EEPROMLastAddress += i32length;
 80016ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_EEPROM_Write_DateTime+0xf4>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_EEPROM_Write_DateTime+0xf4>)
 80016f8:	801a      	strh	r2, [r3, #0]
		HAL_EEPROM_SaveLastAddress(); // Save updated address
 80016fa:	f7ff ff4f 	bl	800159c <HAL_EEPROM_SaveLastAddress>
	}
	else
	{
		return etHALEepromStatus;
	}
	HAL_Delay(10); // EEPROM write cycle delay
 80016fe:	200a      	movs	r0, #10
 8001700:	f000 fe3e 	bl	8002380 <HAL_Delay>

	return etHALEepromStatus;
 8001704:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001708:	e001      	b.n	800170e <HAL_EEPROM_Write_DateTime+0xde>
		return etHALEepromStatus;
 800170a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800170e:	4618      	mov	r0, r3
 8001710:	374c      	adds	r7, #76	@ 0x4c
 8001712:	46bd      	mov	sp, r7
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	bf00      	nop
 8001718:	20000384 	.word	0x20000384
 800171c:	20000370 	.word	0x20000370
 8001720:	0800de50 	.word	0x0800de50
 8001724:	20000000 	.word	0x20000000

08001728 <HAL_EEPROM_Stream_Data>:
/**
  * @brief  Stream all stored EEPROM data over USB
  * @retval HAL EEPROM status
  */
HALEepromStatus_et HAL_EEPROM_Stream_Data(void)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 800172e:	af00      	add	r7, sp, #0
	HALEepromStatus_et etHALEepromStatus = HAL_EEPROM_SUCCESS;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f

	uint32_t ui32TotalBytes = (g_ui16EEPROMLastAddress - HAL_EEPROM_DATA_START_ADDR);
 8001736:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <HAL_EEPROM_Stream_Data+0xcc>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3b02      	subs	r3, #2
 800173c:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
	uint32_t ui32EepromAddr = HAL_EEPROM_DATA_START_ADDR;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
	uint8_t ui8UsbBuffer[HAL_EEPROM_USB_CHUNK_SIZE];
	uint16_t ui16UsbIndex = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
	char cReadBuffer[HAL_EEPROM_READING_SIZE];

	HAL_EEPROM_LoadLastAddress();
 800174c:	f7ff ff4a 	bl	80015e4 <HAL_EEPROM_LoadLastAddress>

	while (ui32EepromAddr < ui32TotalBytes)
 8001750:	e043      	b.n	80017da <HAL_EEPROM_Stream_Data+0xb2>
	{
		// Read one reading (32 bytes)
		if (HAL_EEPROM_Read(ui32EepromAddr, (uint8_t *)cReadBuffer,  HAL_EEPROM_READING_SIZE) != HAL_EEPROM_SUCCESS)
 8001752:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001756:	b29b      	uxth	r3, r3
 8001758:	4639      	mov	r1, r7
 800175a:	2220      	movs	r2, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fef7 	bl	8001550 <HAL_EEPROM_Read>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_EEPROM_Stream_Data+0x48>
		{
			etHALEepromStatus =  HAL_EEPROM_ERROR_ADDRESS;
 8001768:	2303      	movs	r3, #3
 800176a:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
			// Handle read error
			break;
 800176e:	e03a      	b.n	80017e6 <HAL_EEPROM_Stream_Data+0xbe>
		}

		// Copy to USB buffer
		memcpy(&ui8UsbBuffer[ui16UsbIndex], cReadBuffer, HAL_EEPROM_READING_SIZE);
 8001770:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8001774:	f107 0220 	add.w	r2, r7, #32
 8001778:	441a      	add	r2, r3
 800177a:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800177e:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001788:	6020      	str	r0, [r4, #0]
 800178a:	6061      	str	r1, [r4, #4]
 800178c:	60a2      	str	r2, [r4, #8]
 800178e:	60e3      	str	r3, [r4, #12]
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	6120      	str	r0, [r4, #16]
 8001794:	6161      	str	r1, [r4, #20]
 8001796:	61a2      	str	r2, [r4, #24]
 8001798:	61e3      	str	r3, [r4, #28]
		ui16UsbIndex += HAL_EEPROM_READING_SIZE;
 800179a:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 800179e:	3320      	adds	r3, #32
 80017a0:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
		ui32EepromAddr += HAL_EEPROM_READING_SIZE;
 80017a4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80017a8:	3320      	adds	r3, #32
 80017aa:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428

		// If buffer is full or we reached the end, send it
		if (ui16UsbIndex >= HAL_EEPROM_USB_CHUNK_SIZE || ui32EepromAddr >= ui32TotalBytes) {
 80017ae:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b6:	d205      	bcs.n	80017c4 <HAL_EEPROM_Stream_Data+0x9c>
 80017b8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80017bc:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d30a      	bcc.n	80017da <HAL_EEPROM_Stream_Data+0xb2>
			HAL_PC_write(ui8UsbBuffer, ui16UsbIndex);
 80017c4:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f828 	bl	8001824 <HAL_PC_write>
			ui16UsbIndex = 0; // Reset buffer
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
	while (ui32EepromAddr < ui32TotalBytes)
 80017da:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80017de:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3b5      	bcc.n	8001752 <HAL_EEPROM_Stream_Data+0x2a>
		}
	}
	return etHALEepromStatus;
 80017e6:	f897 342f 	ldrb.w	r3, [r7, #1071]	@ 0x42f
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_PC_read>:
 * \param	pui8Buffer	pointer to hold read data
 * \param	ui16DataSize	size of data to be read
 * \return	uint32_t status
 * */
HALPCStatus_et HAL_PC_read (uint8_t * pui8UsbRxBuffer)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	HALPCStatus_et etHALPCStatus = HAL_PC_SUCCESS;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]

	// Copy data to the buffer
	memcpy((void *) pui8UsbRxBuffer , (void *) &g_aui8UsbRxBuffer[0] , g_ui8UsbRecieveLen);
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_PC_read+0x24>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4905      	ldr	r1, [pc, #20]	@ (8001820 <HAL_PC_read+0x28>)
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f00a fac2 	bl	800bd96 <memcpy>

	return etHALPCStatus;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000032c 	.word	0x2000032c
 8001820:	20000330 	.word	0x20000330

08001824 <HAL_PC_write>:
 * \param	ui16DataSize	size of data to be read
 * \return	uint32_t status
 * Note : ui16DataSize must not exceed 32 bytes
 * */
HALPCStatus_et HAL_PC_write (uint8_t * pui8UsbTxBuffer , uint16_t ui16UsbTxBufferSize)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
	HALPCStatus_et etHALPCStatus = HAL_PC_SUCCESS;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]

	// Send PC Message
	if (CDC_Transmit_FS(pui8UsbTxBuffer, ui16UsbTxBufferSize) != USBD_OK)
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f008 ff71 	bl	800a720 <CDC_Transmit_FS>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_PC_write+0x28>
	{
		etHALPCStatus = HAL_PC_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
		return etHALPCStatus;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	e000      	b.n	800184e <HAL_PC_write+0x2a>
	}

	return etHALPCStatus;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_RTC_init>:
 * @brief  Initialize the RTC with a callback function for wake-up events
 * @param  pfnCallback Pointer to the callback function to be executed on wake-up
 * @retval HAL RTC status
 */
HALRTCStatus_et HAL_RTC_init(void (*pfnCallback)(void))
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	HALRTCStatus_et etHALRTCStatus = HAL_RTC_SUCCESS;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

	MCAL_ISR_RTC_WakeUpCallback(pfnCallback);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f876 	bl	8001954 <MCAL_ISR_RTC_WakeUpCallback>

	return etHALRTCStatus;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_RTC_Get_TimeDate>:
/**
 * @brief  Retrieve the current time and date from the RTC
 * @retval HAL RTC status
 */
HALRTCStatus_et HAL_RTC_Get_TimeDate(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	HALRTCStatus_et etHALRTCStatus = HAL_RTC_SUCCESS;
 800187a:	2300      	movs	r3, #0
 800187c:	71fb      	strb	r3, [r7, #7]

	HAL_RTC_GetTime(&hrtc, &g_sTimeStampTime, RTC_FORMAT_BCD);
 800187e:	2201      	movs	r2, #1
 8001880:	4906      	ldr	r1, [pc, #24]	@ (800189c <HAL_RTC_Get_TimeDate+0x28>)
 8001882:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <HAL_RTC_Get_TimeDate+0x2c>)
 8001884:	f004 fd7f 	bl	8006386 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &g_sTimeStampDate, RTC_FORMAT_BCD);
 8001888:	2201      	movs	r2, #1
 800188a:	4906      	ldr	r1, [pc, #24]	@ (80018a4 <HAL_RTC_Get_TimeDate+0x30>)
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <HAL_RTC_Get_TimeDate+0x2c>)
 800188e:	f004 fe5d 	bl	800654c <HAL_RTC_GetDate>

	return etHALRTCStatus;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000370 	.word	0x20000370
 80018a0:	20000438 	.word	0x20000438
 80018a4:	20000384 	.word	0x20000384

080018a8 <HAL_RTC_SetWakeUpTime>:
 * called one time before while (1) main to set the duration of the waiting time
 * @param  ui8Mins Duration in minutes for the wake-up timer
 * @retval HAL RTC status
 */
HALRTCStatus_et HAL_RTC_SetWakeUpTime(uint8_t ui8Mins)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	HALRTCStatus_et etHALRTCStatus = HAL_RTC_SUCCESS;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ui8Mins*HAL_RTC_ONE_MINUTES), RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4619      	mov	r1, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	2204      	movs	r2, #4
 80018c6:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <HAL_RTC_SetWakeUpTime+0x3c>)
 80018c8:	f004 ff60 	bl	800678c <HAL_RTCEx_SetWakeUpTimer_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_RTC_SetWakeUpTime+0x32>
	{
		etHALRTCStatus = HAL_RTC_FAILED;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
		Error_Handler();
 80018d6:	f000 fa95 	bl	8001e04 <Error_Handler>
	}
	return etHALRTCStatus;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000438 	.word	0x20000438

080018e8 <HAL_Switch_Init>:
 * @brief  Initialize the switch GPIO with a callback function for external interrupts
 * @param  pfnCallback Pointer to the callback function to be executed on interrupt
 * @retval HAL GPIO status
 */
HALGPIOStatus_et HAL_Switch_Init(void (*pfnCallback)(void))
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	HALGPIOStatus_et etHALGPIOStatus = HAL_GPIO_SUCCESS;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

	g_etHalSwitchStatus = HAL_SWITCH_RELEASED ;
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_Switch_Init+0x24>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
	MCAL_ISR_GPIO_EXTICallback (pfnCallback);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f808 	bl	8001910 <MCAL_ISR_GPIO_EXTICallback>

	return etHALGPIOStatus;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000002 	.word	0x20000002

08001910 <MCAL_ISR_GPIO_EXTICallback>:
/**
 * @brief  Register a callback function for GPIO external interrupt handling in the MCAL layer
 * @param  g_pfnCallback Pointer to the callback function to be executed on interrupt
 */
void MCAL_ISR_GPIO_EXTICallback (void (*g_pfnCallback)(void))
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	g_pfnGPIOMcalEXTICallback = g_pfnCallback;
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <MCAL_ISR_GPIO_EXTICallback+0x1c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000388 	.word	0x20000388

08001930 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  Execute the registered callback function when a GPIO external interrupt occurs
 * @param  GPIO_Pin The GPIO pin number that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	if (g_pfnGPIOMcalEXTICallback != NULL)
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_GPIO_EXTI_Callback+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_GPIO_EXTI_Callback+0x18>
	{
		g_pfnGPIOMcalEXTICallback();
 8001942:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GPIO_EXTI_Callback+0x20>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4798      	blx	r3
	}
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000388 	.word	0x20000388

08001954 <MCAL_ISR_RTC_WakeUpCallback>:
/**
 * @brief  Register a callback function for RTC wake-up timer events in the MCAL layer
 * @param  g_pfnCallback Pointer to the callback function to be executed on wake-up timer event
 */
void MCAL_ISR_RTC_WakeUpCallback (void (*g_pfnCallback)(void))
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	g_pfnRTCMcalWakeUpTimerEventCallback = g_pfnCallback;
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <MCAL_ISR_RTC_WakeUpCallback+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000038c 	.word	0x2000038c

08001974 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief  Execute the registered callback function when an RTC wake-up timer event occurs
 * @param  hrtc Pointer to the RTC handle structure
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	if (g_pfnRTCMcalWakeUpTimerEventCallback != NULL)
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <HAL_RTCEx_WakeUpTimerEventCallback+0x16>
	{
		g_pfnRTCMcalWakeUpTimerEventCallback();
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4798      	blx	r3
	}
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000038c 	.word	0x2000038c

08001998 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800199e:	f000 fc7a 	bl	8002296 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019a2:	f000 f8a5 	bl	8001af0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019a6:	f000 f9df 	bl	8001d68 <MX_GPIO_Init>
	MX_I2C1_Init();
 80019aa:	f000 f8f1 	bl	8001b90 <MX_I2C1_Init>
	MX_I2C2_Init();
 80019ae:	f000 f92f 	bl	8001c10 <MX_I2C2_Init>
	MX_RTC_Init();
 80019b2:	f000 f96d 	bl	8001c90 <MX_RTC_Init>
	MX_USB_DEVICE_Init();
 80019b6:	f008 fde5 	bl	800a584 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	HAL_RTC_init(APP_RTC_WakeUpCallback);
 80019ba:	4840      	ldr	r0, [pc, #256]	@ (8001abc <main+0x124>)
 80019bc:	f7ff ff4b 	bl	8001856 <HAL_RTC_init>
	HAL_Switch_Init(APP_GPIO_EXTI_Callback);
 80019c0:	483f      	ldr	r0, [pc, #252]	@ (8001ac0 <main+0x128>)
 80019c2:	f7ff ff91 	bl	80018e8 <HAL_Switch_Init>

	HAL_RTC_SetWakeUpTime(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ff6e 	bl	80018a8 <HAL_RTC_SetWakeUpTime>
	HAL_BME280_SensorConfig(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80019cc:	2304      	movs	r3, #4
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2303      	movs	r3, #3
 80019d6:	2201      	movs	r2, #1
 80019d8:	2105      	movs	r1, #5
 80019da:	2002      	movs	r0, #2
 80019dc:	f7ff fa52 	bl	8000e84 <HAL_BME280_SensorConfig>


#ifdef EEPROM_TEST
	HAL_EEPROM_WriteByte(115, 0x55);
 80019e0:	2155      	movs	r1, #85	@ 0x55
 80019e2:	2073      	movs	r0, #115	@ 0x73
 80019e4:	f7ff fcd0 	bl	8001388 <HAL_EEPROM_WriteByte>
	HAL_Delay(5);
 80019e8:	2005      	movs	r0, #5
 80019ea:	f000 fcc9 	bl	8002380 <HAL_Delay>
	HAL_EEPROM_ReadByte(115, &g_ui8ReadData);
 80019ee:	4935      	ldr	r1, [pc, #212]	@ (8001ac4 <main+0x12c>)
 80019f0:	2073      	movs	r0, #115	@ 0x73
 80019f2:	f7ff fd29 	bl	8001448 <HAL_EEPROM_ReadByte>
	for (ui8I=0; ui8I < 128; ui8I++){
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <main+0x130>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e00b      	b.n	8001a16 <main+0x7e>
		g_aui8TxBuffer[ui8I]= 0xFF;
 80019fe:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <main+0x130>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <main+0x134>)
 8001a06:	21ff      	movs	r1, #255	@ 0xff
 8001a08:	5499      	strb	r1, [r3, r2]
	for (ui8I=0; ui8I < 128; ui8I++){
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <main+0x130>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <main+0x130>)
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <main+0x130>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	daee      	bge.n	80019fe <main+0x66>
	}
	HAL_EEPROM_WritePage(1, g_aui8TxBuffer, HAL_EEPROM_PAGE_SIZE);
 8001a20:	2280      	movs	r2, #128	@ 0x80
 8001a22:	492a      	ldr	r1, [pc, #168]	@ (8001acc <main+0x134>)
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fcd5 	bl	80013d4 <HAL_EEPROM_WritePage>
	HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f000 fca8 	bl	8002380 <HAL_Delay>
	HAL_EEPROM_ReadPage(1, g_aui8RxBuffer, HAL_EEPROM_PAGE_SIZE);
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	4927      	ldr	r1, [pc, #156]	@ (8001ad0 <main+0x138>)
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fd2b 	bl	8001490 <HAL_EEPROM_ReadPage>

	memset(g_aui8RxBuffer, 0, HAL_EEPROM_PAGE_SIZE);
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4824      	ldr	r0, [pc, #144]	@ (8001ad0 <main+0x138>)
 8001a40:	f00a f913 	bl	800bc6a <memset>

	HAL_EEPROM_Write(HAL_EEPROM_DATA_START_ADDR, g_aui8TxBuffer, HAL_EEPROM_PAGE_SIZE);
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	4921      	ldr	r1, [pc, #132]	@ (8001acc <main+0x134>)
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff fd5b 	bl	8001504 <HAL_EEPROM_Write>

	HAL_EEPROM_Read(HAL_EEPROM_DATA_START_ADDR, g_aui8RxBuffer, HAL_EEPROM_PAGE_SIZE);
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	491f      	ldr	r1, [pc, #124]	@ (8001ad0 <main+0x138>)
 8001a52:	2002      	movs	r0, #2
 8001a54:	f7ff fd7c 	bl	8001550 <HAL_EEPROM_Read>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
#ifdef USB_TEST
		HAL_PC_read(g_ui8usbReadBuffer);
 8001a58:	481e      	ldr	r0, [pc, #120]	@ (8001ad4 <main+0x13c>)
 8001a5a:	f7ff fecd 	bl	80017f8 <HAL_PC_read>
		if (strstr((char*)g_ui8usbReadBuffer, "start") != NULL)
 8001a5e:	491e      	ldr	r1, [pc, #120]	@ (8001ad8 <main+0x140>)
 8001a60:	481c      	ldr	r0, [pc, #112]	@ (8001ad4 <main+0x13c>)
 8001a62:	f00a f90a 	bl	800bc7a <strstr>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <main+0xe2>
		{
			memset(g_aui8UsbRxBuffer, 0, 64);
 8001a6c:	2240      	movs	r2, #64	@ 0x40
 8001a6e:	2100      	movs	r1, #0
 8001a70:	481a      	ldr	r0, [pc, #104]	@ (8001adc <main+0x144>)
 8001a72:	f00a f8fa 	bl	800bc6a <memset>
			HAL_EEPROM_Stream_Data();
 8001a76:	f7ff fe57 	bl	8001728 <HAL_EEPROM_Stream_Data>
//			memcpy(g_usbReadBuffer,tmpUsbReadBuffer,64);
		}
#endif
#ifdef APP_TEST_V1
		if(g_ui8StopModeFlag==0)
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <main+0x148>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <main+0xf4>
		{
			//enter stop mode/
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001a82:	2101      	movs	r1, #1
 8001a84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a88:	f003 fa9b 	bl	8004fc2 <HAL_PWR_EnterSTOPMode>
		}
		if(g_ui8_WriteToEepromFlag == 0)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <main+0x14c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e1      	bne.n	8001a58 <main+0xc0>
		{
			HAL_BME280_WakeUPSensor();
 8001a94:	f7ff fb2e 	bl	80010f4 <HAL_BME280_WakeUPSensor>
			HAL_BME280_Measure(&Temperature, &Humidity);
 8001a98:	4913      	ldr	r1, [pc, #76]	@ (8001ae8 <main+0x150>)
 8001a9a:	4814      	ldr	r0, [pc, #80]	@ (8001aec <main+0x154>)
 8001a9c:	f7ff fb5c 	bl	8001158 <HAL_BME280_Measure>
			HAL_EEPROM_Write_DateTime(Temperature, Humidity);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <main+0x154>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <main+0x150>)
 8001aa8:	ed93 7a00 	vldr	s14, [r3]
 8001aac:	eef0 0a47 	vmov.f32	s1, s14
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	f7ff fdbc 	bl	8001630 <HAL_EEPROM_Write_DateTime>
		HAL_PC_read(g_ui8usbReadBuffer);
 8001ab8:	e7ce      	b.n	8001a58 <main+0xc0>
 8001aba:	bf00      	nop
 8001abc:	08000c81 	.word	0x08000c81
 8001ac0:	08000c49 	.word	0x08000c49
 8001ac4:	20000464 	.word	0x20000464
 8001ac8:	20000568 	.word	0x20000568
 8001acc:	20000468 	.word	0x20000468
 8001ad0:	200004e8 	.word	0x200004e8
 8001ad4:	2000056c 	.word	0x2000056c
 8001ad8:	0800de7c 	.word	0x0800de7c
 8001adc:	20000330 	.word	0x20000330
 8001ae0:	200002f4 	.word	0x200002f4
 8001ae4:	200002f5 	.word	0x200002f5
 8001ae8:	200005b0 	.word	0x200005b0
 8001aec:	200005ac 	.word	0x200005ac

08001af0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b096      	sub	sp, #88	@ 0x58
 8001af4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	2244      	movs	r2, #68	@ 0x44
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00a f8b3 	bl	800bc6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	463b      	mov	r3, r7
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b16:	f003 fa79 	bl	800500c <HAL_PWREx_ControlVoltageScaling>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001b20:	f000 f970 	bl	8001e04 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b24:	2309      	movs	r3, #9
 8001b26:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b2c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b32:	2302      	movs	r3, #2
 8001b34:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b36:	2303      	movs	r3, #3
 8001b38:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fb18 	bl	8005184 <HAL_RCC_OscConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8001b5a:	f000 f953 	bl	8001e04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5e:	230f      	movs	r3, #15
 8001b60:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b62:	2303      	movs	r3, #3
 8001b64:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 ff66 	bl	8005a48 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001b82:	f000 f93f 	bl	8001e04 <Error_Handler>
	}
}
 8001b86:	bf00      	nop
 8001b88:	3758      	adds	r7, #88	@ 0x58
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <MX_I2C1_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c0c <MX_I2C1_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bca:	480e      	ldr	r0, [pc, #56]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bcc:	f000 fe98 	bl	8002900 <HAL_I2C_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001bd6:	f000 f915 	bl	8001e04 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4809      	ldr	r0, [pc, #36]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bde:	f001 fc1b 	bl	8003418 <HAL_I2CEx_ConfigAnalogFilter>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001be8:	f000 f90c 	bl	8001e04 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_I2C1_Init+0x74>)
 8001bf0:	f001 fc5d 	bl	80034ae <HAL_I2CEx_ConfigDigitalFilter>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001bfa:	f000 f903 	bl	8001e04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000390 	.word	0x20000390
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	20303e5d 	.word	0x20303e5d

08001c10 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	@ (8001c88 <MX_I2C2_Init+0x78>)
 8001c18:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x2010091A;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c8c <MX_I2C2_Init+0x7c>)
 8001c1e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c4a:	480e      	ldr	r0, [pc, #56]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c4c:	f000 fe58 	bl	8002900 <HAL_I2C_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001c56:	f000 f8d5 	bl	8001e04 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4809      	ldr	r0, [pc, #36]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c5e:	f001 fbdb 	bl	8003418 <HAL_I2CEx_ConfigAnalogFilter>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001c68:	f000 f8cc 	bl	8001e04 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MX_I2C2_Init+0x74>)
 8001c70:	f001 fc1d 	bl	80034ae <HAL_I2CEx_ConfigDigitalFilter>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001c7a:	f000 f8c3 	bl	8001e04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003e4 	.word	0x200003e4
 8001c88:	40005800 	.word	0x40005800
 8001c8c:	2010091a 	.word	0x2010091a

08001c90 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001caa:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <MX_RTC_Init+0xd4>)
 8001cac:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cb6:	227f      	movs	r2, #127	@ 0x7f
 8001cb8:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 8001cba:	4b29      	ldr	r3, [pc, #164]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cbc:	22ff      	movs	r2, #255	@ 0xff
 8001cbe:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd8:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce0:	481f      	ldr	r0, [pc, #124]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001ce2:	f004 fa23 	bl	800612c <HAL_RTC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 8001cec:	f000 f88a 	bl	8001e04 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x13;
 8001cf0:	2313      	movs	r3, #19
 8001cf2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x48;
 8001cf4:	2348      	movs	r3, #72	@ 0x48
 8001cf6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x10;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2201      	movs	r2, #1
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001d0c:	f004 fa9e 	bl	800624c <HAL_RTC_SetTime>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_RTC_Init+0x8a>
	{
		Error_Handler();
 8001d16:	f000 f875 	bl	8001e04 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_MARCH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x25;
 8001d22:	2325      	movs	r3, #37	@ 0x25
 8001d24:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x25;
 8001d26:	2325      	movs	r3, #37	@ 0x25
 8001d28:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001d32:	f004 fb84 	bl	800643e <HAL_RTC_SetDate>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_RTC_Init+0xb0>
	{
		Error_Handler();
 8001d3c:	f000 f862 	bl	8001e04 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8001d40:	2300      	movs	r3, #0
 8001d42:	2204      	movs	r2, #4
 8001d44:	2100      	movs	r1, #0
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_RTC_Init+0xd0>)
 8001d48:	f004 fd20 	bl	800678c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_RTC_Init+0xc6>
	{
		Error_Handler();
 8001d52:	f000 f857 	bl	8001e04 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000438 	.word	0x20000438
 8001d64:	40002800 	.word	0x40002800

08001d68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d82:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <MX_GPIO_Init+0x94>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dd0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <MX_GPIO_Init+0x98>)
 8001dde:	f000 fc05 	bl	80025ec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2017      	movs	r0, #23
 8001de8:	f000 fbc9 	bl	800257e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dec:	2017      	movs	r0, #23
 8001dee:	f000 fbe2 	bl	80025b6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400

08001e04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <Error_Handler+0x8>

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_MspInit+0x44>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b098      	sub	sp, #96	@ 0x60
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	2234      	movs	r2, #52	@ 0x34
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f009 fef6 	bl	800bc6a <memset>
  if(hi2c->Instance==I2C1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a3e      	ldr	r2, [pc, #248]	@ (8001f7c <HAL_I2C_MspInit+0x124>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d138      	bne.n	8001efa <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e88:	2340      	movs	r3, #64	@ 0x40
 8001e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 ffc3 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ea0:	f7ff ffb0 	bl	8001e04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea8:	4a35      	ldr	r2, [pc, #212]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb0:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ebc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001edc:	f000 fb86 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eec:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ef8:	e03b      	b.n	8001f72 <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_I2C_MspInit+0x12c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d136      	bne.n	8001f72 <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ff85 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 8001f1c:	f7ff ff72 	bl	8001e04 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <HAL_I2C_MspInit+0x130>)
 8001f56:	f000 fb49 	bl	80025ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_I2C_MspInit+0x128>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
}
 8001f72:	bf00      	nop
 8001f74:	3760      	adds	r7, #96	@ 0x60
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40005800 	.word	0x40005800
 8001f88:	48000400 	.word	0x48000400

08001f8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b090      	sub	sp, #64	@ 0x40
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2234      	movs	r2, #52	@ 0x34
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 fe64 	bl	800bc6a <memset>
  if(hrtc->Instance==RTC)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a13      	ldr	r2, [pc, #76]	@ (8001ff4 <HAL_RTC_MspInit+0x68>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d11f      	bne.n	8001fec <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 ff2f 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001fc8:	f7ff ff1c 	bl	8001e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_RTC_MspInit+0x6c>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_RTC_MspInit+0x6c>)
 8001fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 facc 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f000 fae5 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3740      	adds	r7, #64	@ 0x40
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40002800 	.word	0x40002800
 8001ff8:	40021000 	.word	0x40021000

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <NMI_Handler+0x4>

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <MemManage_Handler+0x4>

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <UsageFault_Handler+0x4>

08002024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002052:	f000 f975 	bl	8002340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <RTC_WKUP_IRQHandler+0x10>)
 8002062:	f004 fc2f 	bl	80068c4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000438 	.word	0x20000438

08002070 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002074:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002078:	f000 fc2a 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USB_IRQHandler+0x10>)
 8002086:	f001 fb7d 	bl	8003784 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000129c 	.word	0x2000129c

08002094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_kill>:

int _kill(int pid, int sig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ae:	f009 fe45 	bl	800bd3c <__errno>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2216      	movs	r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
  return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_exit>:

void _exit (int status)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffe7 	bl	80020a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020d6:	bf00      	nop
 80020d8:	e7fd      	b.n	80020d6 <_exit+0x12>

080020da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e00a      	b.n	8002102 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ec:	f3af 8000 	nop.w
 80020f0:	4601      	mov	r1, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	dbf0      	blt.n	80020ec <_read+0x12>
  }

  return len;
 800210a:	687b      	ldr	r3, [r7, #4]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e009      	b.n	800213a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf1      	blt.n	8002126 <_write+0x12>
  }
  return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_close>:

int _close(int file)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002174:	605a      	str	r2, [r3, #4]
  return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_isatty>:

int _isatty(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f009 fdaa 	bl	800bd3c <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000a000 	.word	0x2000a000
 8002214:	00000400 	.word	0x00000400
 8002218:	200005b4 	.word	0x200005b4
 800221c:	200018e8 	.word	0x200018e8

08002220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800227c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff ffea 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	@ (8002280 <LoopForever+0x6>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	@ (8002284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <LoopForever+0xe>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	@ (8002290 <LoopForever+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f009 fd69 	bl	800bd48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7ff fb8f 	bl	8001998 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800227c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002288:	0800e284 	.word	0x0800e284
  ldr r2, =_sbss
 800228c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002290:	200018e8 	.word	0x200018e8

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>

08002296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 f961 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a6:	200f      	movs	r0, #15
 80022a8:	f000 f80e 	bl	80022c8 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	e001      	b.n	80022bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b8:	f7ff fdaa 	bl	8001e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <HAL_InitTick+0x6c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_InitTick+0x70>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <HAL_InitTick+0x6c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f96d 	bl	80025d2 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10f      	bne.n	800231e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d809      	bhi.n	8002318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f000 f937 	bl	800257e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002310:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_InitTick+0x74>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e007      	b.n	8002328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e004      	b.n	8002328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e001      	b.n	8002328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000000c 	.word	0x2000000c
 8002338:	20000004 	.word	0x20000004
 800233c:	20000008 	.word	0x20000008

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000000c 	.word	0x2000000c
 8002364:	200005b8 	.word	0x200005b8

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200005b8 	.word	0x200005b8

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	@ (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	@ (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff29 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff3e 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff8e 	bl	80024bc <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5d 	bl	8002468 <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff31 	bl	800242c <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffa2 	bl	8002524 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	e14e      	b.n	800289a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8140 	beq.w	8002894 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x40>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d123      	bne.n	800271e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 809a 	beq.w	8002894 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <HAL_GPIO_Init+0x2cc>)
 8002762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002764:	4a54      	ldr	r2, [pc, #336]	@ (80028b8 <HAL_GPIO_Init+0x2cc>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6613      	str	r3, [r2, #96]	@ 0x60
 800276c:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <HAL_GPIO_Init+0x2cc>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002778:	4a50      	ldr	r2, [pc, #320]	@ (80028bc <HAL_GPIO_Init+0x2d0>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027a2:	d013      	beq.n	80027cc <HAL_GPIO_Init+0x1e0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a46      	ldr	r2, [pc, #280]	@ (80028c0 <HAL_GPIO_Init+0x2d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_GPIO_Init+0x1dc>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a45      	ldr	r2, [pc, #276]	@ (80028c4 <HAL_GPIO_Init+0x2d8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x1d8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a44      	ldr	r2, [pc, #272]	@ (80028c8 <HAL_GPIO_Init+0x2dc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_GPIO_Init+0x1d4>
 80027bc:	2303      	movs	r3, #3
 80027be:	e006      	b.n	80027ce <HAL_GPIO_Init+0x1e2>
 80027c0:	2307      	movs	r3, #7
 80027c2:	e004      	b.n	80027ce <HAL_GPIO_Init+0x1e2>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x1e2>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_GPIO_Init+0x1e2>
 80027cc:	2300      	movs	r3, #0
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027de:	4937      	ldr	r1, [pc, #220]	@ (80028bc <HAL_GPIO_Init+0x2d0>)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ec:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002810:	4a2e      	ldr	r2, [pc, #184]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002816:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800283a:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800288e:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <HAL_GPIO_Init+0x2e0>)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f47f aea9 	bne.w	80025fc <HAL_GPIO_Init+0x10>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	40010400 	.word	0x40010400

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e6:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f81e 	bl	8001930 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e08d      	b.n	8002a2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fa96 	bl	8001e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	e006      	b.n	8002988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d108      	bne.n	80029a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	e007      	b.n	80029b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69d9      	ldr	r1, [r3, #28]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	f040 80f9 	bne.w	8002c52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x34>
 8002a66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0ed      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Mem_Write+0x4e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0e6      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8e:	f7ff fc6b 	bl	8002368 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2319      	movs	r3, #25
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fac3 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0d1      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2221      	movs	r2, #33	@ 0x21
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	@ 0x40
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad8:	88f8      	ldrh	r0, [r7, #6]
 8002ada:	893a      	ldrh	r2, [r7, #8]
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f9d3 	bl	8002e94 <I2C_RequestMemoryWrite>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0a9      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2bff      	cmp	r3, #255	@ 0xff
 8002b08:	d90e      	bls.n	8002b28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	@ 0xff
 8002b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	8979      	ldrh	r1, [r7, #10]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fc47 	bl	80033b4 <I2C_TransferConfig>
 8002b26:	e00f      	b.n	8002b48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fc36 	bl	80033b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fac6 	bl	80030de <I2C_WaitOnTXISFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e07b      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d034      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x1c8>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d130      	bne.n	8002c00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	@ 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa3f 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e04d      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2bff      	cmp	r3, #255	@ 0xff
 8002bc0:	d90e      	bls.n	8002be0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	22ff      	movs	r2, #255	@ 0xff
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fbeb 	bl	80033b4 <I2C_TransferConfig>
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fbda 	bl	80033b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d19e      	bne.n	8002b48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 faac 	bl	800316c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e01a      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2220      	movs	r2, #32
 8002c24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_I2C_Mem_Write+0x224>)
 8002c32:	400b      	ands	r3, r1
 8002c34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	fe00e800 	.word	0xfe00e800

08002c60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80fd 	bne.w	8002e82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x34>
 8002c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0f1      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Mem_Read+0x4e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0ea      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cb6:	f7ff fb57 	bl	8002368 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f9af 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d5      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2222      	movs	r2, #34	@ 0x22
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	893a      	ldrh	r2, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f913 	bl	8002f3c <I2C_RequestMemoryRead>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0ad      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	@ 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	4b52      	ldr	r3, [pc, #328]	@ (8002e8c <HAL_I2C_Mem_Read+0x22c>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fb33 	bl	80033b4 <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_I2C_Mem_Read+0x22c>)
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb22 	bl	80033b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f956 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07c      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d034      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d130      	bne.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f927 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04d      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2bff      	cmp	r3, #255	@ 0xff
 8002df0:	d90e      	bls.n	8002e10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fad3 	bl	80033b4 <I2C_TransferConfig>
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	2300      	movs	r3, #0
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fac2 	bl	80033b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d19a      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f994 	bl	800316c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01a      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2220      	movs	r2, #32
 8002e54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_I2C_Mem_Read+0x230>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	80002400 	.word	0x80002400
 8002e90:	fe00e800 	.word	0xfe00e800

08002e94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <I2C_RequestMemoryWrite+0xa4>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fa79 	bl	80033b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f909 	bl	80030de <I2C_WaitOnTXISFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02c      	b.n	8002f30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ee6:	e015      	b.n	8002f14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	69b9      	ldr	r1, [r7, #24]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f8ef 	bl	80030de <I2C_WaitOnTXISFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e012      	b.n	8002f30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2180      	movs	r1, #128	@ 0x80
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f884 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	80002000 	.word	0x80002000

08002f3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	817b      	strh	r3, [r7, #10]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	813b      	strh	r3, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <I2C_RequestMemoryRead+0xa4>)
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fa26 	bl	80033b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	69b9      	ldr	r1, [r7, #24]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f8b6 	bl	80030de <I2C_WaitOnTXISFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e02c      	b.n	8002fd6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f8c:	e015      	b.n	8002fba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f89c 	bl	80030de <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e012      	b.n	8002fd6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb0:	893b      	ldrh	r3, [r7, #8]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2140      	movs	r1, #64	@ 0x40
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f831 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	80002000 	.word	0x80002000

08002fe4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d103      	bne.n	8003002 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d007      	beq.n	8003020 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	619a      	str	r2, [r3, #24]
  }
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303c:	e03b      	b.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8d6 	bl	80031f4 <I2C_IsErrorOccurred>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e041      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d02d      	beq.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7ff f985 	bl	8002368 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <I2C_WaitOnFlagUntilTimeout+0x44>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d122      	bne.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	429a      	cmp	r2, r3
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	429a      	cmp	r2, r3
 800308c:	d113      	bne.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00f      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d0b4      	beq.n	800303e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030ea:	e033      	b.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f87f 	bl	80031f4 <I2C_IsErrorOccurred>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e031      	b.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d025      	beq.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003108:	f7ff f92e 	bl	8002368 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11a      	bne.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d013      	beq.n	8003154 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d1c4      	bne.n	80030ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003178:	e02f      	b.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f838 	bl	80031f4 <I2C_IsErrorOccurred>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e02d      	b.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7ff f8eb 	bl	8002368 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11a      	bne.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d013      	beq.n	80031da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e007      	b.n	80031ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d1c8      	bne.n	800317a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d068      	beq.n	80032f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003228:	e049      	b.n	80032be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d045      	beq.n	80032be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7ff f899 	bl	8002368 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_IsErrorOccurred+0x54>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13a      	bne.n	80032be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003252:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800325a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d121      	bne.n	80032b0 <I2C_IsErrorOccurred+0xbc>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003272:	d01d      	beq.n	80032b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2b20      	cmp	r3, #32
 8003278:	d01a      	beq.n	80032b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003288:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800328a:	f7ff f86d 	bl	8002368 <HAL_GetTick>
 800328e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003290:	e00e      	b.n	80032b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003292:	f7ff f869 	bl	8002368 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b19      	cmp	r3, #25
 800329e:	d907      	bls.n	80032b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032ae:	e006      	b.n	80032be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d1e9      	bne.n	8003292 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d003      	beq.n	80032d4 <I2C_IsErrorOccurred+0xe0>
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0aa      	beq.n	800322a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2220      	movs	r2, #32
 80032e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003314:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01c      	beq.n	80033a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff fe3b 	bl	8002fe4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <I2C_IsErrorOccurred+0x1bc>)
 800337a:	400b      	ands	r3, r1
 800337c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3728      	adds	r7, #40	@ 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	fe00e800 	.word	0xfe00e800

080033b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	4613      	mov	r3, r2
 80033c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033cc:	7a7b      	ldrb	r3, [r7, #9]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	4313      	orrs	r3, r2
 80033de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	0d5b      	lsrs	r3, r3, #21
 80033ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <I2C_TransferConfig+0x60>)
 80033f4:	430b      	orrs	r3, r1
 80033f6:	43db      	mvns	r3, r3
 80033f8:	ea02 0103 	and.w	r1, r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	03ff63ff 	.word	0x03ff63ff

08003418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	d138      	bne.n	80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003438:	2302      	movs	r3, #2
 800343a:	e032      	b.n	80034a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800346a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d139      	bne.n	8003538 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e033      	b.n	800353a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2224      	movs	r2, #36	@ 0x24
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003500:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ef      	b.n	8003738 <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f007 fa31 	bl	800a9d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2203      	movs	r2, #3
 8003576:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f003 f9e2 	bl	800694e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3304      	adds	r3, #4
 8003592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003594:	f003 f9b6 	bl	8006904 <USB_CoreInit>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0c6      	b.n	8003738 <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 f9e7 	bl	8006984 <USB_SetCurrentMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b7      	b.n	8003738 <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e03e      	b.n	800364c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	3311      	adds	r3, #17
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	3310      	adds	r3, #16
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	3313      	adds	r3, #19
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3320      	adds	r3, #32
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3324      	adds	r3, #36	@ 0x24
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	3301      	adds	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	791b      	ldrb	r3, [r3, #4]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	429a      	cmp	r2, r3
 8003654:	d3bb      	bcc.n	80035ce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	e044      	b.n	80036e6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	440b      	add	r3, r1
 800366a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003672:	7bfa      	ldrb	r2, [r7, #15]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	3301      	adds	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	791b      	ldrb	r3, [r3, #4]
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d3b5      	bcc.n	800365c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036fa:	f003 f950 	bl	800699e <USB_DevInit>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e013      	b.n	8003738 <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7adb      	ldrb	r3, [r3, #11]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 fc21 	bl	8004f6e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fefc 	bl	800852e <USB_DevDisconnect>

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_PCD_Start+0x16>
 8003752:	2302      	movs	r3, #2
 8003754:	e012      	b.n	800377c <HAL_PCD_Start+0x3c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 f8dc 	bl	8006920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f004 fec7 	bl	8008500 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f004 fee1 	bl	8008558 <USB_ReadInterrupts>
 8003796:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fb14 	bl	8003dd0 <PCD_EP_ISR_Handler>

    return;
 80037a8:	e110      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037bc:	b29a      	uxth	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c6:	b292      	uxth	r2, r2
 80037c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f007 f9b8 	bl	800ab42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f8fc 	bl	80039d2 <HAL_PCD_SetAddress>

    return;
 80037da:	e0f7      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00c      	beq.n	8003800 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037f8:	b292      	uxth	r2, r2
 80037fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80037fe:	e0e5      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00c      	beq.n	8003824 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800381c:	b292      	uxth	r2, r2
 800381e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003822:	e0d3      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d034      	beq.n	8003898 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0204 	bic.w	r2, r2, #4
 8003840:	b292      	uxth	r2, r2
 8003842:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800384e:	b29a      	uxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0208 	bic.w	r2, r2, #8
 8003858:	b292      	uxth	r2, r2
 800385a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003870:	2100      	movs	r1, #0
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f007 fc14 	bl	800b0a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f007 f99b 	bl	800abb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003890:	b292      	uxth	r2, r2
 8003892:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003896:	e099      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d027      	beq.n	80038f2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0208 	orr.w	r2, r2, #8
 80038b4:	b292      	uxth	r2, r2
 80038b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038cc:	b292      	uxth	r2, r2
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0204 	orr.w	r2, r2, #4
 80038e4:	b292      	uxth	r2, r2
 80038e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f007 f948 	bl	800ab80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80038f0:	e06c      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d040      	beq.n	800397e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390e:	b292      	uxth	r2, r2
 8003910:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d12b      	bne.n	8003976 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0204 	orr.w	r2, r2, #4
 8003930:	b292      	uxth	r2, r2
 8003932:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0208 	orr.w	r2, r2, #8
 8003948:	b292      	uxth	r2, r2
 800394a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800395e:	b29b      	uxth	r3, r3
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800396c:	2101      	movs	r1, #1
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f007 fb96 	bl	800b0a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003974:	e02a      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f007 f902 	bl	800ab80 <HAL_PCD_SuspendCallback>
    return;
 800397c:	e026      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00f      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800399a:	b292      	uxth	r2, r2
 800399c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f007 f8c0 	bl	800ab26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80039a6:	e011      	b.n	80039cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c4:	b292      	uxth	r2, r2
 80039c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80039ca:	bf00      	nop
  }
}
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_PCD_SetAddress+0x1a>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e012      	b.n	8003a12 <HAL_PCD_SetAddress+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fd68 	bl	80084d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	4608      	mov	r0, r1
 8003a24:	4611      	mov	r1, r2
 8003a26:	461a      	mov	r2, r3
 8003a28:	4603      	mov	r3, r0
 8003a2a:	70fb      	strb	r3, [r7, #3]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	803b      	strh	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0e      	bge.n	8003a5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	3310      	adds	r3, #16
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	705a      	strb	r2, [r3, #1]
 8003a5c:	e00e      	b.n	8003a7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a88:	883b      	ldrh	r3, [r7, #0]
 8003a8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	78ba      	ldrb	r2, [r7, #2]
 8003a96:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a98:	78bb      	ldrb	r3, [r7, #2]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_PCD_EP_Open+0x98>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e00e      	b.n	8003ad0 <HAL_PCD_EP_Open+0xb6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 ff8b 	bl	80069dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003ace:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da0e      	bge.n	8003b0a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 0207 	and.w	r2, r3, #7
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	3310      	adds	r3, #16
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	705a      	strb	r2, [r3, #1]
 8003b08:	e00e      	b.n	8003b28 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_PCD_EP_Close+0x6a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e00e      	b.n	8003b60 <HAL_PCD_EP_Close+0x88>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fc2b 	bl	80073ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	460b      	mov	r3, r1
 8003b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	7afb      	ldrb	r3, [r7, #11]
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 fde3 	bl	8007786 <USB_EPStartXfer>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 0207 	and.w	r2, r3, #7
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003bec:	681b      	ldr	r3, [r3, #0]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	460b      	mov	r3, r1
 8003c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	f003 0207 	and.w	r2, r3, #7
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	3310      	adds	r3, #16
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2201      	movs	r2, #1
 8003c44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6979      	ldr	r1, [r7, #20]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 fd94 	bl	8007786 <USB_EPStartXfer>

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	7912      	ldrb	r2, [r2, #4]
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e04c      	b.n	8003d20 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da0e      	bge.n	8003cac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	705a      	strb	r2, [r3, #1]
 8003caa:	e00c      	b.n	8003cc6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_PCD_EP_SetStall+0x7e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e01c      	b.n	8003d20 <HAL_PCD_EP_SetStall+0xb8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f004 faf5 	bl	80082e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f004 fc31 	bl	8008578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	7912      	ldrb	r2, [r2, #4]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e040      	b.n	8003dc8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da0e      	bge.n	8003d6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 0207 	and.w	r2, r3, #7
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
 8003d6a:	e00e      	b.n	8003d8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	f003 0207 	and.w	r2, r3, #7
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_EP_ClrStall+0x82>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e00e      	b.n	8003dc8 <HAL_PCD_EP_ClrStall+0xa0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f004 fae4 	bl	8008386 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b092      	sub	sp, #72	@ 0x48
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dd8:	e333      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003de2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003de4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8003df0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 8108 	bne.w	800400a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003dfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d14c      	bne.n	8003e9e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	893b      	ldrh	r3, [r7, #8]
 8003e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3310      	adds	r3, #16
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	441a      	add	r2, r3
 8003e60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e64:	2100      	movs	r1, #0
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f006 fe43 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b5b      	ldrb	r3, [r3, #13]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 82e5 	beq.w	8004442 <PCD_EP_ISR_Handler+0x672>
 8003e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 82e0 	bne.w	8004442 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7b5b      	ldrb	r3, [r3, #13]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	735a      	strb	r2, [r3, #13]
 8003e9c:	e2d1      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ea4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d032      	beq.n	8003f1e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ede:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f004 fb8f 	bl	8008616 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f04:	4013      	ands	r3, r2
 8003f06:	817b      	strh	r3, [r7, #10]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	897a      	ldrh	r2, [r7, #10]
 8003f0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f12:	b292      	uxth	r2, r2
 8003f14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f006 fdbe 	bl	800aa98 <HAL_PCD_SetupStageCallback>
 8003f1c:	e291      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f1e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f280 828d 	bge.w	8004442 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f34:	4013      	ands	r3, r2
 8003f36:	81fb      	strh	r3, [r7, #14]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	89fa      	ldrh	r2, [r7, #14]
 8003f3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f42:	b292      	uxth	r2, r2
 8003f44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d019      	beq.n	8003faa <PCD_EP_ISR_Handler+0x1da>
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d015      	beq.n	8003faa <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f84:	6959      	ldr	r1, [r3, #20]
 8003f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f88:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f004 fb41 	bl	8008616 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f006 fd89 	bl	800aabc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003fb2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 8242 	bne.w	8004442 <PCD_EP_ISR_Handler+0x672>
 8003fbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003fc0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fc8:	f000 823b 	beq.w	8004442 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	81bb      	strh	r3, [r7, #12]
 8003fde:	89bb      	ldrh	r3, [r7, #12]
 8003fe0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003fe4:	81bb      	strh	r3, [r7, #12]
 8003fe6:	89bb      	ldrh	r3, [r7, #12]
 8003fe8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fec:	81bb      	strh	r3, [r7, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]
 8004008:	e21b      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800401c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004020:	2b00      	cmp	r3, #0
 8004022:	f280 80f1 	bge.w	8004208 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29a      	uxth	r2, r3
 8004038:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800403c:	4013      	ands	r3, r2
 800403e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004050:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004054:	b292      	uxth	r2, r2
 8004056:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004058:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800406e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004070:	7b1b      	ldrb	r3, [r3, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d123      	bne.n	80040be <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407e:	b29b      	uxth	r3, r3
 8004080:	461a      	mov	r2, r3
 8004082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	4413      	add	r3, r2
 8004090:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800409e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 808b 	beq.w	80041be <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ae:	6959      	ldr	r1, [r3, #20]
 80040b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b2:	88da      	ldrh	r2, [r3, #6]
 80040b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80040b8:	f004 faad 	bl	8008616 <USB_ReadPMA>
 80040bc:	e07f      	b.n	80041be <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80040be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040c0:	78db      	ldrb	r3, [r3, #3]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d109      	bne.n	80040da <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80040c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040c8:	461a      	mov	r2, r3
 80040ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9c6 	bl	800445e <HAL_PCD_EP_DB_Receive>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80040d8:	e071      	b.n	80041be <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800410a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800410e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004112:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d022      	beq.n	800417a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800413c:	b29b      	uxth	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	4413      	add	r3, r2
 800414e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004158:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800415c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02c      	beq.n	80041be <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416a:	6959      	ldr	r1, [r3, #20]
 800416c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416e:	891a      	ldrh	r2, [r3, #8]
 8004170:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004174:	f004 fa4f 	bl	8008616 <USB_ReadPMA>
 8004178:	e021      	b.n	80041be <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004182:	b29b      	uxth	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	4413      	add	r3, r2
 8004194:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800419e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80041a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b0:	6959      	ldr	r1, [r3, #20]
 80041b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b4:	895a      	ldrh	r2, [r3, #10]
 80041b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041ba:	f004 fa2c 	bl	8008616 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80041be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041c6:	441a      	add	r2, r3
 80041c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80041cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80041d4:	441a      	add	r2, r3
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80041da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <PCD_EP_ISR_Handler+0x41e>
 80041e2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80041e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d206      	bcs.n	80041fc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f006 fc61 	bl	800aabc <HAL_PCD_DataOutStageCallback>
 80041fa:	e005      	b.n	8004208 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fabf 	bl	8007786 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004208:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8117 	beq.w	8004442 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004214:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3310      	adds	r3, #16
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800423e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004242:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 80a1 	bne.w	80043ac <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800426a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004270:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004272:	7b1b      	ldrb	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8092 	beq.w	800439e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800427a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d046      	beq.n	8004312 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d126      	bne.n	80042da <PCD_EP_ISR_Handler+0x50a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4413      	add	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	00da      	lsls	r2, r3, #3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4413      	add	r3, r2
 80042ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042be:	b29a      	uxth	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	e061      	b.n	800439e <PCD_EP_ISR_Handler+0x5ce>
 80042da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d15d      	bne.n	800439e <PCD_EP_ISR_Handler+0x5ce>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2200      	movs	r2, #0
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	e045      	b.n	800439e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d126      	bne.n	800436e <PCD_EP_ISR_Handler+0x59e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	4413      	add	r3, r2
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	00da      	lsls	r2, r3, #3
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	4413      	add	r3, r2
 8004342:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004352:	b29a      	uxth	r2, r3
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29a      	uxth	r2, r3
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e017      	b.n	800439e <PCD_EP_ISR_Handler+0x5ce>
 800436e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d113      	bne.n	800439e <PCD_EP_ISR_Handler+0x5ce>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	4413      	add	r3, r2
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	00da      	lsls	r2, r3, #3
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	4413      	add	r3, r2
 8004392:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800439e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f006 fba4 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
 80043aa:	e04a      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80043ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d13f      	bne.n	8004436 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043da:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80043dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d906      	bls.n	80043f4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80043e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80043ec:	1ad2      	subs	r2, r2, r3
 80043ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f0:	619a      	str	r2, [r3, #24]
 80043f2:	e002      	b.n	80043fa <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80043f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f006 fb72 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
 800440e:	e018      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004416:	441a      	add	r2, r3
 8004418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800441c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004422:	441a      	add	r2, r3
 8004424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004426:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800442e:	4618      	mov	r0, r3
 8004430:	f003 f9a9 	bl	8007786 <USB_EPStartXfer>
 8004434:	e005      	b.n	8004442 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004436:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004438:	461a      	mov	r2, r3
 800443a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f917 	bl	8004670 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800444a:	b29b      	uxth	r3, r3
 800444c:	b21b      	sxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	f6ff acc3 	blt.w	8003dda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3748      	adds	r7, #72	@ 0x48
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d07c      	beq.n	8004570 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800447e:	b29b      	uxth	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	4413      	add	r3, r2
 8004490:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	8b7b      	ldrh	r3, [r7, #26]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d306      	bcc.n	80044b4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	8b7b      	ldrh	r3, [r7, #26]
 80044ac:	1ad2      	subs	r2, r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	619a      	str	r2, [r3, #24]
 80044b2:	e002      	b.n	80044ba <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d123      	bne.n	800450a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044dc:	833b      	strh	r3, [r7, #24]
 80044de:	8b3b      	ldrh	r3, [r7, #24]
 80044e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044e4:	833b      	strh	r3, [r7, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	441a      	add	r2, r3
 80044f4:	8b3b      	ldrh	r3, [r7, #24]
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01f      	beq.n	8004554 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	b29b      	uxth	r3, r3
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	82fb      	strh	r3, [r7, #22]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	8afb      	ldrh	r3, [r7, #22]
 8004540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800454c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004550:	b29b      	uxth	r3, r3
 8004552:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8085 	beq.w	8004666 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6959      	ldr	r1, [r3, #20]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	891a      	ldrh	r2, [r3, #8]
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f004 f854 	bl	8008616 <USB_ReadPMA>
 800456e:	e07a      	b.n	8004666 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	4413      	add	r3, r2
 800458a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004594:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	8b7b      	ldrh	r3, [r7, #26]
 800459c:	429a      	cmp	r2, r3
 800459e:	d306      	bcc.n	80045ae <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	8b7b      	ldrh	r3, [r7, #26]
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	619a      	str	r2, [r3, #24]
 80045ac:	e002      	b.n	80045b4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d123      	bne.n	8004604 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	83fb      	strh	r3, [r7, #30]
 80045d8:	8bfb      	ldrh	r3, [r7, #30]
 80045da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045de:	83fb      	strh	r3, [r7, #30]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	8bfb      	ldrh	r3, [r7, #30]
 80045f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004600:	b29b      	uxth	r3, r3
 8004602:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11f      	bne.n	800464e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	83bb      	strh	r3, [r7, #28]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	8bbb      	ldrh	r3, [r7, #28]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004646:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800464e:	8b7b      	ldrh	r3, [r7, #26]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6959      	ldr	r1, [r3, #20]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	895a      	ldrh	r2, [r3, #10]
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	f003 ffd8 	bl	8008616 <USB_ReadPMA>
    }
  }

  return count;
 8004666:	8b7b      	ldrh	r3, [r7, #26]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0a6      	sub	sp, #152	@ 0x98
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 81f7 	beq.w	8004a78 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d907      	bls.n	80046ce <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	619a      	str	r2, [r3, #24]
 80046cc:	e002      	b.n	80046d4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2200      	movs	r2, #0
 80046d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 80e1 	bne.w	80048a0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d126      	bne.n	8004734 <HAL_PCD_EP_DB_Transmit+0xc4>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	4413      	add	r3, r2
 80046fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	00da      	lsls	r2, r3, #3
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	4413      	add	r3, r2
 8004708:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004718:	b29a      	uxth	r2, r3
 800471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472c:	b29a      	uxth	r2, r3
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	e01a      	b.n	800476a <HAL_PCD_EP_DB_Transmit+0xfa>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d116      	bne.n	800476a <HAL_PCD_EP_DB_Transmit+0xfa>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474a:	b29b      	uxth	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	4413      	add	r3, r2
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	00da      	lsls	r2, r3, #3
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	4413      	add	r3, r2
 800475e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
 8004764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004766:	2200      	movs	r2, #0
 8004768:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d126      	bne.n	80047c6 <HAL_PCD_EP_DB_Transmit+0x156>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004786:	b29b      	uxth	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	4413      	add	r3, r2
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	00da      	lsls	r2, r3, #3
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	4413      	add	r3, r2
 800479a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047be:	b29a      	uxth	r2, r3
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	801a      	strh	r2, [r3, #0]
 80047c4:	e017      	b.n	80047f6 <HAL_PCD_EP_DB_Transmit+0x186>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	785b      	ldrb	r3, [r3, #1]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d113      	bne.n	80047f6 <HAL_PCD_EP_DB_Transmit+0x186>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	4413      	add	r3, r2
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00da      	lsls	r2, r3, #3
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	78db      	ldrb	r3, [r3, #3]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d123      	bne.n	8004846 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004818:	837b      	strh	r3, [r7, #26]
 800481a:	8b7b      	ldrh	r3, [r7, #26]
 800481c:	f083 0320 	eor.w	r3, r3, #32
 8004820:	837b      	strh	r3, [r7, #26]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	441a      	add	r2, r3
 8004830:	8b7b      	ldrh	r3, [r7, #26]
 8004832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800483a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004842:	b29b      	uxth	r3, r3
 8004844:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f006 f950 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01f      	beq.n	800489c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	833b      	strh	r3, [r7, #24]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	8b3b      	ldrh	r3, [r7, #24]
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e31f      	b.n	8004ee0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d021      	beq.n	80048ee <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 82ca 	bne.w	8004e8e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004902:	441a      	add	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004910:	441a      	add	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d309      	bcc.n	8004936 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800492e:	1ad2      	subs	r2, r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	621a      	str	r2, [r3, #32]
 8004934:	e015      	b.n	8004962 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d107      	bne.n	800494e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800493e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004942:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800494c:	e009      	b.n	8004962 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d15f      	bne.n	8004a2a <HAL_PCD_EP_DB_Transmit+0x3ba>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004978:	b29b      	uxth	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800497e:	4413      	add	r3, r2
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	00da      	lsls	r2, r3, #3
 8004988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800498a:	4413      	add	r3, r2
 800498c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800499c:	b29a      	uxth	r2, r3
 800499e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <HAL_PCD_EP_DB_Transmit+0x34e>
 80049a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	e051      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80049c2:	d816      	bhi.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x382>
 80049c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_PCD_EP_DB_Transmit+0x36a>
 80049d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d6:	3301      	adds	r3, #1
 80049d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e037      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80049f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_PCD_EP_DB_Transmit+0x398>
 8004a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a04:	3b01      	subs	r3, #1
 8004a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e01b      	b.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d117      	bne.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a46:	4413      	add	r3, r2
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	00da      	lsls	r2, r3, #3
 8004a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a52:	4413      	add	r3, r2
 8004a54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	891a      	ldrh	r2, [r3, #8]
 8004a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f003 fd8d 	bl	8008590 <USB_WritePMA>
 8004a76:	e20a      	b.n	8004e8e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4413      	add	r3, r2
 8004a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d307      	bcc.n	8004abc <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004ab4:	1ad2      	subs	r2, r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	619a      	str	r2, [r3, #24]
 8004aba:	e002      	b.n	8004ac2 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 80f6 	bne.w	8004cb8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d126      	bne.n	8004b22 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae8:	4413      	add	r3, r2
 8004aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	00da      	lsls	r2, r3, #3
 8004af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af4:	4413      	add	r3, r2
 8004af6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	e01a      	b.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d116      	bne.n	8004b58 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b3e:	4413      	add	r3, r2
 8004b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00da      	lsls	r2, r3, #3
 8004b48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b54:	2200      	movs	r2, #0
 8004b56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12f      	bne.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x558>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b80:	4413      	add	r3, r2
 8004b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	00da      	lsls	r2, r3, #3
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e01c      	b.n	8004c02 <HAL_PCD_EP_DB_Transmit+0x592>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d118      	bne.n	8004c02 <HAL_PCD_EP_DB_Transmit+0x592>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004be0:	4413      	add	r3, r2
 8004be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	00da      	lsls	r2, r3, #3
 8004bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bfe:	2200      	movs	r2, #0
 8004c00:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d127      	bne.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c24:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c28:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c2c:	f083 0320 	eor.w	r3, r3, #32
 8004c30:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f005 ff46 	bl	800aaf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d121      	bne.n	8004cb4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8004ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e113      	b.n	8004ee0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d121      	bne.n	8004d06 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f040 80be 	bne.w	8004e8e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d1a:	441a      	add	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d28:	441a      	add	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d309      	bcc.n	8004d4e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6a1a      	ldr	r2, [r3, #32]
 8004d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	621a      	str	r2, [r3, #32]
 8004d4c:	e015      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d107      	bne.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8004d56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d64:	e009      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d15f      	bne.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d9c:	4413      	add	r3, r2
 8004d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	00da      	lsls	r2, r3, #3
 8004da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da8:	4413      	add	r3, r2
 8004daa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x76c>
 8004dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e04e      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dde:	2b3e      	cmp	r3, #62	@ 0x3e
 8004de0:	d816      	bhi.n	8004e10 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8004de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_PCD_EP_DB_Transmit+0x788>
 8004df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df4:	3301      	adds	r3, #1
 8004df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	029b      	lsls	r3, r3, #10
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	e034      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8004e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e22:	3b01      	subs	r3, #1
 8004e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	029b      	lsls	r3, r3, #10
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e018      	b.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d114      	bne.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x80a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e5e:	4413      	add	r3, r2
 8004e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	00da      	lsls	r2, r3, #3
 8004e68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e78:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6959      	ldr	r1, [r3, #20]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	895a      	ldrh	r2, [r3, #10]
 8004e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f003 fb81 	bl	8008590 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea8:	82fb      	strh	r3, [r7, #22]
 8004eaa:	8afb      	ldrh	r3, [r7, #22]
 8004eac:	f083 0310 	eor.w	r3, r3, #16
 8004eb0:	82fb      	strh	r3, [r7, #22]
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	f083 0320 	eor.w	r3, r3, #32
 8004eb8:	82fb      	strh	r3, [r7, #22]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8afb      	ldrh	r3, [r7, #22]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3798      	adds	r7, #152	@ 0x98
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	f003 0207 	and.w	r2, r3, #7
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	3310      	adds	r3, #16
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e009      	b.n	8004f32 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f1e:	897a      	ldrh	r2, [r7, #10]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	80da      	strh	r2, [r3, #6]
 8004f46:	e00b      	b.n	8004f60 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fd4:	d104      	bne.n	8004fe0 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f8a7 	bl	800512c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8004fde:	e003      	b.n	8004fe8 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f878 	bl	80050d8 <HAL_PWREx_EnterSTOP0Mode>
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ff4:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40007000 	.word	0x40007000

0800500c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800501a:	d130      	bne.n	800507e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800501c:	4b23      	ldr	r3, [pc, #140]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005028:	d038      	beq.n	800509c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800502a:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005032:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005034:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800503a:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2232      	movs	r2, #50	@ 0x32
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0c9b      	lsrs	r3, r3, #18
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005050:	e002      	b.n	8005058 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b01      	subs	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005064:	d102      	bne.n	800506c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f2      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800506c:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005078:	d110      	bne.n	800509c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e00f      	b.n	800509e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d007      	beq.n	800509c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800508c:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005094:	4a05      	ldr	r2, [pc, #20]	@ (80050ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800509a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40007000 	.word	0x40007000
 80050b0:	20000004 	.word	0x20000004
 80050b4:	431bde83 	.word	0x431bde83

080050b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80050bc:	4b05      	ldr	r3, [pc, #20]	@ (80050d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a04      	ldr	r2, [pc, #16]	@ (80050d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050c6:	6053      	str	r3, [r2, #4]
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40007000 	.word	0x40007000

080050d8 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80050e8:	f023 0307 	bic.w	r3, r3, #7
 80050ec:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005128 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005100:	bf30      	wfi
 8005102:	e002      	b.n	800510a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005104:	bf40      	sev
    __WFE();
 8005106:	bf20      	wfe
    __WFE();
 8005108:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4a06      	ldr	r2, [pc, #24]	@ (8005128 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	6113      	str	r3, [r2, #16]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40007000 	.word	0x40007000
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8005136:	4b11      	ldr	r3, [pc, #68]	@ (800517c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	4a0f      	ldr	r2, [pc, #60]	@ (800517c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005146:	4b0e      	ldr	r3, [pc, #56]	@ (8005180 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005158:	bf30      	wfi
 800515a:	e002      	b.n	8005162 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800515c:	bf40      	sev
    __WFE();
 800515e:	bf20      	wfe
    __WFE();
 8005160:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005162:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	4a06      	ldr	r2, [pc, #24]	@ (8005180 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	6113      	str	r3, [r2, #16]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40007000 	.word	0x40007000
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	@ 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f000 bc4f 	b.w	8005a36 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005198:	4b97      	ldr	r3, [pc, #604]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a2:	4b95      	ldr	r3, [pc, #596]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80e6 	beq.w	8005386 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d007      	beq.n	80051d0 <HAL_RCC_OscConfig+0x4c>
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	f040 808d 	bne.w	80052e2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f040 8089 	bne.w	80052e2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051d0:	4b89      	ldr	r3, [pc, #548]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <HAL_RCC_OscConfig+0x66>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f000 bc26 	b.w	8005a36 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ee:	4b82      	ldr	r3, [pc, #520]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_RCC_OscConfig+0x80>
 80051fa:	4b7f      	ldr	r3, [pc, #508]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005202:	e005      	b.n	8005210 <HAL_RCC_OscConfig+0x8c>
 8005204:	4b7c      	ldr	r3, [pc, #496]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005210:	4293      	cmp	r3, r2
 8005212:	d224      	bcs.n	800525e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fda1 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f000 bc06 	b.w	8005a36 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800522a:	4b73      	ldr	r3, [pc, #460]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a72      	ldr	r2, [pc, #456]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005230:	f043 0308 	orr.w	r3, r3, #8
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b70      	ldr	r3, [pc, #448]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	496d      	ldr	r1, [pc, #436]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005244:	4313      	orrs	r3, r2
 8005246:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005248:	4b6b      	ldr	r3, [pc, #428]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	4968      	ldr	r1, [pc, #416]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
 800525c:	e025      	b.n	80052aa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800525e:	4b66      	ldr	r3, [pc, #408]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a65      	ldr	r2, [pc, #404]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	4b63      	ldr	r3, [pc, #396]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	4960      	ldr	r1, [pc, #384]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800527c:	4b5e      	ldr	r3, [pc, #376]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	495b      	ldr	r1, [pc, #364]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fd60 	bl	8005d60 <RCC_SetFlashLatencyFromMSIRange>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e3c5      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052aa:	f000 fccd 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
 80052ae:	4602      	mov	r2, r0
 80052b0:	4b51      	ldr	r3, [pc, #324]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	4950      	ldr	r1, [pc, #320]	@ (80053fc <HAL_RCC_OscConfig+0x278>)
 80052bc:	5ccb      	ldrb	r3, [r1, r3]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80052ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fc fffa 	bl	80022c8 <HAL_InitTick>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d052      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	e3a9      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d032      	beq.n	8005350 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ea:	4b43      	ldr	r3, [pc, #268]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a42      	ldr	r2, [pc, #264]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052f6:	f7fd f837 	bl	8002368 <HAL_GetTick>
 80052fa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052fc:	e008      	b.n	8005310 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052fe:	f7fd f833 	bl	8002368 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e392      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005310:	4b39      	ldr	r3, [pc, #228]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a35      	ldr	r2, [pc, #212]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	4b33      	ldr	r3, [pc, #204]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	4930      	ldr	r1, [pc, #192]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533a:	4b2f      	ldr	r3, [pc, #188]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	492b      	ldr	r1, [pc, #172]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
 800534e:	e01a      	b.n	8005386 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005350:	4b29      	ldr	r3, [pc, #164]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a28      	ldr	r2, [pc, #160]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800535c:	f7fd f804 	bl	8002368 <HAL_GetTick>
 8005360:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005364:	f7fd f800 	bl	8002368 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e35f      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005376:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d073      	beq.n	800547a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	2b08      	cmp	r3, #8
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x220>
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d10e      	bne.n	80053bc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d10b      	bne.n	80053bc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d063      	beq.n	8005478 <HAL_RCC_OscConfig+0x2f4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d15f      	bne.n	8005478 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e33c      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d106      	bne.n	80053d4 <HAL_RCC_OscConfig+0x250>
 80053c6:	4b0c      	ldr	r3, [pc, #48]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a0b      	ldr	r2, [pc, #44]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e025      	b.n	8005420 <HAL_RCC_OscConfig+0x29c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053dc:	d114      	bne.n	8005408 <HAL_RCC_OscConfig+0x284>
 80053de:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a05      	ldr	r2, [pc, #20]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a02      	ldr	r2, [pc, #8]	@ (80053f8 <HAL_RCC_OscConfig+0x274>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e013      	b.n	8005420 <HAL_RCC_OscConfig+0x29c>
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800debc 	.word	0x0800debc
 8005400:	20000004 	.word	0x20000004
 8005404:	20000008 	.word	0x20000008
 8005408:	4b8f      	ldr	r3, [pc, #572]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a8e      	ldr	r2, [pc, #568]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b8c      	ldr	r3, [pc, #560]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a8b      	ldr	r2, [pc, #556]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fc ff9e 	bl	8002368 <HAL_GetTick>
 800542c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005430:	f7fc ff9a 	bl	8002368 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	@ 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e2f9      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005442:	4b81      	ldr	r3, [pc, #516]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x2ac>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fc ff8a 	bl	8002368 <HAL_GetTick>
 8005454:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005458:	f7fc ff86 	bl	8002368 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	@ 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e2e5      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546a:	4b77      	ldr	r3, [pc, #476]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0x2d4>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d060      	beq.n	8005548 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b04      	cmp	r3, #4
 800548a:	d005      	beq.n	8005498 <HAL_RCC_OscConfig+0x314>
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d119      	bne.n	80054c6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d116      	bne.n	80054c6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005498:	4b6b      	ldr	r3, [pc, #428]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x32c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e2c2      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b0:	4b65      	ldr	r3, [pc, #404]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	061b      	lsls	r3, r3, #24
 80054be:	4962      	ldr	r1, [pc, #392]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c4:	e040      	b.n	8005548 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d023      	beq.n	8005516 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80054d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fc ff45 	bl	8002368 <HAL_GetTick>
 80054de:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e2:	f7fc ff41 	bl	8002368 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e2a0      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f4:	4b54      	ldr	r3, [pc, #336]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b51      	ldr	r3, [pc, #324]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	494e      	ldr	r1, [pc, #312]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
 8005514:	e018      	b.n	8005548 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005516:	4b4c      	ldr	r3, [pc, #304]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a4b      	ldr	r2, [pc, #300]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800551c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005522:	f7fc ff21 	bl	8002368 <HAL_GetTick>
 8005526:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552a:	f7fc ff1d 	bl	8002368 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e27c      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800553c:	4b42      	ldr	r3, [pc, #264]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8082 	beq.w	800565a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d05f      	beq.n	800561e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800555e:	4b3a      	ldr	r3, [pc, #232]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005564:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	429a      	cmp	r2, r3
 8005572:	d037      	beq.n	80055e4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e254      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01b      	beq.n	80055ce <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8005596:	4b2c      	ldr	r3, [pc, #176]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559c:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055a6:	f7fc fedf 	bl	8002368 <HAL_GetTick>
 80055aa:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fc fedb 	bl	8002368 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b11      	cmp	r3, #17
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e23a      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055c0:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80055c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ef      	bne.n	80055ae <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80055ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d4:	f023 0210 	bic.w	r2, r3, #16
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	491a      	ldr	r1, [pc, #104]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e4:	4b18      	ldr	r3, [pc, #96]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ea:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	f043 0301 	orr.w	r3, r3, #1
 80055f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fc feb8 	bl	8002368 <HAL_GetTick>
 80055f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fc feb4 	bl	8002368 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b11      	cmp	r3, #17
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e213      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560e:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <HAL_RCC_OscConfig+0x478>
 800561c:	e01d      	b.n	800565a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561e:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005624:	4a08      	ldr	r2, [pc, #32]	@ (8005648 <HAL_RCC_OscConfig+0x4c4>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fc fe9b 	bl	8002368 <HAL_GetTick>
 8005632:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005636:	f7fc fe97 	bl	8002368 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b11      	cmp	r3, #17
 8005642:	d903      	bls.n	800564c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e1f6      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
 8005648:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564c:	4ba9      	ldr	r3, [pc, #676]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ed      	bne.n	8005636 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80bd 	beq.w	80057e2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800566e:	4ba1      	ldr	r3, [pc, #644]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567a:	4b9e      	ldr	r3, [pc, #632]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	4a9d      	ldr	r2, [pc, #628]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005684:	6593      	str	r3, [r2, #88]	@ 0x58
 8005686:	4b9b      	ldr	r3, [pc, #620]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005698:	4b97      	ldr	r3, [pc, #604]	@ (80058f8 <HAL_RCC_OscConfig+0x774>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d118      	bne.n	80056d6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a4:	4b94      	ldr	r3, [pc, #592]	@ (80058f8 <HAL_RCC_OscConfig+0x774>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a93      	ldr	r2, [pc, #588]	@ (80058f8 <HAL_RCC_OscConfig+0x774>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b0:	f7fc fe5a 	bl	8002368 <HAL_GetTick>
 80056b4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fc fe56 	bl	8002368 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1b5      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ca:	4b8b      	ldr	r3, [pc, #556]	@ (80058f8 <HAL_RCC_OscConfig+0x774>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02c      	beq.n	800573c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80056e2:	4b84      	ldr	r3, [pc, #528]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f4:	497f      	ldr	r1, [pc, #508]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005708:	4b7a      	ldr	r3, [pc, #488]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	4a79      	ldr	r2, [pc, #484]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005710:	f043 0304 	orr.w	r3, r3, #4
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005718:	4b76      	ldr	r3, [pc, #472]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	4a75      	ldr	r2, [pc, #468]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005728:	e018      	b.n	800575c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800572a:	4b72      	ldr	r3, [pc, #456]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	4a70      	ldr	r2, [pc, #448]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800573a:	e00f      	b.n	800575c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800573c:	4b6d      	ldr	r3, [pc, #436]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005742:	4a6c      	ldr	r2, [pc, #432]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	4a68      	ldr	r2, [pc, #416]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d016      	beq.n	8005792 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005764:	f7fc fe00 	bl	8002368 <HAL_GetTick>
 8005768:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	e00a      	b.n	8005782 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576c:	f7fc fdfc 	bl	8002368 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e159      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005782:	4b5c      	ldr	r3, [pc, #368]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ed      	beq.n	800576c <HAL_RCC_OscConfig+0x5e8>
 8005790:	e01d      	b.n	80057ce <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005792:	f7fc fde9 	bl	8002368 <HAL_GetTick>
 8005796:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f7fc fde5 	bl	8002368 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e142      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b0:	4b50      	ldr	r3, [pc, #320]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ed      	bne.n	800579a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80057be:	4b4d      	ldr	r3, [pc, #308]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c4:	4a4b      	ldr	r2, [pc, #300]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	4a46      	ldr	r2, [pc, #280]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d03c      	beq.n	8005868 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01c      	beq.n	8005830 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057f6:	4b3f      	ldr	r3, [pc, #252]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057fc:	4a3d      	ldr	r2, [pc, #244]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fc fdaf 	bl	8002368 <HAL_GetTick>
 800580a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580e:	f7fc fdab 	bl	8002368 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e10a      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005820:	4b34      	ldr	r3, [pc, #208]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0ef      	beq.n	800580e <HAL_RCC_OscConfig+0x68a>
 800582e:	e01b      	b.n	8005868 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005830:	4b30      	ldr	r3, [pc, #192]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005836:	4a2f      	ldr	r2, [pc, #188]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005840:	f7fc fd92 	bl	8002368 <HAL_GetTick>
 8005844:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005848:	f7fc fd8e 	bl	8002368 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0ed      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800585a:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800585c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1ef      	bne.n	8005848 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80e1 	beq.w	8005a34 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	2b02      	cmp	r3, #2
 8005878:	f040 80b5 	bne.w	80059e6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0203 	and.w	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	429a      	cmp	r2, r3
 800588e:	d124      	bne.n	80058da <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	3b01      	subs	r3, #1
 800589c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d11b      	bne.n	80058da <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d113      	bne.n	80058da <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	3b01      	subs	r3, #1
 80058c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d109      	bne.n	80058da <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	3b01      	subs	r3, #1
 80058d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d05f      	beq.n	800599a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d05a      	beq.n	8005996 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a03      	ldr	r2, [pc, #12]	@ (80058f4 <HAL_RCC_OscConfig+0x770>)
 80058e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ec:	f7fc fd3c 	bl	8002368 <HAL_GetTick>
 80058f0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f2:	e00c      	b.n	800590e <HAL_RCC_OscConfig+0x78a>
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc fd34 	bl	8002368 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e093      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800590e:	4b4c      	ldr	r3, [pc, #304]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800591a:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	4b49      	ldr	r3, [pc, #292]	@ (8005a44 <HAL_RCC_OscConfig+0x8c0>)
 8005920:	4013      	ands	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800592a:	3a01      	subs	r2, #1
 800592c:	0112      	lsls	r2, r2, #4
 800592e:	4311      	orrs	r1, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005934:	0212      	lsls	r2, r2, #8
 8005936:	4311      	orrs	r1, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	3a01      	subs	r2, #1
 8005940:	0552      	lsls	r2, r2, #21
 8005942:	4311      	orrs	r1, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005948:	0852      	lsrs	r2, r2, #1
 800594a:	3a01      	subs	r2, #1
 800594c:	0652      	lsls	r2, r2, #25
 800594e:	430a      	orrs	r2, r1
 8005950:	493b      	ldr	r1, [pc, #236]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005956:	4b3a      	ldr	r3, [pc, #232]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a39      	ldr	r2, [pc, #228]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 800595c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005960:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005962:	4b37      	ldr	r3, [pc, #220]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	4a36      	ldr	r2, [pc, #216]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800596c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800596e:	f7fc fcfb 	bl	8002368 <HAL_GetTick>
 8005972:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005976:	f7fc fcf7 	bl	8002368 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e056      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005988:	4b2d      	ldr	r3, [pc, #180]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0f0      	beq.n	8005976 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005994:	e04e      	b.n	8005a34 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e04d      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599a:	4b29      	ldr	r3, [pc, #164]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d146      	bne.n	8005a34 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059a6:	4b26      	ldr	r3, [pc, #152]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a25      	ldr	r2, [pc, #148]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059b0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059b2:	4b23      	ldr	r3, [pc, #140]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4a22      	ldr	r2, [pc, #136]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059bc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059be:	f7fc fcd3 	bl	8002368 <HAL_GetTick>
 80059c2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fc fccf 	bl	8002368 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e02e      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x842>
 80059e4:	e026      	b.n	8005a34 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	d021      	beq.n	8005a30 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fc fcb6 	bl	8002368 <HAL_GetTick>
 80059fc:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fc fcb2 	bl	8002368 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e011      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a12:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	4a07      	ldr	r2, [pc, #28]	@ (8005a40 <HAL_RCC_OscConfig+0x8bc>)
 8005a24:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005a28:	f023 0303 	bic.w	r3, r3, #3
 8005a2c:	60d3      	str	r3, [r2, #12]
 8005a2e:	e001      	b.n	8005a34 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3728      	adds	r7, #40	@ 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	f99f808c 	.word	0xf99f808c

08005a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0e7      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b75      	ldr	r3, [pc, #468]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d910      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b72      	ldr	r3, [pc, #456]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 0207 	bic.w	r2, r3, #7
 8005a72:	4970      	ldr	r1, [pc, #448]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0cf      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	4b66      	ldr	r3, [pc, #408]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d908      	bls.n	8005aba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa8:	4b63      	ldr	r3, [pc, #396]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4960      	ldr	r1, [pc, #384]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04c      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	4b5a      	ldr	r3, [pc, #360]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d121      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0a6      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ae6:	4b54      	ldr	r3, [pc, #336]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e09a      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005afe:	4b4e      	ldr	r3, [pc, #312]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e08e      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e086      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b1e:	4b46      	ldr	r3, [pc, #280]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	4943      	ldr	r1, [pc, #268]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b30:	f7fc fc1a 	bl	8002368 <HAL_GetTick>
 8005b34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b36:	e00a      	b.n	8005b4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b38:	f7fc fc16 	bl	8002368 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e06e      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 020c 	and.w	r2, r3, #12
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d1eb      	bne.n	8005b38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d208      	bcs.n	8005b8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	492b      	ldr	r1, [pc, #172]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8e:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d210      	bcs.n	8005bbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9c:	4b25      	ldr	r3, [pc, #148]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 0207 	bic.w	r2, r3, #7
 8005ba4:	4923      	ldr	r1, [pc, #140]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bac:	4b21      	ldr	r3, [pc, #132]	@ (8005c34 <HAL_RCC_ClockConfig+0x1ec>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d001      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e036      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bca:	4b1b      	ldr	r3, [pc, #108]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	4918      	ldr	r1, [pc, #96]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be8:	4b13      	ldr	r3, [pc, #76]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4910      	ldr	r1, [pc, #64]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bfc:	f000 f824 	bl	8005c48 <HAL_RCC_GetSysClockFreq>
 8005c00:	4602      	mov	r2, r0
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f0>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	490b      	ldr	r1, [pc, #44]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f4>)
 8005c0e:	5ccb      	ldrb	r3, [r1, r3]
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4a09      	ldr	r2, [pc, #36]	@ (8005c40 <HAL_RCC_ClockConfig+0x1f8>)
 8005c1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c1c:	4b09      	ldr	r3, [pc, #36]	@ (8005c44 <HAL_RCC_ClockConfig+0x1fc>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fc fb51 	bl	80022c8 <HAL_InitTick>
 8005c26:	4603      	mov	r3, r0
 8005c28:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40022000 	.word	0x40022000
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	0800debc 	.word	0x0800debc
 8005c40:	20000004 	.word	0x20000004
 8005c44:	20000008 	.word	0x20000008

08005c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	@ 0x24
 8005c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c56:	4b3e      	ldr	r3, [pc, #248]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c60:	4b3b      	ldr	r3, [pc, #236]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x34>
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	2b0c      	cmp	r3, #12
 8005c74:	d121      	bne.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d11e      	bne.n	8005cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c7c:	4b34      	ldr	r3, [pc, #208]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c88:	4b31      	ldr	r3, [pc, #196]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e005      	b.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c98:	4b2d      	ldr	r3, [pc, #180]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cb8:	e00a      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cc0:	4b25      	ldr	r3, [pc, #148]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e004      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ccc:	4b23      	ldr	r3, [pc, #140]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8005cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d134      	bne.n	8005d40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0xa6>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xac>
 8005cec:	e005      	b.n	8005cfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cee:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cf0:	617b      	str	r3, [r7, #20]
      break;
 8005cf2:	e005      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cf4:	4b19      	ldr	r3, [pc, #100]	@ (8005d5c <HAL_RCC_GetSysClockFreq+0x114>)
 8005cf6:	617b      	str	r3, [r7, #20]
      break;
 8005cf8:	e002      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	617b      	str	r3, [r7, #20]
      break;
 8005cfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d00:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d0e:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	fb03 f202 	mul.w	r2, r3, r2
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d26:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	0e5b      	lsrs	r3, r3, #25
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	3301      	adds	r3, #1
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d40:	69bb      	ldr	r3, [r7, #24]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3724      	adds	r7, #36	@ 0x24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	0800decc 	.word	0x0800decc
 8005d58:	00f42400 	.word	0x00f42400
 8005d5c:	007a1200 	.word	0x007a1200

08005d60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d78:	f7ff f93a 	bl	8004ff0 <HAL_PWREx_GetVoltageRange>
 8005d7c:	6178      	str	r0, [r7, #20]
 8005d7e:	e014      	b.n	8005daa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d80:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	4a24      	ldr	r2, [pc, #144]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d8c:	4b22      	ldr	r3, [pc, #136]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d98:	f7ff f92a 	bl	8004ff0 <HAL_PWREx_GetVoltageRange>
 8005d9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d10b      	bne.n	8005dca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b80      	cmp	r3, #128	@ 0x80
 8005db6:	d919      	bls.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2ba0      	cmp	r3, #160	@ 0xa0
 8005dbc:	d902      	bls.n	8005dc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e013      	b.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e010      	b.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b80      	cmp	r3, #128	@ 0x80
 8005dce:	d902      	bls.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	e00a      	b.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b80      	cmp	r3, #128	@ 0x80
 8005dda:	d102      	bne.n	8005de2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ddc:	2302      	movs	r3, #2
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	e004      	b.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b70      	cmp	r3, #112	@ 0x70
 8005de6:	d101      	bne.n	8005dec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005de8:	2301      	movs	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 0207 	bic.w	r2, r3, #7
 8005df4:	4909      	ldr	r1, [pc, #36]	@ (8005e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dfc:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d001      	beq.n	8005e0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40022000 	.word	0x40022000

08005e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e28:	2300      	movs	r3, #0
 8005e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 809e 	beq.w	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e42:	4b46      	ldr	r3, [pc, #280]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e58:	4b40      	ldr	r3, [pc, #256]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e64:	4b3d      	ldr	r3, [pc, #244]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e70:	2301      	movs	r3, #1
 8005e72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e74:	4b3a      	ldr	r3, [pc, #232]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a39      	ldr	r2, [pc, #228]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e80:	f7fc fa72 	bl	8002368 <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e86:	e009      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e88:	f7fc fa6e 	bl	8002368 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	74fb      	strb	r3, [r7, #19]
        break;
 8005e9a:	e005      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e9c:	4b30      	ldr	r3, [pc, #192]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ef      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d15a      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eae:	4b2b      	ldr	r3, [pc, #172]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d019      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005eca:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed6:	4b21      	ldr	r3, [pc, #132]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005edc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eec:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ef6:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fc fa2e 	bl	8002368 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f0e:	e00b      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f10:	f7fc fa2a 	bl	8002368 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d902      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	74fb      	strb	r3, [r7, #19]
            break;
 8005f26:	e006      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ec      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f3c:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	4904      	ldr	r1, [pc, #16]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f52:	e009      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	74bb      	strb	r3, [r7, #18]
 8005f58:	e006      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f68:	7c7b      	ldrb	r3, [r7, #17]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	4a6d      	ldr	r2, [pc, #436]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f86:	4b68      	ldr	r3, [pc, #416]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8c:	f023 0203 	bic.w	r2, r3, #3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4964      	ldr	r1, [pc, #400]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fae:	f023 020c 	bic.w	r2, r3, #12
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	495c      	ldr	r1, [pc, #368]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fca:	4b57      	ldr	r3, [pc, #348]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4953      	ldr	r1, [pc, #332]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fec:	4b4e      	ldr	r3, [pc, #312]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	494b      	ldr	r1, [pc, #300]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800600e:	4b46      	ldr	r3, [pc, #280]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4942      	ldr	r1, [pc, #264]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006030:	4b3d      	ldr	r3, [pc, #244]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	493a      	ldr	r1, [pc, #232]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006052:	4b35      	ldr	r3, [pc, #212]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	4931      	ldr	r1, [pc, #196]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006074:	4b2c      	ldr	r3, [pc, #176]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	4929      	ldr	r1, [pc, #164]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006096:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	4920      	ldr	r1, [pc, #128]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	4918      	ldr	r1, [pc, #96]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d6:	d105      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d8:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	4a12      	ldr	r2, [pc, #72]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d015      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	490a      	ldr	r1, [pc, #40]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800610e:	d105      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006110:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a04      	ldr	r2, [pc, #16]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800611c:	7cbb      	ldrb	r3, [r7, #18]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000

0800612c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d07f      	beq.n	800623e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb ff1a 	bl	8001f8c <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800615e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006168:	4b37      	ldr	r3, [pc, #220]	@ (8006248 <HAL_RTC_Init+0x11c>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b10      	cmp	r3, #16
 8006172:	d05b      	beq.n	800622c <HAL_RTC_Init+0x100>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	22ca      	movs	r2, #202	@ 0xca
 800617a:	625a      	str	r2, [r3, #36]	@ 0x24
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2253      	movs	r2, #83	@ 0x53
 8006182:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa53 	bl	8006630 <RTC_EnterInitMode>
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d127      	bne.n	80061e4 <HAL_RTC_Init+0xb8>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80061a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a6:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6912      	ldr	r2, [r2, #16]
 80061ce:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6919      	ldr	r1, [r3, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	041a      	lsls	r2, r3, #16
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa59 	bl	800669c <RTC_ExitInitMode>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <HAL_RTC_Init+0xf6>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 8006202:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	22ff      	movs	r2, #255	@ 0xff
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24
 800622a:	e001      	b.n	8006230 <HAL_RTC_Init+0x104>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <HAL_RTC_Init+0x112>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  return status;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40002800 	.word	0x40002800

0800624c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_RTC_SetTime+0x1a>
 8006262:	2302      	movs	r3, #2
 8006264:	e08b      	b.n	800637e <HAL_RTC_SetTime+0x132>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	22ca      	movs	r2, #202	@ 0xca
 800627c:	625a      	str	r2, [r3, #36]	@ 0x24
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2253      	movs	r2, #83	@ 0x53
 8006284:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f9d2 	bl	8006630 <RTC_EnterInitMode>
 800628c:	4603      	mov	r3, r0
 800628e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d163      	bne.n	800635e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d126      	bne.n	80062ea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d102      	bne.n	80062b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fa2f 	bl	8006718 <RTC_ByteToBcd2>
 80062ba:	4603      	mov	r3, r0
 80062bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fa28 	bl	8006718 <RTC_ByteToBcd2>
 80062c8:	4603      	mov	r3, r0
 80062ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	789b      	ldrb	r3, [r3, #2]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fa20 	bl	8006718 <RTC_ByteToBcd2>
 80062d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e018      	b.n	800631c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2200      	movs	r2, #0
 80062fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800630a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006310:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	78db      	ldrb	r3, [r3, #3]
 8006316:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006326:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800632a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800633a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	431a      	orrs	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f9a1 	bl	800669c <RTC_ExitInitMode>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	22ff      	movs	r2, #255	@ 0xff
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 800637c:	7cfb      	ldrb	r3, [r7, #19]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd90      	pop	{r4, r7, pc}

08006386 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80063b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80063b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	0d9b      	lsrs	r3, r3, #22
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11a      	bne.n	8006434 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f9a8 	bl	8006758 <RTC_Bcd2ToByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 f99f 	bl	8006758 <RTC_Bcd2ToByte>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	789b      	ldrb	r3, [r3, #2]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f996 	bl	8006758 <RTC_Bcd2ToByte>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800643e:	b590      	push	{r4, r7, lr}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_RTC_SetDate+0x1a>
 8006454:	2302      	movs	r3, #2
 8006456:	e075      	b.n	8006544 <HAL_RTC_SetDate+0x106>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10e      	bne.n	800648c <HAL_RTC_SetDate+0x4e>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	b2db      	uxtb	r3, r3
 8006484:	330a      	adds	r3, #10
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11c      	bne.n	80064cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 f93e 	bl	8006718 <RTC_ByteToBcd2>
 800649c:	4603      	mov	r3, r0
 800649e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f937 	bl	8006718 <RTC_ByteToBcd2>
 80064aa:	4603      	mov	r3, r0
 80064ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	789b      	ldrb	r3, [r3, #2]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f92f 	bl	8006718 <RTC_ByteToBcd2>
 80064ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e00e      	b.n	80064ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	78db      	ldrb	r3, [r3, #3]
 80064d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	22ca      	movs	r2, #202	@ 0xca
 80064f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2253      	movs	r2, #83	@ 0x53
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f898 	bl	8006630 <RTC_EnterInitMode>
 8006500:	4603      	mov	r3, r0
 8006502:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006514:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006518:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f8be 	bl	800669c <RTC_ExitInitMode>
 8006520:	4603      	mov	r3, r0
 8006522:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	22ff      	movs	r2, #255	@ 0xff
 800652a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return status;
 8006542:	7cfb      	ldrb	r3, [r7, #19]
}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}

0800654c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006562:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006566:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 031f 	and.w	r3, r3, #31
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	0b5b      	lsrs	r3, r3, #13
 8006594:	b2db      	uxtb	r3, r3
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	b2da      	uxtb	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d11a      	bne.n	80065dc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	78db      	ldrb	r3, [r3, #3]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f8d4 	bl	8006758 <RTC_Bcd2ToByte>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f8cb 	bl	8006758 <RTC_Bcd2ToByte>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	789b      	ldrb	r3, [r3, #2]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f8c2 	bl	8006758 <RTC_Bcd2ToByte>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0d      	ldr	r2, [pc, #52]	@ (800662c <HAL_RTC_WaitForSynchro+0x44>)
 80065f6:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 80065f8:	f7fb feb6 	bl	8002368 <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80065fe:	e009      	b.n	8006614 <HAL_RTC_WaitForSynchro+0x2c>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006600:	f7fb feb2 	bl	8002368 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660e:	d901      	bls.n	8006614 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e007      	b.n	8006624 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ee      	beq.n	8006600 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	0001005c 	.word	0x0001005c

08006630 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d123      	bne.n	8006692 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006658:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800665a:	f7fb fe85 	bl	8002368 <HAL_GetTick>
 800665e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006660:	e00d      	b.n	800667e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006662:	f7fb fe81 	bl	8002368 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006670:	d905      	bls.n	800667e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2203      	movs	r2, #3
 800667a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <RTC_EnterInitMode+0x62>
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d1e7      	bne.n	8006662 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80066a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006714 <RTC_ExitInitMode+0x78>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <RTC_ExitInitMode+0x78>)
 80066ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b2:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80066b4:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <RTC_ExitInitMode+0x78>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10c      	bne.n	80066da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff ff91 	bl	80065e8 <HAL_RTC_WaitForSynchro>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01e      	beq.n	800670a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2203      	movs	r2, #3
 80066d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	73fb      	strb	r3, [r7, #15]
 80066d8:	e017      	b.n	800670a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066da:	4b0e      	ldr	r3, [pc, #56]	@ (8006714 <RTC_ExitInitMode+0x78>)
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	4a0d      	ldr	r2, [pc, #52]	@ (8006714 <RTC_ExitInitMode+0x78>)
 80066e0:	f023 0320 	bic.w	r3, r3, #32
 80066e4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ff7e 	bl	80065e8 <HAL_RTC_WaitForSynchro>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2203      	movs	r2, #3
 80066f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      status = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066fe:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <RTC_ExitInitMode+0x78>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	4a04      	ldr	r2, [pc, #16]	@ (8006714 <RTC_ExitInitMode+0x78>)
 8006704:	f043 0320 	orr.w	r3, r3, #32
 8006708:	6193      	str	r3, [r2, #24]
  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40002800 	.word	0x40002800

08006718 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800672a:	e005      	b.n	8006738 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	3b0a      	subs	r3, #10
 8006736:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	2b09      	cmp	r3, #9
 800673c:	d8f6      	bhi.n	800672c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	b2da      	uxtb	r2, r3
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	4313      	orrs	r3, r2
 800674a:	b2db      	uxtb	r3, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	091b      	lsrs	r3, r3, #4
 8006766:	b2db      	uxtb	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	4413      	add	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	b2da      	uxtb	r2, r3
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	4413      	add	r3, r2
 800677e:	b2db      	uxtb	r3, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e087      	b.n	80068b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	22ca      	movs	r2, #202	@ 0xca
 80067be:	625a      	str	r2, [r3, #36]	@ 0x24
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2253      	movs	r2, #83	@ 0x53
 80067c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067d6:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2204      	movs	r2, #4
 80067de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d120      	bne.n	8006830 <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
#endif
  {
    tickstart = HAL_GetTick();
 80067ee:	f7fb fdbb 	bl	8002368 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80067f4:	e015      	b.n	8006822 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067f6:	f7fb fdb7 	bl	8002368 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006804:	d90d      	bls.n	8006822 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	22ff      	movs	r2, #255	@ 0xff
 800680c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2203      	movs	r2, #3
 8006812:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e04a      	b.n	80068b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0e2      	beq.n	80067f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x6a>
    }
  }

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	0419      	lsls	r1, r3, #16
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	430a      	orrs	r2, r1
 800683c:	615a      	str	r2, [r3, #20]
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f023 0107 	bic.w	r1, r3, #7
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	430a      	orrs	r2, r1
 8006850:	619a      	str	r2, [r3, #24]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0u)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d006      	beq.n	8006866 <HAL_RTCEx_SetWakeUpTimer_IT+0xda>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8006858:	4b19      	ldr	r3, [pc, #100]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a18      	ldr	r2, [pc, #96]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800685e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e005      	b.n	8006872 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006866:	4b16      	ldr	r3, [pc, #88]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 800686c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006870:	6013      	str	r3, [r2, #0]
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006872:	4b13      	ldr	r3, [pc, #76]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4a12      	ldr	r2, [pc, #72]	@ (80068c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x134>)
 8006878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800687c:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800688c:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800689c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	22ff      	movs	r2, #255	@ 0xff
 80068a4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40010400 	.word	0x40010400

080068c4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80068cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 80068ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068d2:	615a      	str	r2, [r3, #20]


#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->MISR & RTC_MISR_WUTMF) != 0u)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d006      	beq.n	80068f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2204      	movs	r2, #4
 80068e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb f842 	bl	8001974 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40010400 	.word	0x40010400

08006904 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	4638      	mov	r0, r7
 800690e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006930:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006934:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	b29a      	uxth	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006956:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800695a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	b29b      	uxth	r3, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	b29b      	uxth	r3, r3
 800696c:	4013      	ands	r3, r2
 800696e:	b29a      	uxth	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	4638      	mov	r0, r7
 80069a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069dc:	b480      	push	{r7}
 80069de:	b0a7      	sub	sp, #156	@ 0x9c
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80069fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a02:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	78db      	ldrb	r3, [r3, #3]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d81f      	bhi.n	8006a4e <USB_ActivateEndpoint+0x72>
 8006a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a14 <USB_ActivateEndpoint+0x38>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a57 	.word	0x08006a57
 8006a20:	08006a33 	.word	0x08006a33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a24:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a2c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a30:	e012      	b.n	8006a58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a36:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006a3a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a3e:	e00b      	b.n	8006a58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a40:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8006a4c:	e004      	b.n	8006a58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8006a54:	e000      	b.n	8006a58 <USB_ActivateEndpoint+0x7c>
      break;
 8006a56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a92:	b21a      	sxth	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	b21b      	sxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	7b1b      	ldrb	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f040 8180 	bne.w	8006dce <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 8084 	beq.w	8006be0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	4413      	add	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	88db      	ldrh	r3, [r3, #6]
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	827b      	strh	r3, [r7, #18]
 8006b1a:	8a7b      	ldrh	r3, [r7, #18]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01b      	beq.n	8006b5c <USB_ActivateEndpoint+0x180>
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	823b      	strh	r3, [r7, #16]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	8a3b      	ldrh	r3, [r7, #16]
 8006b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d020      	beq.n	8006ba6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b7a:	81bb      	strh	r3, [r7, #12]
 8006b7c:	89bb      	ldrh	r3, [r7, #12]
 8006b7e:	f083 0320 	eor.w	r3, r3, #32
 8006b82:	81bb      	strh	r3, [r7, #12]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	89bb      	ldrh	r3, [r7, #12]
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]
 8006ba4:	e3f9      	b.n	800739a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bbc:	81fb      	strh	r3, [r7, #14]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]
 8006bde:	e3dc      	b.n	800739a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	4413      	add	r3, r2
 8006bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	00da      	lsls	r2, r3, #3
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	88db      	ldrh	r3, [r3, #6]
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	4413      	add	r3, r2
 8006c26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	00da      	lsls	r2, r3, #3
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <USB_ActivateEndpoint+0x28a>
 8006c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e041      	b.n	8006cea <USB_ActivateEndpoint+0x30e>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c6c:	d81c      	bhi.n	8006ca8 <USB_ActivateEndpoint+0x2cc>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <USB_ActivateEndpoint+0x2b2>
 8006c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c88:	3301      	adds	r3, #1
 8006c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	029b      	lsls	r3, r3, #10
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e020      	b.n	8006cea <USB_ActivateEndpoint+0x30e>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <USB_ActivateEndpoint+0x2ec>
 8006cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006cf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01b      	beq.n	8006d3a <USB_ActivateEndpoint+0x35e>
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d18:	843b      	strh	r3, [r7, #32]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	441a      	add	r2, r3
 8006d24:	8c3b      	ldrh	r3, [r7, #32]
 8006d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d124      	bne.n	8006d8c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d58:	83bb      	strh	r3, [r7, #28]
 8006d5a:	8bbb      	ldrh	r3, [r7, #28]
 8006d5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d60:	83bb      	strh	r3, [r7, #28]
 8006d62:	8bbb      	ldrh	r3, [r7, #28]
 8006d64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d68:	83bb      	strh	r3, [r7, #28]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	8bbb      	ldrh	r3, [r7, #28]
 8006d76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	8013      	strh	r3, [r2, #0]
 8006d8a:	e306      	b.n	800739a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da2:	83fb      	strh	r3, [r7, #30]
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006daa:	83fb      	strh	r3, [r7, #30]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8bfb      	ldrh	r3, [r7, #30]
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
 8006dcc:	e2e5      	b.n	800739a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d11e      	bne.n	8006e14 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e06:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]
 8006e12:	e01d      	b.n	8006e50 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e60:	4413      	add	r3, r2
 8006e62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	00da      	lsls	r2, r3, #3
 8006e6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	891b      	ldrh	r3, [r3, #8]
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e94:	4413      	add	r3, r2
 8006e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00da      	lsls	r2, r3, #3
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	895b      	ldrh	r3, [r3, #10]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eb6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f040 81af 	bne.w	8007220 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8006ed2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8006ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01d      	beq.n	8006f1a <USB_ActivateEndpoint+0x53e>
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8006f2a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8006f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01d      	beq.n	8006f72 <USB_ActivateEndpoint+0x596>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d16b      	bne.n	8007052 <USB_ActivateEndpoint+0x676>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f8a:	4413      	add	r3, r2
 8006f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	00da      	lsls	r2, r3, #3
 8006f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f96:	4413      	add	r3, r2
 8006f98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <USB_ActivateEndpoint+0x5f0>
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	e05d      	b.n	8007088 <USB_ActivateEndpoint+0x6ac>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd2:	d81c      	bhi.n	800700e <USB_ActivateEndpoint+0x632>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <USB_ActivateEndpoint+0x618>
 8006fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	b29b      	uxth	r3, r3
 8007004:	4313      	orrs	r3, r2
 8007006:	b29a      	uxth	r2, r3
 8007008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	e03c      	b.n	8007088 <USB_ActivateEndpoint+0x6ac>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <USB_ActivateEndpoint+0x652>
 8007024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007028:	3b01      	subs	r3, #1
 800702a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800702e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b29b      	uxth	r3, r3
 8007042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704a:	b29a      	uxth	r2, r3
 800704c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e01a      	b.n	8007088 <USB_ActivateEndpoint+0x6ac>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d116      	bne.n	8007088 <USB_ActivateEndpoint+0x6ac>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	657b      	str	r3, [r7, #84]	@ 0x54
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007064:	b29b      	uxth	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800706a:	4413      	add	r3, r2
 800706c:	657b      	str	r3, [r7, #84]	@ 0x54
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	00da      	lsls	r2, r3, #3
 8007074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007076:	4413      	add	r3, r2
 8007078:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800707c:	653b      	str	r3, [r7, #80]	@ 0x50
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	b29a      	uxth	r2, r3
 8007084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	647b      	str	r3, [r7, #68]	@ 0x44
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d16b      	bne.n	800716c <USB_ActivateEndpoint+0x790>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a4:	4413      	add	r3, r2
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	00da      	lsls	r2, r3, #3
 80070ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <USB_ActivateEndpoint+0x70a>
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e05b      	b.n	800719e <USB_ActivateEndpoint+0x7c2>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ec:	d81c      	bhi.n	8007128 <USB_ActivateEndpoint+0x74c>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <USB_ActivateEndpoint+0x732>
 8007104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007108:	3301      	adds	r3, #1
 800710a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007118:	b29b      	uxth	r3, r3
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	b29b      	uxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	b29a      	uxth	r2, r3
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e03a      	b.n	800719e <USB_ActivateEndpoint+0x7c2>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <USB_ActivateEndpoint+0x76c>
 800713e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007142:	3b01      	subs	r3, #1
 8007144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29a      	uxth	r2, r3
 800714e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007152:	b29b      	uxth	r3, r3
 8007154:	029b      	lsls	r3, r3, #10
 8007156:	b29b      	uxth	r3, r3
 8007158:	4313      	orrs	r3, r2
 800715a:	b29b      	uxth	r3, r3
 800715c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007164:	b29a      	uxth	r2, r3
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	e018      	b.n	800719e <USB_ActivateEndpoint+0x7c2>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d114      	bne.n	800719e <USB_ActivateEndpoint+0x7c2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800717a:	b29b      	uxth	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007180:	4413      	add	r3, r2
 8007182:	647b      	str	r3, [r7, #68]	@ 0x44
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	00da      	lsls	r2, r3, #3
 800718a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800718c:	4413      	add	r3, r2
 800718e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	b29a      	uxth	r2, r3
 800719a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071b6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	441a      	add	r2, r3
 80071d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	e0bc      	b.n	800739a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8007230:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01d      	beq.n	8007278 <USB_ActivateEndpoint+0x89c>
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800724e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007252:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007274:	b29b      	uxth	r3, r3
 8007276:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8007288:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800728c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01d      	beq.n	80072d0 <USB_ActivateEndpoint+0x8f4>
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80072bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	78db      	ldrb	r3, [r3, #3]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d024      	beq.n	8007322 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80072f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80072f6:	f083 0320 	eor.w	r3, r3, #32
 80072fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
 8007320:	e01d      	b.n	800735e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007338:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800734a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735a:	b29b      	uxth	r3, r3
 800735c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007374:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800738a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800738e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007396:	b29b      	uxth	r3, r3
 8007398:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800739a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800739e:	4618      	mov	r0, r3
 80073a0:	379c      	adds	r7, #156	@ 0x9c
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop

080073ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b08d      	sub	sp, #52	@ 0x34
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	7b1b      	ldrb	r3, [r3, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808e 	bne.w	80074dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d044      	beq.n	8007452 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	81bb      	strh	r3, [r7, #12]
 80073d6:	89bb      	ldrh	r3, [r7, #12]
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <USB_DeactivateEndpoint+0x6c>
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	817b      	strh	r3, [r7, #10]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	441a      	add	r2, r3
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800740c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007410:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007414:	b29b      	uxth	r3, r3
 8007416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800742a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800742e:	813b      	strh	r3, [r7, #8]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	441a      	add	r2, r3
 800743a:	893b      	ldrh	r3, [r7, #8]
 800743c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744c:	b29b      	uxth	r3, r3
 800744e:	8013      	strh	r3, [r2, #0]
 8007450:	e192      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	827b      	strh	r3, [r7, #18]
 8007460:	8a7b      	ldrh	r3, [r7, #18]
 8007462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <USB_DeactivateEndpoint+0xf6>
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800747c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007480:	823b      	strh	r3, [r7, #16]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	8a3b      	ldrh	r3, [r7, #16]
 800748e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800749a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b8:	81fb      	strh	r3, [r7, #14]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	89fb      	ldrh	r3, [r7, #14]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
 80074da:	e14d      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 80a5 	bne.w	8007630 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	843b      	strh	r3, [r7, #32]
 80074f4:	8c3b      	ldrh	r3, [r7, #32]
 80074f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01b      	beq.n	8007536 <USB_DeactivateEndpoint+0x18a>
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007514:	83fb      	strh	r3, [r7, #30]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	8bfb      	ldrh	r3, [r7, #30]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800752a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800752e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	83bb      	strh	r3, [r7, #28]
 8007544:	8bbb      	ldrh	r3, [r7, #28]
 8007546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01b      	beq.n	8007586 <USB_DeactivateEndpoint+0x1da>
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007564:	837b      	strh	r3, [r7, #26]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	8b7b      	ldrh	r3, [r7, #26]
 8007572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800757a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759c:	833b      	strh	r3, [r7, #24]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	8b3b      	ldrh	r3, [r7, #24]
 80075aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d4:	82fb      	strh	r3, [r7, #22]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	441a      	add	r2, r3
 80075e0:	8afb      	ldrh	r3, [r7, #22]
 80075e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800760c:	82bb      	strh	r3, [r7, #20]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	441a      	add	r2, r3
 8007618:	8abb      	ldrh	r3, [r7, #20]
 800761a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800762a:	b29b      	uxth	r3, r3
 800762c:	8013      	strh	r3, [r2, #0]
 800762e:	e0a3      	b.n	8007778 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800763e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <USB_DeactivateEndpoint+0x2d4>
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800765a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	441a      	add	r2, r3
 800766a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800766c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800768e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01b      	beq.n	80076d0 <USB_DeactivateEndpoint+0x324>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800771a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800771e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	441a      	add	r2, r3
 800772a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800772c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800773c:	b29b      	uxth	r3, r3
 800773e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007756:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3734      	adds	r7, #52	@ 0x34
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b0ac      	sub	sp, #176	@ 0xb0
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b01      	cmp	r3, #1
 8007796:	f040 84ca 	bne.w	800812e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d904      	bls.n	80077b0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077ae:	e003      	b.n	80077b8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	7b1b      	ldrb	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d122      	bne.n	8007806 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6959      	ldr	r1, [r3, #20]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	88da      	ldrh	r2, [r3, #6]
 80077c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fede 	bl	8008590 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077de:	b29b      	uxth	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	00da      	lsls	r2, r3, #3
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	f000 bc6f 	b.w	80080e4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	78db      	ldrb	r3, [r3, #3]
 800780a:	2b02      	cmp	r3, #2
 800780c:	f040 831e 	bne.w	8007e4c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	f240 82cf 	bls.w	8007dbc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007834:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6a1a      	ldr	r2, [r3, #32]
 800785e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 814f 	beq.w	8007b1e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	633b      	str	r3, [r7, #48]	@ 0x30
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d16b      	bne.n	8007964 <USB_EPStartXfer+0x1de>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007896:	b29b      	uxth	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	4413      	add	r3, r2
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00da      	lsls	r2, r3, #3
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <USB_EPStartXfer+0x158>
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	e05b      	b.n	8007996 <USB_EPStartXfer+0x210>
 80078de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80078e4:	d81c      	bhi.n	8007920 <USB_EPStartXfer+0x19a>
 80078e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <USB_EPStartXfer+0x180>
 80078fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007900:	3301      	adds	r3, #1
 8007902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29a      	uxth	r2, r3
 800790c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007910:	b29b      	uxth	r3, r3
 8007912:	029b      	lsls	r3, r3, #10
 8007914:	b29b      	uxth	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	b29a      	uxth	r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e03a      	b.n	8007996 <USB_EPStartXfer+0x210>
 8007920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800792a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <USB_EPStartXfer+0x1ba>
 8007936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800793a:	3b01      	subs	r3, #1
 800793c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800794a:	b29b      	uxth	r3, r3
 800794c:	029b      	lsls	r3, r3, #10
 800794e:	b29b      	uxth	r3, r3
 8007950:	4313      	orrs	r3, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795c:	b29a      	uxth	r2, r3
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	e018      	b.n	8007996 <USB_EPStartXfer+0x210>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d114      	bne.n	8007996 <USB_EPStartXfer+0x210>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	4413      	add	r3, r2
 800797a:	633b      	str	r3, [r7, #48]	@ 0x30
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	00da      	lsls	r2, r3, #3
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	4413      	add	r3, r2
 8007986:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800798a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800798c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007990:	b29a      	uxth	r2, r3
 8007992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007994:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	895b      	ldrh	r3, [r3, #10]
 800799a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6959      	ldr	r1, [r3, #20]
 80079a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fdef 	bl	8008590 <USB_WritePMA>
            ep->xfer_buff += len;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079ba:	441a      	add	r2, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	6a1a      	ldr	r2, [r3, #32]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d907      	bls.n	80079dc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6a1a      	ldr	r2, [r3, #32]
 80079d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	621a      	str	r2, [r3, #32]
 80079da:	e006      	b.n	80079ea <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2200      	movs	r2, #0
 80079e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d16b      	bne.n	8007aca <USB_EPStartXfer+0x344>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	4413      	add	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	00da      	lsls	r2, r3, #3
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <USB_EPStartXfer+0x2be>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	e05d      	b.n	8007b00 <USB_EPStartXfer+0x37a>
 8007a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a4a:	d81c      	bhi.n	8007a86 <USB_EPStartXfer+0x300>
 8007a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_EPStartXfer+0x2e6>
 8007a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e03c      	b.n	8007b00 <USB_EPStartXfer+0x37a>
 8007a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <USB_EPStartXfer+0x320>
 8007a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	e01a      	b.n	8007b00 <USB_EPStartXfer+0x37a>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d116      	bne.n	8007b00 <USB_EPStartXfer+0x37a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	623b      	str	r3, [r7, #32]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	623b      	str	r3, [r7, #32]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	00da      	lsls	r2, r3, #3
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af4:	61fb      	str	r3, [r7, #28]
 8007af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	891b      	ldrh	r3, [r3, #8]
 8007b04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6959      	ldr	r1, [r3, #20]
 8007b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd3a 	bl	8008590 <USB_WritePMA>
 8007b1c:	e2e2      	b.n	80080e4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d16b      	bne.n	8007bfe <USB_EPStartXfer+0x478>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b36:	4413      	add	r3, r2
 8007b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	00da      	lsls	r2, r3, #3
 8007b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b42:	4413      	add	r3, r2
 8007b44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <USB_EPStartXfer+0x3f2>
 8007b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e05d      	b.n	8007c34 <USB_EPStartXfer+0x4ae>
 8007b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b7e:	d81c      	bhi.n	8007bba <USB_EPStartXfer+0x434>
 8007b80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x41a>
 8007b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e03c      	b.n	8007c34 <USB_EPStartXfer+0x4ae>
 8007bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <USB_EPStartXfer+0x454>
 8007bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	029b      	lsls	r3, r3, #10
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	e01a      	b.n	8007c34 <USB_EPStartXfer+0x4ae>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d116      	bne.n	8007c34 <USB_EPStartXfer+0x4ae>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c16:	4413      	add	r3, r2
 8007c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	00da      	lsls	r2, r3, #3
 8007c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c22:	4413      	add	r3, r2
 8007c24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	891b      	ldrh	r3, [r3, #8]
 8007c38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	6959      	ldr	r1, [r3, #20]
 8007c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fca0 	bl	8008590 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695a      	ldr	r2, [r3, #20]
 8007c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c58:	441a      	add	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d907      	bls.n	8007c7a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	621a      	str	r2, [r3, #32]
 8007c78:	e006      	b.n	8007c88 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2200      	movs	r2, #0
 8007c86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d16b      	bne.n	8007d6c <USB_EPStartXfer+0x5e6>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	4413      	add	r3, r2
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	00da      	lsls	r2, r3, #3
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <USB_EPStartXfer+0x560>
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e05b      	b.n	8007d9e <USB_EPStartXfer+0x618>
 8007ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cea:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cec:	d81c      	bhi.n	8007d28 <USB_EPStartXfer+0x5a2>
 8007cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <USB_EPStartXfer+0x588>
 8007d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d08:	3301      	adds	r3, #1
 8007d0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	e03a      	b.n	8007d9e <USB_EPStartXfer+0x618>
 8007d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <USB_EPStartXfer+0x5c2>
 8007d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	801a      	strh	r2, [r3, #0]
 8007d6a:	e018      	b.n	8007d9e <USB_EPStartXfer+0x618>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d114      	bne.n	8007d9e <USB_EPStartXfer+0x618>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d80:	4413      	add	r3, r2
 8007d82:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	00da      	lsls	r2, r3, #3
 8007d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	895b      	ldrh	r3, [r3, #10]
 8007da2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6959      	ldr	r1, [r3, #20]
 8007daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fbeb 	bl	8008590 <USB_WritePMA>
 8007dba:	e193      	b.n	80080e4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dda:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	441a      	add	r2, r3
 8007de8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e10:	4413      	add	r3, r2
 8007e12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	00da      	lsls	r2, r3, #3
 8007e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	891b      	ldrh	r3, [r3, #8]
 8007e32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6959      	ldr	r1, [r3, #20]
 8007e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fba3 	bl	8008590 <USB_WritePMA>
 8007e4a:	e14b      	b.n	80080e4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 809a 	beq.w	8007fa6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d16b      	bne.n	8007f56 <USB_EPStartXfer+0x7d0>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e8e:	4413      	add	r3, r2
 8007e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	00da      	lsls	r2, r3, #3
 8007e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ea0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <USB_EPStartXfer+0x74a>
 8007eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ecc:	801a      	strh	r2, [r3, #0]
 8007ece:	e05b      	b.n	8007f88 <USB_EPStartXfer+0x802>
 8007ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ed4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ed6:	d81c      	bhi.n	8007f12 <USB_EPStartXfer+0x78c>
 8007ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <USB_EPStartXfer+0x772>
 8007eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e03a      	b.n	8007f88 <USB_EPStartXfer+0x802>
 8007f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <USB_EPStartXfer+0x7ac>
 8007f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	029b      	lsls	r3, r3, #10
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f52:	801a      	strh	r2, [r3, #0]
 8007f54:	e018      	b.n	8007f88 <USB_EPStartXfer+0x802>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d114      	bne.n	8007f88 <USB_EPStartXfer+0x802>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f6a:	4413      	add	r3, r2
 8007f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	00da      	lsls	r2, r3, #3
 8007f74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f76:	4413      	add	r3, r2
 8007f78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	895b      	ldrh	r3, [r3, #10]
 8007f8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	6959      	ldr	r1, [r3, #20]
 8007f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 faf6 	bl	8008590 <USB_WritePMA>
 8007fa4:	e09e      	b.n	80080e4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d16b      	bne.n	8008086 <USB_EPStartXfer+0x900>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fbe:	4413      	add	r3, r2
 8007fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	00da      	lsls	r2, r3, #3
 8007fc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fca:	4413      	add	r3, r2
 8007fcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fe0:	801a      	strh	r2, [r3, #0]
 8007fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <USB_EPStartXfer+0x87a>
 8007fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ffc:	801a      	strh	r2, [r3, #0]
 8007ffe:	e063      	b.n	80080c8 <USB_EPStartXfer+0x942>
 8008000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008004:	2b3e      	cmp	r3, #62	@ 0x3e
 8008006:	d81c      	bhi.n	8008042 <USB_EPStartXfer+0x8bc>
 8008008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <USB_EPStartXfer+0x8a2>
 800801e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008022:	3301      	adds	r3, #1
 8008024:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008032:	b29b      	uxth	r3, r3
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	b29b      	uxth	r3, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e042      	b.n	80080c8 <USB_EPStartXfer+0x942>
 8008042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800804c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USB_EPStartXfer+0x8dc>
 8008058:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800805c:	3b01      	subs	r3, #1
 800805e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800806c:	b29b      	uxth	r3, r3
 800806e:	029b      	lsls	r3, r3, #10
 8008070:	b29b      	uxth	r3, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807e:	b29a      	uxth	r2, r3
 8008080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e020      	b.n	80080c8 <USB_EPStartXfer+0x942>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d11c      	bne.n	80080c8 <USB_EPStartXfer+0x942>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080a2:	4413      	add	r3, r2
 80080a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	00da      	lsls	r2, r3, #3
 80080ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080b2:	4413      	add	r3, r2
 80080b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	891b      	ldrh	r3, [r3, #8]
 80080cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6959      	ldr	r1, [r3, #20]
 80080d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080d8:	b29b      	uxth	r3, r3
 80080da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa56 	bl	8008590 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080fa:	817b      	strh	r3, [r7, #10]
 80080fc:	897b      	ldrh	r3, [r7, #10]
 80080fe:	f083 0310 	eor.w	r3, r3, #16
 8008102:	817b      	strh	r3, [r7, #10]
 8008104:	897b      	ldrh	r3, [r7, #10]
 8008106:	f083 0320 	eor.w	r3, r3, #32
 800810a:	817b      	strh	r3, [r7, #10]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	441a      	add	r2, r3
 8008116:	897b      	ldrh	r3, [r7, #10]
 8008118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800811c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008128:	b29b      	uxth	r3, r3
 800812a:	8013      	strh	r3, [r2, #0]
 800812c:	e0d5      	b.n	80082da <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	7b1b      	ldrb	r3, [r3, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d156      	bne.n	80081e4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d122      	bne.n	8008184 <USB_EPStartXfer+0x9fe>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d11e      	bne.n	8008184 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	441a      	add	r2, r3
 800816a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800816e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008176:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	b29b      	uxth	r3, r3
 8008180:	8013      	strh	r3, [r2, #0]
 8008182:	e01d      	b.n	80081c0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800819a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	441a      	add	r2, r3
 80081a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80081ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081bc:	b29b      	uxth	r3, r3
 80081be:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d907      	bls.n	80081dc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	1ad2      	subs	r2, r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	619a      	str	r2, [r3, #24]
 80081da:	e054      	b.n	8008286 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	619a      	str	r2, [r3, #24]
 80081e2:	e050      	b.n	8008286 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	78db      	ldrb	r3, [r3, #3]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d142      	bne.n	8008272 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d048      	beq.n	8008286 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008204:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <USB_EPStartXfer+0xa96>
 8008210:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10b      	bne.n	8008234 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800821c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008224:	2b00      	cmp	r3, #0
 8008226:	d12e      	bne.n	8008286 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008228:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800822c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d128      	bne.n	8008286 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800824a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800825c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008268:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800826c:	b29b      	uxth	r3, r3
 800826e:	8013      	strh	r3, [r2, #0]
 8008270:	e009      	b.n	8008286 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	78db      	ldrb	r3, [r3, #3]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d103      	bne.n	8008282 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	619a      	str	r2, [r3, #24]
 8008280:	e001      	b.n	8008286 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e02a      	b.n	80082dc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	441a      	add	r2, r3
 80082c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	37b0      	adds	r7, #176	@ 0xb0
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	785b      	ldrb	r3, [r3, #1]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d020      	beq.n	8008338 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800830c:	81bb      	strh	r3, [r7, #12]
 800830e:	89bb      	ldrh	r3, [r7, #12]
 8008310:	f083 0310 	eor.w	r3, r3, #16
 8008314:	81bb      	strh	r3, [r7, #12]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	441a      	add	r2, r3
 8008320:	89bb      	ldrh	r3, [r7, #12]
 8008322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800832e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008332:	b29b      	uxth	r3, r3
 8008334:	8013      	strh	r3, [r2, #0]
 8008336:	e01f      	b.n	8008378 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800834a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834e:	81fb      	strh	r3, [r7, #14]
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008356:	81fb      	strh	r3, [r7, #14]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	441a      	add	r2, r3
 8008362:	89fb      	ldrh	r3, [r7, #14]
 8008364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800836c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008374:	b29b      	uxth	r3, r3
 8008376:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d04c      	beq.n	8008432 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	823b      	strh	r3, [r7, #16]
 80083a6:	8a3b      	ldrh	r3, [r7, #16]
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01b      	beq.n	80083e8 <USB_EPClearStall+0x62>
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c6:	81fb      	strh	r3, [r7, #14]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	89fb      	ldrh	r3, [r7, #14]
 80083d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	78db      	ldrb	r3, [r3, #3]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d06c      	beq.n	80084ca <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008406:	81bb      	strh	r3, [r7, #12]
 8008408:	89bb      	ldrh	r3, [r7, #12]
 800840a:	f083 0320 	eor.w	r3, r3, #32
 800840e:	81bb      	strh	r3, [r7, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	89bb      	ldrh	r3, [r7, #12]
 800841c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842c:	b29b      	uxth	r3, r3
 800842e:	8013      	strh	r3, [r2, #0]
 8008430:	e04b      	b.n	80084ca <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	82fb      	strh	r3, [r7, #22]
 8008440:	8afb      	ldrh	r3, [r7, #22]
 8008442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d01b      	beq.n	8008482 <USB_EPClearStall+0xfc>
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008460:	82bb      	strh	r3, [r7, #20]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	441a      	add	r2, r3
 800846c:	8abb      	ldrh	r3, [r7, #20]
 800846e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800847a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847e:	b29b      	uxth	r3, r3
 8008480:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008498:	827b      	strh	r3, [r7, #18]
 800849a:	8a7b      	ldrh	r3, [r7, #18]
 800849c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084a0:	827b      	strh	r3, [r7, #18]
 80084a2:	8a7b      	ldrh	r3, [r7, #18]
 80084a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084a8:	827b      	strh	r3, [r7, #18]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	8a7b      	ldrh	r3, [r7, #18]
 80084b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2280      	movs	r2, #128	@ 0x80
 80084ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008518:	b29a      	uxth	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800853c:	b29b      	uxth	r3, r3
 800853e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008542:	b29a      	uxth	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008566:	b29b      	uxth	r3, r3
 8008568:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800856a:	68fb      	ldr	r3, [r7, #12]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008590:	b480      	push	{r7}
 8008592:	b08b      	sub	sp, #44	@ 0x2c
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4611      	mov	r1, r2
 800859c:	461a      	mov	r2, r3
 800859e:	460b      	mov	r3, r1
 80085a0:	80fb      	strh	r3, [r7, #6]
 80085a2:	4613      	mov	r3, r2
 80085a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085a6:	88bb      	ldrh	r3, [r7, #4]
 80085a8:	3301      	adds	r3, #1
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c6:	e01c      	b.n	8008602 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	3301      	adds	r3, #1
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	b21b      	sxth	r3, r3
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	b21a      	sxth	r2, r3
 80085da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085de:	4313      	orrs	r3, r2
 80085e0:	b21b      	sxth	r3, r3
 80085e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	8a7a      	ldrh	r2, [r7, #18]
 80085e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	3302      	adds	r3, #2
 80085ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	3301      	adds	r3, #1
 80085f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	3301      	adds	r3, #1
 80085fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	3b01      	subs	r3, #1
 8008600:	627b      	str	r3, [r7, #36]	@ 0x24
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1df      	bne.n	80085c8 <USB_WritePMA+0x38>
  }
}
 8008608:	bf00      	nop
 800860a:	bf00      	nop
 800860c:	372c      	adds	r7, #44	@ 0x2c
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008616:	b480      	push	{r7}
 8008618:	b08b      	sub	sp, #44	@ 0x2c
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	4611      	mov	r1, r2
 8008622:	461a      	mov	r2, r3
 8008624:	460b      	mov	r3, r1
 8008626:	80fb      	strh	r3, [r7, #6]
 8008628:	4613      	mov	r3, r2
 800862a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800862c:	88bb      	ldrh	r3, [r7, #4]
 800862e:	085b      	lsrs	r3, r3, #1
 8008630:	b29b      	uxth	r3, r3
 8008632:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800863c:	88fa      	ldrh	r2, [r7, #6]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008646:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
 800864c:	e018      	b.n	8008680 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	3302      	adds	r3, #2
 800865a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	3301      	adds	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	b2da      	uxtb	r2, r3
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	3301      	adds	r3, #1
 8008678:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	3b01      	subs	r3, #1
 800867e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e3      	bne.n	800864e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008686:	88bb      	ldrh	r3, [r7, #4]
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	b2da      	uxtb	r2, r3
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	701a      	strb	r2, [r3, #0]
  }
}
 80086a2:	bf00      	nop
 80086a4:	372c      	adds	r7, #44	@ 0x2c
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086bc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086c0:	f002 fd24 	bl	800b10c <USBD_static_malloc>
 80086c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32b0      	adds	r2, #176	@ 0xb0
 80086d6:	2100      	movs	r1, #0
 80086d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80086dc:	2302      	movs	r3, #2
 80086de:	e0d4      	b.n	800888a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80086e0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80086e4:	2100      	movs	r1, #0
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f003 fabf 	bl	800bc6a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	32b0      	adds	r2, #176	@ 0xb0
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	32b0      	adds	r2, #176	@ 0xb0
 8008706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	7c1b      	ldrb	r3, [r3, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d138      	bne.n	800878a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008718:	4b5e      	ldr	r3, [pc, #376]	@ (8008894 <USBD_CDC_Init+0x1e4>)
 800871a:	7819      	ldrb	r1, [r3, #0]
 800871c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008720:	2202      	movs	r2, #2
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f002 faf6 	bl	800ad14 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008728:	4b5a      	ldr	r3, [pc, #360]	@ (8008894 <USBD_CDC_Init+0x1e4>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 020f 	and.w	r2, r3, #15
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	440b      	add	r3, r1
 800873c:	3324      	adds	r3, #36	@ 0x24
 800873e:	2201      	movs	r2, #1
 8008740:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008742:	4b55      	ldr	r3, [pc, #340]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 8008744:	7819      	ldrb	r1, [r3, #0]
 8008746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800874a:	2202      	movs	r2, #2
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f002 fae1 	bl	800ad14 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008752:	4b51      	ldr	r3, [pc, #324]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 020f 	and.w	r2, r3, #15
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800876a:	2201      	movs	r2, #1
 800876c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800876e:	4b4b      	ldr	r3, [pc, #300]	@ (800889c <USBD_CDC_Init+0x1ec>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	f003 020f 	and.w	r2, r3, #15
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	3326      	adds	r3, #38	@ 0x26
 8008784:	2210      	movs	r2, #16
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e035      	b.n	80087f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800878a:	4b42      	ldr	r3, [pc, #264]	@ (8008894 <USBD_CDC_Init+0x1e4>)
 800878c:	7819      	ldrb	r1, [r3, #0]
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	2202      	movs	r2, #2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f002 fabe 	bl	800ad14 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008798:	4b3e      	ldr	r3, [pc, #248]	@ (8008894 <USBD_CDC_Init+0x1e4>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 020f 	and.w	r2, r3, #15
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3324      	adds	r3, #36	@ 0x24
 80087ae:	2201      	movs	r2, #1
 80087b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087b2:	4b39      	ldr	r3, [pc, #228]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 80087b4:	7819      	ldrb	r1, [r3, #0]
 80087b6:	2340      	movs	r3, #64	@ 0x40
 80087b8:	2202      	movs	r2, #2
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f002 faaa 	bl	800ad14 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087c0:	4b35      	ldr	r3, [pc, #212]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 020f 	and.w	r2, r3, #15
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087d8:	2201      	movs	r2, #1
 80087da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087dc:	4b2f      	ldr	r3, [pc, #188]	@ (800889c <USBD_CDC_Init+0x1ec>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	3326      	adds	r3, #38	@ 0x26
 80087f2:	2210      	movs	r2, #16
 80087f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087f6:	4b29      	ldr	r3, [pc, #164]	@ (800889c <USBD_CDC_Init+0x1ec>)
 80087f8:	7819      	ldrb	r1, [r3, #0]
 80087fa:	2308      	movs	r3, #8
 80087fc:	2203      	movs	r2, #3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 fa88 	bl	800ad14 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008804:	4b25      	ldr	r3, [pc, #148]	@ (800889c <USBD_CDC_Init+0x1ec>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 020f 	and.w	r2, r3, #15
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	2201      	movs	r2, #1
 800881c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	33b0      	adds	r3, #176	@ 0xb0
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008854:	2302      	movs	r3, #2
 8008856:	e018      	b.n	800888a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7c1b      	ldrb	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008860:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 8008862:	7819      	ldrb	r1, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800886a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f002 fbca 	bl	800b008 <USBD_LL_PrepareReceive>
 8008874:	e008      	b.n	8008888 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008876:	4b08      	ldr	r3, [pc, #32]	@ (8008898 <USBD_CDC_Init+0x1e8>)
 8008878:	7819      	ldrb	r1, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f002 fbc0 	bl	800b008 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000097 	.word	0x20000097
 8008898:	20000098 	.word	0x20000098
 800889c:	20000099 	.word	0x20000099

080088a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80088ac:	4b3a      	ldr	r3, [pc, #232]	@ (8008998 <USBD_CDC_DeInit+0xf8>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f002 fa6c 	bl	800ad90 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80088b8:	4b37      	ldr	r3, [pc, #220]	@ (8008998 <USBD_CDC_DeInit+0xf8>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	f003 020f 	and.w	r2, r3, #15
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	3324      	adds	r3, #36	@ 0x24
 80088ce:	2200      	movs	r2, #0
 80088d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80088d2:	4b32      	ldr	r3, [pc, #200]	@ (800899c <USBD_CDC_DeInit+0xfc>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f002 fa59 	bl	800ad90 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80088de:	4b2f      	ldr	r3, [pc, #188]	@ (800899c <USBD_CDC_DeInit+0xfc>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 020f 	and.w	r2, r3, #15
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088f6:	2200      	movs	r2, #0
 80088f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80088fa:	4b29      	ldr	r3, [pc, #164]	@ (80089a0 <USBD_CDC_DeInit+0x100>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f002 fa45 	bl	800ad90 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008906:	4b26      	ldr	r3, [pc, #152]	@ (80089a0 <USBD_CDC_DeInit+0x100>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 020f 	and.w	r2, r3, #15
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	3324      	adds	r3, #36	@ 0x24
 800891c:	2200      	movs	r2, #0
 800891e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008920:	4b1f      	ldr	r3, [pc, #124]	@ (80089a0 <USBD_CDC_DeInit+0x100>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 020f 	and.w	r2, r3, #15
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	3326      	adds	r3, #38	@ 0x26
 8008936:	2200      	movs	r2, #0
 8008938:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	32b0      	adds	r2, #176	@ 0xb0
 8008944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01f      	beq.n	800898c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	33b0      	adds	r3, #176	@ 0xb0
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	32b0      	adds	r2, #176	@ 0xb0
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	4618      	mov	r0, r3
 8008970:	f002 fbda 	bl	800b128 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32b0      	adds	r2, #176	@ 0xb0
 800897e:	2100      	movs	r1, #0
 8008980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000097 	.word	0x20000097
 800899c:	20000098 	.word	0x20000098
 80089a0:	20000099 	.word	0x20000099

080089a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	32b0      	adds	r2, #176	@ 0xb0
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e0bf      	b.n	8008b54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d050      	beq.n	8008a82 <USBD_CDC_Setup+0xde>
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	f040 80af 	bne.w	8008b44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	88db      	ldrh	r3, [r3, #6]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d03a      	beq.n	8008a64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da1b      	bge.n	8008a30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	33b0      	adds	r3, #176	@ 0xb0
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	88d2      	ldrh	r2, [r2, #6]
 8008a14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	88db      	ldrh	r3, [r3, #6]
 8008a1a:	2b07      	cmp	r3, #7
 8008a1c:	bf28      	it	cs
 8008a1e:	2307      	movcs	r3, #7
 8008a20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	89fa      	ldrh	r2, [r7, #14]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 fd2b 	bl	800a484 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a2e:	e090      	b.n	8008b52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	785a      	ldrb	r2, [r3, #1]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a40:	d803      	bhi.n	8008a4a <USBD_CDC_Setup+0xa6>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88db      	ldrh	r3, [r3, #6]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	e000      	b.n	8008a4c <USBD_CDC_Setup+0xa8>
 8008a4a:	2240      	movs	r2, #64	@ 0x40
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a52:	6939      	ldr	r1, [r7, #16]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fd3d 	bl	800a4dc <USBD_CtlPrepareRx>
      break;
 8008a62:	e076      	b.n	8008b52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	33b0      	adds	r3, #176	@ 0xb0
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	7850      	ldrb	r0, [r2, #1]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	4798      	blx	r3
      break;
 8008a80:	e067      	b.n	8008b52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	d851      	bhi.n	8008b2e <USBD_CDC_Setup+0x18a>
 8008a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <USBD_CDC_Setup+0xec>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ac1 	.word	0x08008ac1
 8008a94:	08008b3d 	.word	0x08008b3d
 8008a98:	08008b2f 	.word	0x08008b2f
 8008a9c:	08008b2f 	.word	0x08008b2f
 8008aa0:	08008b2f 	.word	0x08008b2f
 8008aa4:	08008b2f 	.word	0x08008b2f
 8008aa8:	08008b2f 	.word	0x08008b2f
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b2f 	.word	0x08008b2f
 8008ab4:	08008b2f 	.word	0x08008b2f
 8008ab8:	08008aeb 	.word	0x08008aeb
 8008abc:	08008b15 	.word	0x08008b15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d107      	bne.n	8008adc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008acc:	f107 030a 	add.w	r3, r7, #10
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fcd5 	bl	800a484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ada:	e032      	b.n	8008b42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fc53 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae8:	e02b      	b.n	8008b42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d107      	bne.n	8008b06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008af6:	f107 030d 	add.w	r3, r7, #13
 8008afa:	2201      	movs	r2, #1
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fcc0 	bl	800a484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b04:	e01d      	b.n	8008b42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fc3e 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	75fb      	strb	r3, [r7, #23]
          break;
 8008b12:	e016      	b.n	8008b42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d00f      	beq.n	8008b40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 fc31 	bl	800a38a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b2c:	e008      	b.n	8008b40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fc2a 	bl	800a38a <USBD_CtlError>
          ret = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	75fb      	strb	r3, [r7, #23]
          break;
 8008b3a:	e002      	b.n	8008b42 <USBD_CDC_Setup+0x19e>
          break;
 8008b3c:	bf00      	nop
 8008b3e:	e008      	b.n	8008b52 <USBD_CDC_Setup+0x1ae>
          break;
 8008b40:	bf00      	nop
      }
      break;
 8008b42:	e006      	b.n	8008b52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fc1f 	bl	800a38a <USBD_CtlError>
      ret = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b50:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32b0      	adds	r2, #176	@ 0xb0
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e065      	b.n	8008c52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	32b0      	adds	r2, #176	@ 0xb0
 8008b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	f003 020f 	and.w	r2, r3, #15
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	3318      	adds	r3, #24
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02f      	beq.n	8008c10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	f003 020f 	and.w	r2, r3, #15
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	3318      	adds	r3, #24
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	78fb      	ldrb	r3, [r7, #3]
 8008bc8:	f003 010f 	and.w	r1, r3, #15
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	4403      	add	r3, r0
 8008bd8:	3320      	adds	r3, #32
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d112      	bne.n	8008c10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	f003 020f 	and.w	r2, r3, #15
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c02:	78f9      	ldrb	r1, [r7, #3]
 8008c04:	2300      	movs	r3, #0
 8008c06:	2200      	movs	r2, #0
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f002 f9c5 	bl	800af98 <USBD_LL_Transmit>
 8008c0e:	e01f      	b.n	8008c50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	33b0      	adds	r3, #176	@ 0xb0
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	33b0      	adds	r3, #176	@ 0xb0
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	32b0      	adds	r2, #176	@ 0xb0
 8008c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	32b0      	adds	r2, #176	@ 0xb0
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e01a      	b.n	8008cc2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f002 f9f1 	bl	800b078 <USBD_LL_GetRxDataSize>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	33b0      	adds	r3, #176	@ 0xb0
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	32b0      	adds	r2, #176	@ 0xb0
 8008cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e024      	b.n	8008d36 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	33b0      	adds	r3, #176	@ 0xb0
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d019      	beq.n	8008d34 <USBD_CDC_EP0_RxReady+0x6a>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008d06:	2bff      	cmp	r3, #255	@ 0xff
 8008d08:	d014      	beq.n	8008d34 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	33b0      	adds	r3, #176	@ 0xb0
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	22ff      	movs	r2, #255	@ 0xff
 8008d30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d48:	2182      	movs	r1, #130	@ 0x82
 8008d4a:	4818      	ldr	r0, [pc, #96]	@ (8008dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d4c:	f000 fcbd 	bl	80096ca <USBD_GetEpDesc>
 8008d50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d52:	2101      	movs	r1, #1
 8008d54:	4815      	ldr	r0, [pc, #84]	@ (8008dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d56:	f000 fcb8 	bl	80096ca <USBD_GetEpDesc>
 8008d5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d5c:	2181      	movs	r1, #129	@ 0x81
 8008d5e:	4813      	ldr	r0, [pc, #76]	@ (8008dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d60:	f000 fcb3 	bl	80096ca <USBD_GetEpDesc>
 8008d64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2210      	movs	r2, #16
 8008d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d006      	beq.n	8008d86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d80:	711a      	strb	r2, [r3, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d006      	beq.n	8008d9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d94:	711a      	strb	r2, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2243      	movs	r2, #67	@ 0x43
 8008d9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008da0:	4b02      	ldr	r3, [pc, #8]	@ (8008dac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000054 	.word	0x20000054

08008db0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008db8:	2182      	movs	r1, #130	@ 0x82
 8008dba:	4818      	ldr	r0, [pc, #96]	@ (8008e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dbc:	f000 fc85 	bl	80096ca <USBD_GetEpDesc>
 8008dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	4815      	ldr	r0, [pc, #84]	@ (8008e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dc6:	f000 fc80 	bl	80096ca <USBD_GetEpDesc>
 8008dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dcc:	2181      	movs	r1, #129	@ 0x81
 8008dce:	4813      	ldr	r0, [pc, #76]	@ (8008e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008dd0:	f000 fc7b 	bl	80096ca <USBD_GetEpDesc>
 8008dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2210      	movs	r2, #16
 8008de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	711a      	strb	r2, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f042 0202 	orr.w	r2, r2, #2
 8008df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	711a      	strb	r2, [r3, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f042 0202 	orr.w	r2, r2, #2
 8008e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2243      	movs	r2, #67	@ 0x43
 8008e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e10:	4b02      	ldr	r3, [pc, #8]	@ (8008e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000054 	.word	0x20000054

08008e20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e28:	2182      	movs	r1, #130	@ 0x82
 8008e2a:	4818      	ldr	r0, [pc, #96]	@ (8008e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e2c:	f000 fc4d 	bl	80096ca <USBD_GetEpDesc>
 8008e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4815      	ldr	r0, [pc, #84]	@ (8008e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e36:	f000 fc48 	bl	80096ca <USBD_GetEpDesc>
 8008e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e3c:	2181      	movs	r1, #129	@ 0x81
 8008e3e:	4813      	ldr	r0, [pc, #76]	@ (8008e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e40:	f000 fc43 	bl	80096ca <USBD_GetEpDesc>
 8008e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e60:	711a      	strb	r2, [r3, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e74:	711a      	strb	r2, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2243      	movs	r2, #67	@ 0x43
 8008e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000054 	.word	0x20000054

08008e90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	220a      	movs	r2, #10
 8008e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e9e:	4b03      	ldr	r3, [pc, #12]	@ (8008eac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20000010 	.word	0x20000010

08008eb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e009      	b.n	8008ed8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	33b0      	adds	r3, #176	@ 0xb0
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	32b0      	adds	r2, #176	@ 0xb0
 8008efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e008      	b.n	8008f1c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	371c      	adds	r7, #28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	32b0      	adds	r2, #176	@ 0xb0
 8008f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e004      	b.n	8008f56 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32b0      	adds	r2, #176	@ 0xb0
 8008f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e025      	b.n	8008fd6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11f      	bne.n	8008fd4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008f9c:	4b10      	ldr	r3, [pc, #64]	@ (8008fe0 <USBD_CDC_TransmitPacket+0x7c>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4403      	add	r3, r0
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008fba:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <USBD_CDC_TransmitPacket+0x7c>)
 8008fbc:	7819      	ldrb	r1, [r3, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f001 ffe4 	bl	800af98 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000097 	.word	0x20000097

08008fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32b0      	adds	r2, #176	@ 0xb0
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	32b0      	adds	r2, #176	@ 0xb0
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800900e:	2303      	movs	r3, #3
 8009010:	e018      	b.n	8009044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	7c1b      	ldrb	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800901a:	4b0c      	ldr	r3, [pc, #48]	@ (800904c <USBD_CDC_ReceivePacket+0x68>)
 800901c:	7819      	ldrb	r1, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 ffed 	bl	800b008 <USBD_LL_PrepareReceive>
 800902e:	e008      	b.n	8009042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <USBD_CDC_ReceivePacket+0x68>)
 8009032:	7819      	ldrb	r1, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800903a:	2340      	movs	r3, #64	@ 0x40
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 ffe3 	bl	800b008 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000098 	.word	0x20000098

08009050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e01f      	b.n	80090a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	79fa      	ldrb	r2, [r7, #7]
 800909a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f001 fda5 	bl	800abec <USBD_LL_Init>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e025      	b.n	8009114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32ae      	adds	r2, #174	@ 0xae
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00f      	beq.n	8009104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	32ae      	adds	r2, #174	@ 0xae
 80090ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f4:	f107 020e 	add.w	r2, r7, #14
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	4602      	mov	r2, r0
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fdc3 	bl	800acb0 <USBD_LL_Start>
 800912a:	4603      	mov	r3, r0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	78fa      	ldrb	r2, [r7, #3]
 800916e:	4611      	mov	r1, r2
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	4798      	blx	r3
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091a8:	2303      	movs	r3, #3
 80091aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 f8a4 	bl	800a316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80091dc:	461a      	mov	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091ea:	f003 031f 	and.w	r3, r3, #31
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d01a      	beq.n	8009228 <USBD_LL_SetupStage+0x72>
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d822      	bhi.n	800923c <USBD_LL_SetupStage+0x86>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d002      	beq.n	8009200 <USBD_LL_SetupStage+0x4a>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d00a      	beq.n	8009214 <USBD_LL_SetupStage+0x5e>
 80091fe:	e01d      	b.n	800923c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fad1 	bl	80097b0 <USBD_StdDevReq>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
      break;
 8009212:	e020      	b.n	8009256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fb39 	bl	8009894 <USBD_StdItfReq>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
      break;
 8009226:	e016      	b.n	8009256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fb9b 	bl	800996c <USBD_StdEPReq>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
      break;
 800923a:	e00c      	b.n	8009256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 fdd6 	bl	800adfc <USBD_LL_StallEP>
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]
      break;
 8009254:	bf00      	nop
  }

  return ret;
 8009256:	7bfb      	ldrb	r3, [r7, #15]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	460b      	mov	r3, r1
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d16e      	bne.n	8009356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800927e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009286:	2b03      	cmp	r3, #3
 8009288:	f040 8098 	bne.w	80093bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	429a      	cmp	r2, r3
 8009296:	d913      	bls.n	80092c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	1ad2      	subs	r2, r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bf28      	it	cs
 80092b2:	4613      	movcs	r3, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f001 f92c 	bl	800a516 <USBD_CtlContinueRx>
 80092be:	e07d      	b.n	80093bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092c6:	f003 031f 	and.w	r3, r3, #31
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d014      	beq.n	80092f8 <USBD_LL_DataOutStage+0x98>
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d81d      	bhi.n	800930e <USBD_LL_DataOutStage+0xae>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <USBD_LL_DataOutStage+0x7c>
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d003      	beq.n	80092e2 <USBD_LL_DataOutStage+0x82>
 80092da:	e018      	b.n	800930e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	75bb      	strb	r3, [r7, #22]
            break;
 80092e0:	e018      	b.n	8009314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f9d2 	bl	8009696 <USBD_CoreFindIF>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75bb      	strb	r3, [r7, #22]
            break;
 80092f6:	e00d      	b.n	8009314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 f9d4 	bl	80096b0 <USBD_CoreFindEP>
 8009308:	4603      	mov	r3, r0
 800930a:	75bb      	strb	r3, [r7, #22]
            break;
 800930c:	e002      	b.n	8009314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	75bb      	strb	r3, [r7, #22]
            break;
 8009312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009314:	7dbb      	ldrb	r3, [r7, #22]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d119      	bne.n	800934e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d113      	bne.n	800934e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009326:	7dba      	ldrb	r2, [r7, #22]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	32ae      	adds	r2, #174	@ 0xae
 800932c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009336:	7dba      	ldrb	r2, [r7, #22]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800933e:	7dba      	ldrb	r2, [r7, #22]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	32ae      	adds	r2, #174	@ 0xae
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f001 f8f2 	bl	800a538 <USBD_CtlSendStatus>
 8009354:	e032      	b.n	80093bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009356:	7afb      	ldrb	r3, [r7, #11]
 8009358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f9a5 	bl	80096b0 <USBD_CoreFindEP>
 8009366:	4603      	mov	r3, r0
 8009368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800936a:	7dbb      	ldrb	r3, [r7, #22]
 800936c:	2bff      	cmp	r3, #255	@ 0xff
 800936e:	d025      	beq.n	80093bc <USBD_LL_DataOutStage+0x15c>
 8009370:	7dbb      	ldrb	r3, [r7, #22]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d122      	bne.n	80093bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b03      	cmp	r3, #3
 8009380:	d117      	bne.n	80093b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009382:	7dba      	ldrb	r2, [r7, #22]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	32ae      	adds	r2, #174	@ 0xae
 8009388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00f      	beq.n	80093b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009392:	7dba      	ldrb	r2, [r7, #22]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800939a:	7dba      	ldrb	r2, [r7, #22]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	32ae      	adds	r2, #174	@ 0xae
 80093a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	7afa      	ldrb	r2, [r7, #11]
 80093a8:	4611      	mov	r1, r2
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	4798      	blx	r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	e000      	b.n	80093be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	460b      	mov	r3, r1
 80093d0:	607a      	str	r2, [r7, #4]
 80093d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d16f      	bne.n	80094ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3314      	adds	r3, #20
 80093de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d15a      	bne.n	80094a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d914      	bls.n	8009420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	461a      	mov	r2, r3
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f001 f854 	bl	800a4ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009412:	2300      	movs	r3, #0
 8009414:	2200      	movs	r2, #0
 8009416:	2100      	movs	r1, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f001 fdf5 	bl	800b008 <USBD_LL_PrepareReceive>
 800941e:	e03f      	b.n	80094a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	68da      	ldr	r2, [r3, #12]
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	429a      	cmp	r2, r3
 800942a:	d11c      	bne.n	8009466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009434:	429a      	cmp	r2, r3
 8009436:	d316      	bcc.n	8009466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009442:	429a      	cmp	r2, r3
 8009444:	d20f      	bcs.n	8009466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009446:	2200      	movs	r2, #0
 8009448:	2100      	movs	r1, #0
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f001 f835 	bl	800a4ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	2100      	movs	r1, #0
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f001 fdd2 	bl	800b008 <USBD_LL_PrepareReceive>
 8009464:	e01c      	b.n	80094a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b03      	cmp	r3, #3
 8009470:	d10f      	bne.n	8009492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009492:	2180      	movs	r1, #128	@ 0x80
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f001 fcb1 	bl	800adfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f001 f85f 	bl	800a55e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d03a      	beq.n	8009520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fe42 	bl	8009134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094b8:	e032      	b.n	8009520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	4619      	mov	r1, r3
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f8f3 	bl	80096b0 <USBD_CoreFindEP>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	2bff      	cmp	r3, #255	@ 0xff
 80094d2:	d025      	beq.n	8009520 <USBD_LL_DataInStage+0x15a>
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d122      	bne.n	8009520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d11c      	bne.n	8009520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80094e6:	7dfa      	ldrb	r2, [r7, #23]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	32ae      	adds	r2, #174	@ 0xae
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d014      	beq.n	8009520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80094f6:	7dfa      	ldrb	r2, [r7, #23]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80094fe:	7dfa      	ldrb	r2, [r7, #23]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	32ae      	adds	r2, #174	@ 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	7afa      	ldrb	r2, [r7, #11]
 800950c:	4611      	mov	r1, r2
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
 8009512:	4603      	mov	r3, r0
 8009514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009516:	7dbb      	ldrb	r3, [r7, #22]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800951c:	7dbb      	ldrb	r3, [r7, #22]
 800951e:	e000      	b.n	8009522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009562:	2b00      	cmp	r3, #0
 8009564:	d014      	beq.n	8009590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00e      	beq.n	8009590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6852      	ldr	r2, [r2, #4]
 800957e:	b2d2      	uxtb	r2, r2
 8009580:	4611      	mov	r1, r2
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800958c:	2303      	movs	r3, #3
 800958e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009590:	2340      	movs	r3, #64	@ 0x40
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fbbc 	bl	800ad14 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2240      	movs	r2, #64	@ 0x40
 80095a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ac:	2340      	movs	r3, #64	@ 0x40
 80095ae:	2200      	movs	r2, #0
 80095b0:	2180      	movs	r1, #128	@ 0x80
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fbae 	bl	800ad14 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2240      	movs	r2, #64	@ 0x40
 80095c2:	621a      	str	r2, [r3, #32]

  return ret;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	78fa      	ldrb	r2, [r7, #3]
 80095de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d006      	beq.n	8009610 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009608:	b2da      	uxtb	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2204      	movs	r2, #4
 8009614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b04      	cmp	r3, #4
 8009638:	d106      	bne.n	8009648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009640:	b2da      	uxtb	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b03      	cmp	r3, #3
 8009668:	d110      	bne.n	800968c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00b      	beq.n	800968c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80096bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	885b      	ldrh	r3, [r3, #2]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	7812      	ldrb	r2, [r2, #0]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d91f      	bls.n	8009730 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80096f6:	e013      	b.n	8009720 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80096f8:	f107 030a 	add.w	r3, r7, #10
 80096fc:	4619      	mov	r1, r3
 80096fe:	6978      	ldr	r0, [r7, #20]
 8009700:	f000 f81b 	bl	800973a <USBD_GetNextDesc>
 8009704:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b05      	cmp	r3, #5
 800970c:	d108      	bne.n	8009720 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	789b      	ldrb	r3, [r3, #2]
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	429a      	cmp	r2, r3
 800971a:	d008      	beq.n	800972e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	b29a      	uxth	r2, r3
 8009726:	897b      	ldrh	r3, [r7, #10]
 8009728:	429a      	cmp	r2, r3
 800972a:	d8e5      	bhi.n	80096f8 <USBD_GetEpDesc+0x2e>
 800972c:	e000      	b.n	8009730 <USBD_GetEpDesc+0x66>
          break;
 800972e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009730:	693b      	ldr	r3, [r7, #16]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800973a:	b480      	push	{r7}
 800973c:	b085      	sub	sp, #20
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	4413      	add	r3, r2
 8009752:	b29a      	uxth	r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4413      	add	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009772:	b480      	push	{r7}
 8009774:	b087      	sub	sp, #28
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3301      	adds	r3, #1
 8009788:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009790:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009794:	021b      	lsls	r3, r3, #8
 8009796:	b21a      	sxth	r2, r3
 8009798:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800979c:	4313      	orrs	r3, r2
 800979e:	b21b      	sxth	r3, r3
 80097a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80097a2:	89fb      	ldrh	r3, [r7, #14]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80097c6:	2b40      	cmp	r3, #64	@ 0x40
 80097c8:	d005      	beq.n	80097d6 <USBD_StdDevReq+0x26>
 80097ca:	2b40      	cmp	r3, #64	@ 0x40
 80097cc:	d857      	bhi.n	800987e <USBD_StdDevReq+0xce>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00f      	beq.n	80097f2 <USBD_StdDevReq+0x42>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d153      	bne.n	800987e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	32ae      	adds	r2, #174	@ 0xae
 80097e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
      break;
 80097f0:	e04a      	b.n	8009888 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	2b09      	cmp	r3, #9
 80097f8:	d83b      	bhi.n	8009872 <USBD_StdDevReq+0xc2>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <USBD_StdDevReq+0x50>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	08009855 	.word	0x08009855
 8009804:	08009869 	.word	0x08009869
 8009808:	08009873 	.word	0x08009873
 800980c:	0800985f 	.word	0x0800985f
 8009810:	08009873 	.word	0x08009873
 8009814:	08009833 	.word	0x08009833
 8009818:	08009829 	.word	0x08009829
 800981c:	08009873 	.word	0x08009873
 8009820:	0800984b 	.word	0x0800984b
 8009824:	0800983d 	.word	0x0800983d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa3c 	bl	8009ca8 <USBD_GetDescriptor>
          break;
 8009830:	e024      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fbcb 	bl	8009fd0 <USBD_SetAddress>
          break;
 800983a:	e01f      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fc0a 	bl	800a058 <USBD_SetConfig>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
          break;
 8009848:	e018      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fcad 	bl	800a1ac <USBD_GetConfig>
          break;
 8009852:	e013      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fcde 	bl	800a218 <USBD_GetStatus>
          break;
 800985c:	e00e      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fd0d 	bl	800a280 <USBD_SetFeature>
          break;
 8009866:	e009      	b.n	800987c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fd31 	bl	800a2d2 <USBD_ClrFeature>
          break;
 8009870:	e004      	b.n	800987c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fd88 	bl	800a38a <USBD_CtlError>
          break;
 800987a:	bf00      	nop
      }
      break;
 800987c:	e004      	b.n	8009888 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fd82 	bl	800a38a <USBD_CtlError>
      break;
 8009886:	bf00      	nop
  }

  return ret;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop

08009894 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098aa:	2b40      	cmp	r3, #64	@ 0x40
 80098ac:	d005      	beq.n	80098ba <USBD_StdItfReq+0x26>
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d852      	bhi.n	8009958 <USBD_StdItfReq+0xc4>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <USBD_StdItfReq+0x26>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	d14e      	bne.n	8009958 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d840      	bhi.n	800994a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	889b      	ldrh	r3, [r3, #4]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d836      	bhi.n	8009940 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	889b      	ldrh	r3, [r3, #4]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fedb 	bl	8009696 <USBD_CoreFindIF>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2bff      	cmp	r3, #255	@ 0xff
 80098e8:	d01d      	beq.n	8009926 <USBD_StdItfReq+0x92>
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11a      	bne.n	8009926 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80098f0:	7bba      	ldrb	r2, [r7, #14]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	@ 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00f      	beq.n	8009920 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009900:	7bba      	ldrb	r2, [r7, #14]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009908:	7bba      	ldrb	r2, [r7, #14]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	32ae      	adds	r2, #174	@ 0xae
 800990e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800991e:	e004      	b.n	800992a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009920:	2303      	movs	r3, #3
 8009922:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009924:	e001      	b.n	800992a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009926:	2303      	movs	r3, #3
 8009928:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	88db      	ldrh	r3, [r3, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d110      	bne.n	8009954 <USBD_StdItfReq+0xc0>
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10d      	bne.n	8009954 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fdfd 	bl	800a538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800993e:	e009      	b.n	8009954 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fd21 	bl	800a38a <USBD_CtlError>
          break;
 8009948:	e004      	b.n	8009954 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd1c 	bl	800a38a <USBD_CtlError>
          break;
 8009952:	e000      	b.n	8009956 <USBD_StdItfReq+0xc2>
          break;
 8009954:	bf00      	nop
      }
      break;
 8009956:	e004      	b.n	8009962 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fd15 	bl	800a38a <USBD_CtlError>
      break;
 8009960:	bf00      	nop
  }

  return ret;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	889b      	ldrh	r3, [r3, #4]
 800997e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009988:	2b40      	cmp	r3, #64	@ 0x40
 800998a:	d007      	beq.n	800999c <USBD_StdEPReq+0x30>
 800998c:	2b40      	cmp	r3, #64	@ 0x40
 800998e:	f200 817f 	bhi.w	8009c90 <USBD_StdEPReq+0x324>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d02a      	beq.n	80099ec <USBD_StdEPReq+0x80>
 8009996:	2b20      	cmp	r3, #32
 8009998:	f040 817a 	bne.w	8009c90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff fe85 	bl	80096b0 <USBD_CoreFindEP>
 80099a6:	4603      	mov	r3, r0
 80099a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099aa:	7b7b      	ldrb	r3, [r7, #13]
 80099ac:	2bff      	cmp	r3, #255	@ 0xff
 80099ae:	f000 8174 	beq.w	8009c9a <USBD_StdEPReq+0x32e>
 80099b2:	7b7b      	ldrb	r3, [r7, #13]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f040 8170 	bne.w	8009c9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80099ba:	7b7a      	ldrb	r2, [r7, #13]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80099c2:	7b7a      	ldrb	r2, [r7, #13]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32ae      	adds	r2, #174	@ 0xae
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 8163 	beq.w	8009c9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80099d4:	7b7a      	ldrb	r2, [r7, #13]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	32ae      	adds	r2, #174	@ 0xae
 80099da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	4798      	blx	r3
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099ea:	e156      	b.n	8009c9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	785b      	ldrb	r3, [r3, #1]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d008      	beq.n	8009a06 <USBD_StdEPReq+0x9a>
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	f300 8145 	bgt.w	8009c84 <USBD_StdEPReq+0x318>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 809b 	beq.w	8009b36 <USBD_StdEPReq+0x1ca>
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d03c      	beq.n	8009a7e <USBD_StdEPReq+0x112>
 8009a04:	e13e      	b.n	8009c84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d002      	beq.n	8009a18 <USBD_StdEPReq+0xac>
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d016      	beq.n	8009a44 <USBD_StdEPReq+0xd8>
 8009a16:	e02c      	b.n	8009a72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00d      	beq.n	8009a3a <USBD_StdEPReq+0xce>
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b80      	cmp	r3, #128	@ 0x80
 8009a22:	d00a      	beq.n	8009a3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	4619      	mov	r1, r3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f9e7 	bl	800adfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a2e:	2180      	movs	r1, #128	@ 0x80
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f001 f9e3 	bl	800adfc <USBD_LL_StallEP>
 8009a36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a38:	e020      	b.n	8009a7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fca4 	bl	800a38a <USBD_CtlError>
              break;
 8009a42:	e01b      	b.n	8009a7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	885b      	ldrh	r3, [r3, #2]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10e      	bne.n	8009a6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <USBD_StdEPReq+0xfe>
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b80      	cmp	r3, #128	@ 0x80
 8009a56:	d008      	beq.n	8009a6a <USBD_StdEPReq+0xfe>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	88db      	ldrh	r3, [r3, #6]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 f9c9 	bl	800adfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fd64 	bl	800a538 <USBD_CtlSendStatus>

              break;
 8009a70:	e004      	b.n	8009a7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc88 	bl	800a38a <USBD_CtlError>
              break;
 8009a7a:	bf00      	nop
          }
          break;
 8009a7c:	e107      	b.n	8009c8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d002      	beq.n	8009a90 <USBD_StdEPReq+0x124>
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d016      	beq.n	8009abc <USBD_StdEPReq+0x150>
 8009a8e:	e04b      	b.n	8009b28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a90:	7bbb      	ldrb	r3, [r7, #14]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00d      	beq.n	8009ab2 <USBD_StdEPReq+0x146>
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2b80      	cmp	r3, #128	@ 0x80
 8009a9a:	d00a      	beq.n	8009ab2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f9ab 	bl	800adfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009aa6:	2180      	movs	r1, #128	@ 0x80
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f9a7 	bl	800adfc <USBD_LL_StallEP>
 8009aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ab0:	e040      	b.n	8009b34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fc68 	bl	800a38a <USBD_CtlError>
              break;
 8009aba:	e03b      	b.n	8009b34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	885b      	ldrh	r3, [r3, #2]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d136      	bne.n	8009b32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 f9c8 	bl	800ae68 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fd2d 	bl	800a538 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff fde4 	bl	80096b0 <USBD_CoreFindEP>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aec:	7b7b      	ldrb	r3, [r7, #13]
 8009aee:	2bff      	cmp	r3, #255	@ 0xff
 8009af0:	d01f      	beq.n	8009b32 <USBD_StdEPReq+0x1c6>
 8009af2:	7b7b      	ldrb	r3, [r7, #13]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11c      	bne.n	8009b32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009b00:	7b7a      	ldrb	r2, [r7, #13]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	32ae      	adds	r2, #174	@ 0xae
 8009b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d010      	beq.n	8009b32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b10:	7b7a      	ldrb	r2, [r7, #13]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	32ae      	adds	r2, #174	@ 0xae
 8009b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009b26:	e004      	b.n	8009b32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fc2d 	bl	800a38a <USBD_CtlError>
              break;
 8009b30:	e000      	b.n	8009b34 <USBD_StdEPReq+0x1c8>
              break;
 8009b32:	bf00      	nop
          }
          break;
 8009b34:	e0ab      	b.n	8009c8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d002      	beq.n	8009b48 <USBD_StdEPReq+0x1dc>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d032      	beq.n	8009bac <USBD_StdEPReq+0x240>
 8009b46:	e097      	b.n	8009c78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <USBD_StdEPReq+0x1f2>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b80      	cmp	r3, #128	@ 0x80
 8009b52:	d004      	beq.n	8009b5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fc17 	bl	800a38a <USBD_CtlError>
                break;
 8009b5c:	e091      	b.n	8009c82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0b      	bge.n	8009b7e <USBD_StdEPReq+0x212>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	3310      	adds	r3, #16
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4413      	add	r3, r2
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	e00b      	b.n	8009b96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fc6d 	bl	800a484 <USBD_CtlSendData>
              break;
 8009baa:	e06a      	b.n	8009c82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	da11      	bge.n	8009bd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	f003 020f 	and.w	r2, r3, #15
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3324      	adds	r3, #36	@ 0x24
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d117      	bne.n	8009bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fbda 	bl	800a38a <USBD_CtlError>
                  break;
 8009bd6:	e054      	b.n	8009c82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	f003 020f 	and.w	r2, r3, #15
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	4613      	mov	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	440b      	add	r3, r1
 8009bea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d104      	bne.n	8009bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fbc7 	bl	800a38a <USBD_CtlError>
                  break;
 8009bfc:	e041      	b.n	8009c82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da0b      	bge.n	8009c1e <USBD_StdEPReq+0x2b2>
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	3310      	adds	r3, #16
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	e00b      	b.n	8009c36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c24:	4613      	mov	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	4413      	add	r3, r2
 8009c34:	3304      	adds	r3, #4
 8009c36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <USBD_StdEPReq+0x2d8>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b80      	cmp	r3, #128	@ 0x80
 8009c42:	d103      	bne.n	8009c4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e00e      	b.n	8009c6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f93f 	bl	800aed4 <USBD_LL_IsStallEP>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e002      	b.n	8009c6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc07 	bl	800a484 <USBD_CtlSendData>
              break;
 8009c76:	e004      	b.n	8009c82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb85 	bl	800a38a <USBD_CtlError>
              break;
 8009c80:	bf00      	nop
          }
          break;
 8009c82:	e004      	b.n	8009c8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fb7f 	bl	800a38a <USBD_CtlError>
          break;
 8009c8c:	bf00      	nop
      }
      break;
 8009c8e:	e005      	b.n	8009c9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb79 	bl	800a38a <USBD_CtlError>
      break;
 8009c98:	e000      	b.n	8009c9c <USBD_StdEPReq+0x330>
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	2b0e      	cmp	r3, #14
 8009cca:	f200 8152 	bhi.w	8009f72 <USBD_GetDescriptor+0x2ca>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <USBD_GetDescriptor+0x2c>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009d45 	.word	0x08009d45
 8009cd8:	08009d5d 	.word	0x08009d5d
 8009cdc:	08009d9d 	.word	0x08009d9d
 8009ce0:	08009f73 	.word	0x08009f73
 8009ce4:	08009f73 	.word	0x08009f73
 8009ce8:	08009f13 	.word	0x08009f13
 8009cec:	08009f3f 	.word	0x08009f3f
 8009cf0:	08009f73 	.word	0x08009f73
 8009cf4:	08009f73 	.word	0x08009f73
 8009cf8:	08009f73 	.word	0x08009f73
 8009cfc:	08009f73 	.word	0x08009f73
 8009d00:	08009f73 	.word	0x08009f73
 8009d04:	08009f73 	.word	0x08009f73
 8009d08:	08009f73 	.word	0x08009f73
 8009d0c:	08009d11 	.word	0x08009d11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	7c12      	ldrb	r2, [r2, #16]
 8009d28:	f107 0108 	add.w	r1, r7, #8
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	4798      	blx	r3
 8009d30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d32:	e126      	b.n	8009f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009d34:	6839      	ldr	r1, [r7, #0]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fb27 	bl	800a38a <USBD_CtlError>
        err++;
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	72fb      	strb	r3, [r7, #11]
      break;
 8009d42:	e11e      	b.n	8009f82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7c12      	ldrb	r2, [r2, #16]
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
      break;
 8009d5a:	e112      	b.n	8009f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7c1b      	ldrb	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f107 0208 	add.w	r2, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009d7e:	e100      	b.n	8009f82 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	f107 0208 	add.w	r2, r7, #8
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	2202      	movs	r2, #2
 8009d98:	701a      	strb	r2, [r3, #0]
      break;
 8009d9a:	e0f2      	b.n	8009f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	885b      	ldrh	r3, [r3, #2]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b05      	cmp	r3, #5
 8009da4:	f200 80ac 	bhi.w	8009f00 <USBD_GetDescriptor+0x258>
 8009da8:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <USBD_GetDescriptor+0x108>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dfd 	.word	0x08009dfd
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e65 	.word	0x08009e65
 8009dc0:	08009e99 	.word	0x08009e99
 8009dc4:	08009ecd 	.word	0x08009ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	7c12      	ldrb	r2, [r2, #16]
 8009de0:	f107 0108 	add.w	r1, r7, #8
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dea:	e091      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 facb 	bl	800a38a <USBD_CtlError>
            err++;
 8009df4:	7afb      	ldrb	r3, [r7, #11]
 8009df6:	3301      	adds	r3, #1
 8009df8:	72fb      	strb	r3, [r7, #11]
          break;
 8009dfa:	e089      	b.n	8009f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00b      	beq.n	8009e20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	7c12      	ldrb	r2, [r2, #16]
 8009e14:	f107 0108 	add.w	r1, r7, #8
 8009e18:	4610      	mov	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e1e:	e077      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fab1 	bl	800a38a <USBD_CtlError>
            err++;
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e2e:	e06f      	b.n	8009f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	7c12      	ldrb	r2, [r2, #16]
 8009e48:	f107 0108 	add.w	r1, r7, #8
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e52:	e05d      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa97 	bl	800a38a <USBD_CtlError>
            err++;
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	72fb      	strb	r3, [r7, #11]
          break;
 8009e62:	e055      	b.n	8009f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	7c12      	ldrb	r2, [r2, #16]
 8009e7c:	f107 0108 	add.w	r1, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e86:	e043      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa7d 	bl	800a38a <USBD_CtlError>
            err++;
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	3301      	adds	r3, #1
 8009e94:	72fb      	strb	r3, [r7, #11]
          break;
 8009e96:	e03b      	b.n	8009f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e029      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa63 	bl	800a38a <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e021      	b.n	8009f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e00f      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa49 	bl	800a38a <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e007      	b.n	8009f10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa41 	bl	800a38a <USBD_CtlError>
          err++;
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f0e:	bf00      	nop
      }
      break;
 8009f10:	e037      	b.n	8009f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7c1b      	ldrb	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f22:	f107 0208 	add.w	r2, r7, #8
 8009f26:	4610      	mov	r0, r2
 8009f28:	4798      	blx	r3
 8009f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f2c:	e029      	b.n	8009f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa2a 	bl	800a38a <USBD_CtlError>
        err++;
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8009f3c:	e021      	b.n	8009f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	7c1b      	ldrb	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10d      	bne.n	8009f62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	f107 0208 	add.w	r2, r7, #8
 8009f52:	4610      	mov	r0, r2
 8009f54:	4798      	blx	r3
 8009f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	2207      	movs	r2, #7
 8009f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f60:	e00f      	b.n	8009f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa10 	bl	800a38a <USBD_CtlError>
        err++;
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f70:	e007      	b.n	8009f82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fa08 	bl	800a38a <USBD_CtlError>
      err++;
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f80:	bf00      	nop
  }

  if (err != 0U)
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11e      	bne.n	8009fc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	88db      	ldrh	r3, [r3, #6]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d016      	beq.n	8009fbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009f90:	893b      	ldrh	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00e      	beq.n	8009fb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	88da      	ldrh	r2, [r3, #6]
 8009f9a:	893b      	ldrh	r3, [r7, #8]
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	bf28      	it	cs
 8009fa0:	4613      	movcs	r3, r2
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fa6:	893b      	ldrh	r3, [r7, #8]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fa69 	bl	800a484 <USBD_CtlSendData>
 8009fb2:	e009      	b.n	8009fc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9e7 	bl	800a38a <USBD_CtlError>
 8009fbc:	e004      	b.n	8009fc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 faba 	bl	800a538 <USBD_CtlSendStatus>
 8009fc4:	e000      	b.n	8009fc8 <USBD_GetDescriptor+0x320>
    return;
 8009fc6:	bf00      	nop
  }
}
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop

08009fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	889b      	ldrh	r3, [r3, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d131      	bne.n	800a046 <USBD_SetAddress+0x76>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	88db      	ldrh	r3, [r3, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d12d      	bne.n	800a046 <USBD_SetAddress+0x76>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ff0:	d829      	bhi.n	800a046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d104      	bne.n	800a014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f9bc 	bl	800a38a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a012:	e01d      	b.n	800a050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7bfa      	ldrb	r2, [r7, #15]
 800a018:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 ff83 	bl	800af2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa86 	bl	800a538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d004      	beq.n	800a03c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03a:	e009      	b.n	800a050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a044:	e004      	b.n	800a050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f99e 	bl	800a38a <USBD_CtlError>
  }
}
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	885b      	ldrh	r3, [r3, #2]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	4b4e      	ldr	r3, [pc, #312]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a06e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a070:	4b4d      	ldr	r3, [pc, #308]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d905      	bls.n	800a084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f985 	bl	800a38a <USBD_CtlError>
    return USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e08c      	b.n	800a19e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d002      	beq.n	800a096 <USBD_SetConfig+0x3e>
 800a090:	2b03      	cmp	r3, #3
 800a092:	d029      	beq.n	800a0e8 <USBD_SetConfig+0x90>
 800a094:	e075      	b.n	800a182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a096:	4b44      	ldr	r3, [pc, #272]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d020      	beq.n	800a0e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a09e:	4b42      	ldr	r3, [pc, #264]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff f84b 	bl	800914a <USBD_SetClassConfig>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f962 	bl	800a38a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a0ce:	e065      	b.n	800a19c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fa31 	bl	800a538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a0de:	e05d      	b.n	800a19c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fa29 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a0e6:	e059      	b.n	800a19c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d112      	bne.n	800a116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a102:	4b29      	ldr	r3, [pc, #164]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff f83a 	bl	8009182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa12 	bl	800a538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a114:	e042      	b.n	800a19c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a116:	4b24      	ldr	r3, [pc, #144]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d02a      	beq.n	800a17a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff f828 	bl	8009182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a132:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a13c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff f801 	bl	800914a <USBD_SetClassConfig>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00f      	beq.n	800a172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f918 	bl	800a38a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff f80d 	bl	8009182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a170:	e014      	b.n	800a19c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9e0 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a178:	e010      	b.n	800a19c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f9dc 	bl	800a538 <USBD_CtlSendStatus>
      break;
 800a180:	e00c      	b.n	800a19c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f900 	bl	800a38a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a18a:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <USBD_SetConfig+0x150>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fe fff6 	bl	8009182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	73fb      	strb	r3, [r7, #15]
      break;
 800a19a:	bf00      	nop
  }

  return ret;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200005bc 	.word	0x200005bc

0800a1ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d004      	beq.n	800a1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8e2 	bl	800a38a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1c6:	e023      	b.n	800a210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	dc02      	bgt.n	800a1da <USBD_GetConfig+0x2e>
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc03      	bgt.n	800a1e0 <USBD_GetConfig+0x34>
 800a1d8:	e015      	b.n	800a206 <USBD_GetConfig+0x5a>
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d00b      	beq.n	800a1f6 <USBD_GetConfig+0x4a>
 800a1de:	e012      	b.n	800a206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f948 	bl	800a484 <USBD_CtlSendData>
        break;
 800a1f4:	e00c      	b.n	800a210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f940 	bl	800a484 <USBD_CtlSendData>
        break;
 800a204:	e004      	b.n	800a210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f8be 	bl	800a38a <USBD_CtlError>
        break;
 800a20e:	bf00      	nop
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	3b01      	subs	r3, #1
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d81e      	bhi.n	800a26e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	88db      	ldrh	r3, [r3, #6]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d004      	beq.n	800a242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8a5 	bl	800a38a <USBD_CtlError>
        break;
 800a240:	e01a      	b.n	800a278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	f043 0202 	orr.w	r2, r3, #2
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	330c      	adds	r3, #12
 800a262:	2202      	movs	r2, #2
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f90c 	bl	800a484 <USBD_CtlSendData>
      break;
 800a26c:	e004      	b.n	800a278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f88a 	bl	800a38a <USBD_CtlError>
      break;
 800a276:	bf00      	nop
  }
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d107      	bne.n	800a2a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f94c 	bl	800a538 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2a0:	e013      	b.n	800a2ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d10b      	bne.n	800a2c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	889b      	ldrh	r3, [r3, #4]
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f93c 	bl	800a538 <USBD_CtlSendStatus>
}
 800a2c0:	e003      	b.n	800a2ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f860 	bl	800a38a <USBD_CtlError>
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d80b      	bhi.n	800a302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d10c      	bne.n	800a30c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f91c 	bl	800a538 <USBD_CtlSendStatus>
      }
      break;
 800a300:	e004      	b.n	800a30c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f840 	bl	800a38a <USBD_CtlError>
      break;
 800a30a:	e000      	b.n	800a30e <USBD_ClrFeature+0x3c>
      break;
 800a30c:	bf00      	nop
  }
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff fa16 	bl	8009772 <SWAPBYTE>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fa09 	bl	8009772 <SWAPBYTE>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3301      	adds	r3, #1
 800a372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7ff f9fc 	bl	8009772 <SWAPBYTE>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	80da      	strh	r2, [r3, #6]
}
 800a382:	bf00      	nop
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a394:	2180      	movs	r1, #128	@ 0x80
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fd30 	bl	800adfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a39c:	2100      	movs	r1, #0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fd2c 	bl	800adfc <USBD_LL_StallEP>
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d042      	beq.n	800a448 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a3c6:	6938      	ldr	r0, [r7, #16]
 800a3c8:	f000 f842 	bl	800a450 <USBD_GetLen>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d6:	d808      	bhi.n	800a3ea <USBD_GetString+0x3e>
 800a3d8:	6938      	ldr	r0, [r7, #16]
 800a3da:	f000 f839 	bl	800a450 <USBD_GetLen>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	e001      	b.n	800a3ee <USBD_GetString+0x42>
 800a3ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7812      	ldrb	r2, [r2, #0]
 800a3fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	3301      	adds	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	2203      	movs	r2, #3
 800a40c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	3301      	adds	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a414:	e013      	b.n	800a43e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4413      	add	r3, r2
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3301      	adds	r3, #1
 800a426:	613b      	str	r3, [r7, #16]
    idx++;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
 800a42a:	3301      	adds	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	4413      	add	r3, r2
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
    idx++;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	3301      	adds	r3, #1
 800a43c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e7      	bne.n	800a416 <USBD_GetString+0x6a>
 800a446:	e000      	b.n	800a44a <USBD_GetString+0x9e>
    return;
 800a448:	bf00      	nop
  }
}
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a460:	e005      	b.n	800a46e <USBD_GetLen+0x1e>
  {
    len++;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	3301      	adds	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3301      	adds	r3, #1
 800a46c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f5      	bne.n	800a462 <USBD_GetLen+0x12>
  }

  return len;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2202      	movs	r2, #2
 800a494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 fd74 	bl	800af98 <USBD_LL_Transmit>

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fd63 	bl	800af98 <USBD_LL_Transmit>

  return USBD_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2203      	movs	r2, #3
 800a4ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 fd7e 	bl	800b008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f000 fd6d 	bl	800b008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2204      	movs	r2, #4
 800a544:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a548:	2300      	movs	r3, #0
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fd22 	bl	800af98 <USBD_LL_Transmit>

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2205      	movs	r2, #5
 800a56a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a56e:	2300      	movs	r3, #0
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fd47 	bl	800b008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a588:	2200      	movs	r2, #0
 800a58a:	4912      	ldr	r1, [pc, #72]	@ (800a5d4 <MX_USB_DEVICE_Init+0x50>)
 800a58c:	4812      	ldr	r0, [pc, #72]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a58e:	f7fe fd5f 	bl	8009050 <USBD_Init>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a598:	f7f7 fc34 	bl	8001e04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a59c:	490f      	ldr	r1, [pc, #60]	@ (800a5dc <MX_USB_DEVICE_Init+0x58>)
 800a59e:	480e      	ldr	r0, [pc, #56]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5a0:	f7fe fd86 	bl	80090b0 <USBD_RegisterClass>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5aa:	f7f7 fc2b 	bl	8001e04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5ae:	490c      	ldr	r1, [pc, #48]	@ (800a5e0 <MX_USB_DEVICE_Init+0x5c>)
 800a5b0:	4809      	ldr	r0, [pc, #36]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5b2:	f7fe fc7d 	bl	8008eb0 <USBD_CDC_RegisterInterface>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5bc:	f7f7 fc22 	bl	8001e04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5c0:	4805      	ldr	r0, [pc, #20]	@ (800a5d8 <MX_USB_DEVICE_Init+0x54>)
 800a5c2:	f7fe fdab 	bl	800911c <USBD_Start>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5cc:	f7f7 fc1a 	bl	8001e04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5d0:	bf00      	nop
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200000b0 	.word	0x200000b0
 800a5d8:	200005c0 	.word	0x200005c0
 800a5dc:	2000001c 	.word	0x2000001c
 800a5e0:	2000009c 	.word	0x2000009c

0800a5e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4905      	ldr	r1, [pc, #20]	@ (800a600 <CDC_Init_FS+0x1c>)
 800a5ec:	4805      	ldr	r0, [pc, #20]	@ (800a604 <CDC_Init_FS+0x20>)
 800a5ee:	f7fe fc79 	bl	8008ee4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5f2:	4905      	ldr	r1, [pc, #20]	@ (800a608 <CDC_Init_FS+0x24>)
 800a5f4:	4803      	ldr	r0, [pc, #12]	@ (800a604 <CDC_Init_FS+0x20>)
 800a5f6:	f7fe fc97 	bl	8008f28 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a5fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20000c9c 	.word	0x20000c9c
 800a604:	200005c0 	.word	0x200005c0
 800a608:	2000089c 	.word	0x2000089c

0800a60c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a612:	4618      	mov	r0, r3
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
 800a628:	4613      	mov	r3, r2
 800a62a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch(cmd)
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	2b23      	cmp	r3, #35	@ 0x23
 800a630:	d84a      	bhi.n	800a6c8 <CDC_Control_FS+0xac>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <CDC_Control_FS+0x1c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a6c9 	.word	0x0800a6c9
 800a63c:	0800a6c9 	.word	0x0800a6c9
 800a640:	0800a6c9 	.word	0x0800a6c9
 800a644:	0800a6c9 	.word	0x0800a6c9
 800a648:	0800a6c9 	.word	0x0800a6c9
 800a64c:	0800a6c9 	.word	0x0800a6c9
 800a650:	0800a6c9 	.word	0x0800a6c9
 800a654:	0800a6c9 	.word	0x0800a6c9
 800a658:	0800a6c9 	.word	0x0800a6c9
 800a65c:	0800a6c9 	.word	0x0800a6c9
 800a660:	0800a6c9 	.word	0x0800a6c9
 800a664:	0800a6c9 	.word	0x0800a6c9
 800a668:	0800a6c9 	.word	0x0800a6c9
 800a66c:	0800a6c9 	.word	0x0800a6c9
 800a670:	0800a6c9 	.word	0x0800a6c9
 800a674:	0800a6c9 	.word	0x0800a6c9
 800a678:	0800a6c9 	.word	0x0800a6c9
 800a67c:	0800a6c9 	.word	0x0800a6c9
 800a680:	0800a6c9 	.word	0x0800a6c9
 800a684:	0800a6c9 	.word	0x0800a6c9
 800a688:	0800a6c9 	.word	0x0800a6c9
 800a68c:	0800a6c9 	.word	0x0800a6c9
 800a690:	0800a6c9 	.word	0x0800a6c9
 800a694:	0800a6c9 	.word	0x0800a6c9
 800a698:	0800a6c9 	.word	0x0800a6c9
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	0800a6c9 	.word	0x0800a6c9
 800a6a4:	0800a6c9 	.word	0x0800a6c9
 800a6a8:	0800a6c9 	.word	0x0800a6c9
 800a6ac:	0800a6c9 	.word	0x0800a6c9
 800a6b0:	0800a6c9 	.word	0x0800a6c9
 800a6b4:	0800a6c9 	.word	0x0800a6c9
 800a6b8:	0800a6c9 	.word	0x0800a6c9
 800a6bc:	0800a6c9 	.word	0x0800a6c9
 800a6c0:	0800a6c9 	.word	0x0800a6c9
 800a6c4:	0800a6c9 	.word	0x0800a6c9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a6c8:	bf00      	nop
	}

	return (USBD_OK);
 800a6ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	480b      	ldr	r0, [pc, #44]	@ (800a714 <CDC_Receive_FS+0x3c>)
 800a6e6:	f7fe fc1f 	bl	8008f28 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6ea:	480a      	ldr	r0, [pc, #40]	@ (800a714 <CDC_Receive_FS+0x3c>)
 800a6ec:	f7fe fc7a 	bl	8008fe4 <USBD_CDC_ReceivePacket>
	//  uint8_t len = (uint8_t) *Len;
	//  memcpy(usbReadBuffer,Buf,len);
	g_ui8UsbRecieveLen = (uint8_t) *Len;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <CDC_Receive_FS+0x40>)
 800a6f8:	701a      	strb	r2, [r3, #0]
	memcpy(g_aui8UsbRxBuffer,Buf,g_ui8UsbRecieveLen);
 800a6fa:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <CDC_Receive_FS+0x40>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4806      	ldr	r0, [pc, #24]	@ (800a71c <CDC_Receive_FS+0x44>)
 800a704:	f001 fb47 	bl	800bd96 <memcpy>
	return (USBD_OK);
 800a708:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200005c0 	.word	0x200005c0
 800a718:	2000032c 	.word	0x2000032c
 800a71c:	20000330 	.word	0x20000330

0800a720 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a730:	4b0d      	ldr	r3, [pc, #52]	@ (800a768 <CDC_Transmit_FS+0x48>)
 800a732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a736:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800a742:	2301      	movs	r3, #1
 800a744:	e00b      	b.n	800a75e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a746:	887b      	ldrh	r3, [r7, #2]
 800a748:	461a      	mov	r2, r3
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4806      	ldr	r0, [pc, #24]	@ (800a768 <CDC_Transmit_FS+0x48>)
 800a74e:	f7fe fbc9 	bl	8008ee4 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a752:	4805      	ldr	r0, [pc, #20]	@ (800a768 <CDC_Transmit_FS+0x48>)
 800a754:	f7fe fc06 	bl	8008f64 <USBD_CDC_TransmitPacket>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200005c0 	.word	0x200005c0

0800a76c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a77e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	6039      	str	r1, [r7, #0]
 800a79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2212      	movs	r2, #18
 800a7a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7a2:	4b03      	ldr	r3, [pc, #12]	@ (800a7b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	200000d0 	.word	0x200000d0

0800a7b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7c6:	4b03      	ldr	r3, [pc, #12]	@ (800a7d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	200000f0 	.word	0x200000f0

0800a7d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	6039      	str	r1, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4907      	ldr	r1, [pc, #28]	@ (800a80c <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ee:	4808      	ldr	r0, [pc, #32]	@ (800a810 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7f0:	f7ff fddc 	bl	800a3ac <USBD_GetString>
 800a7f4:	e004      	b.n	800a800 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	4904      	ldr	r1, [pc, #16]	@ (800a80c <USBD_FS_ProductStrDescriptor+0x34>)
 800a7fa:	4805      	ldr	r0, [pc, #20]	@ (800a810 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7fc:	f7ff fdd6 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a800:	4b02      	ldr	r3, [pc, #8]	@ (800a80c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	2000109c 	.word	0x2000109c
 800a810:	0800de84 	.word	0x0800de84

0800a814 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	6039      	str	r1, [r7, #0]
 800a81e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	4904      	ldr	r1, [pc, #16]	@ (800a834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a824:	4804      	ldr	r0, [pc, #16]	@ (800a838 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a826:	f7ff fdc1 	bl	800a3ac <USBD_GetString>
  return USBD_StrDesc;
 800a82a:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	2000109c 	.word	0x2000109c
 800a838:	0800de8c 	.word	0x0800de8c

0800a83c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	6039      	str	r1, [r7, #0]
 800a846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	221a      	movs	r2, #26
 800a84c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a84e:	f000 f855 	bl	800a8fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a852:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	200000f4 	.word	0x200000f4

0800a860 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d105      	bne.n	800a87e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	4907      	ldr	r1, [pc, #28]	@ (800a894 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a876:	4808      	ldr	r0, [pc, #32]	@ (800a898 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a878:	f7ff fd98 	bl	800a3ac <USBD_GetString>
 800a87c:	e004      	b.n	800a888 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	4904      	ldr	r1, [pc, #16]	@ (800a894 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a882:	4805      	ldr	r0, [pc, #20]	@ (800a898 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a884:	f7ff fd92 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a888:	4b02      	ldr	r3, [pc, #8]	@ (800a894 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3708      	adds	r7, #8
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	2000109c 	.word	0x2000109c
 800a898:	0800dea0 	.word	0x0800dea0

0800a89c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d105      	bne.n	800a8ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	4907      	ldr	r1, [pc, #28]	@ (800a8d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8b2:	4808      	ldr	r0, [pc, #32]	@ (800a8d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8b4:	f7ff fd7a 	bl	800a3ac <USBD_GetString>
 800a8b8:	e004      	b.n	800a8c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	4904      	ldr	r1, [pc, #16]	@ (800a8d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8be:	4805      	ldr	r0, [pc, #20]	@ (800a8d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8c0:	f7ff fd74 	bl	800a3ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8c4:	4b02      	ldr	r3, [pc, #8]	@ (800a8d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	2000109c 	.word	0x2000109c
 800a8d4:	0800deac 	.word	0x0800deac

0800a8d8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	220c      	movs	r2, #12
 800a8e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a8ea:	4b03      	ldr	r3, [pc, #12]	@ (800a8f8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	200000e4 	.word	0x200000e4

0800a8fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a902:	4b0f      	ldr	r3, [pc, #60]	@ (800a940 <Get_SerialNum+0x44>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a908:	4b0e      	ldr	r3, [pc, #56]	@ (800a944 <Get_SerialNum+0x48>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a90e:	4b0e      	ldr	r3, [pc, #56]	@ (800a948 <Get_SerialNum+0x4c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4413      	add	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a922:	2208      	movs	r2, #8
 800a924:	4909      	ldr	r1, [pc, #36]	@ (800a94c <Get_SerialNum+0x50>)
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f000 f814 	bl	800a954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a92c:	2204      	movs	r2, #4
 800a92e:	4908      	ldr	r1, [pc, #32]	@ (800a950 <Get_SerialNum+0x54>)
 800a930:	68b8      	ldr	r0, [r7, #8]
 800a932:	f000 f80f 	bl	800a954 <IntToUnicode>
  }
}
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	1fff7590 	.word	0x1fff7590
 800a944:	1fff7594 	.word	0x1fff7594
 800a948:	1fff7598 	.word	0x1fff7598
 800a94c:	200000f6 	.word	0x200000f6
 800a950:	20000106 	.word	0x20000106

0800a954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a966:	2300      	movs	r3, #0
 800a968:	75fb      	strb	r3, [r7, #23]
 800a96a:	e027      	b.n	800a9bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	2b09      	cmp	r3, #9
 800a972:	d80b      	bhi.n	800a98c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	0f1b      	lsrs	r3, r3, #28
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4619      	mov	r1, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	440b      	add	r3, r1
 800a984:	3230      	adds	r2, #48	@ 0x30
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
 800a98a:	e00a      	b.n	800a9a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	0f1b      	lsrs	r3, r3, #28
 800a990:	b2da      	uxtb	r2, r3
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	4619      	mov	r1, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	440b      	add	r3, r1
 800a99c:	3237      	adds	r2, #55	@ 0x37
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	011b      	lsls	r3, r3, #4
 800a9a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
 800a9bc:	7dfa      	ldrb	r2, [r7, #23]
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3d3      	bcc.n	800a96c <IntToUnicode+0x18>
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b096      	sub	sp, #88	@ 0x58
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	605a      	str	r2, [r3, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
 800a9e8:	60da      	str	r2, [r3, #12]
 800a9ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	2234      	movs	r2, #52	@ 0x34
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f938 	bl	800bc6a <memset>
  if(pcdHandle->Instance==USB)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a24      	ldr	r2, [pc, #144]	@ (800aa90 <HAL_PCD_MspInit+0xbc>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d141      	bne.n	800aa88 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800aa04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aa08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800aa0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa10:	f107 0310 	add.w	r3, r7, #16
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fb fa03 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800aa20:	f7f7 f9f0 	bl	8001e04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa24:	4b1b      	ldr	r3, [pc, #108]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa28:	4a1a      	ldr	r2, [pc, #104]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa2a:	f043 0301 	orr.w	r3, r3, #1
 800aa2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa30:	4b18      	ldr	r3, [pc, #96]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa3c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aa40:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa42:	2302      	movs	r3, #2
 800aa44:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800aa4e:	230a      	movs	r3, #10
 800aa50:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800aa56:	4619      	mov	r1, r3
 800aa58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aa5c:	f7f7 fdc6 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa60:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa64:	4a0b      	ldr	r2, [pc, #44]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aa6a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa6c:	4b09      	ldr	r3, [pc, #36]	@ (800aa94 <HAL_PCD_MspInit+0xc0>)
 800aa6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa74:	60bb      	str	r3, [r7, #8]
 800aa76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	2043      	movs	r0, #67	@ 0x43
 800aa7e:	f7f7 fd7e 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800aa82:	2043      	movs	r0, #67	@ 0x43
 800aa84:	f7f7 fd97 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa88:	bf00      	nop
 800aa8a:	3758      	adds	r7, #88	@ 0x58
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	40006800 	.word	0x40006800
 800aa94:	40021000 	.word	0x40021000

0800aa98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fe fb81 	bl	80091b6 <USBD_LL_SetupStage>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	6879      	ldr	r1, [r7, #4]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	440b      	add	r3, r1
 800aadc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7fe fbbb 	bl	8009260 <USBD_LL_DataOutStage>
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	460b      	mov	r3, r1
 800aafc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800ab04:	78fa      	ldrb	r2, [r7, #3]
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	440b      	add	r3, r1
 800ab12:	3324      	adds	r3, #36	@ 0x24
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	78fb      	ldrb	r3, [r7, #3]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f7fe fc54 	bl	80093c6 <USBD_LL_DataInStage>
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fd8e 	bl	8009656 <USBD_LL_SOF>
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	799b      	ldrb	r3, [r3, #6]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d001      	beq.n	800ab5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab56:	f7f7 f955 	bl	8001e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ab60:	7bfa      	ldrb	r2, [r7, #15]
 800ab62:	4611      	mov	r1, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fd32 	bl	80095ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fcda 	bl	800952a <USBD_LL_Reset>
}
 800ab76:	bf00      	nop
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd2d 	bl	80095ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7a9b      	ldrb	r3, [r3, #10]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab9c:	4b04      	ldr	r3, [pc, #16]	@ (800abb0 <HAL_PCD_SuspendCallback+0x30>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	4a03      	ldr	r2, [pc, #12]	@ (800abb0 <HAL_PCD_SuspendCallback+0x30>)
 800aba2:	f043 0306 	orr.w	r3, r3, #6
 800aba6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	e000ed00 	.word	0xe000ed00

0800abb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	7a9b      	ldrb	r3, [r3, #10]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abc4:	4b08      	ldr	r3, [pc, #32]	@ (800abe8 <HAL_PCD_ResumeCallback+0x34>)
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	4a07      	ldr	r2, [pc, #28]	@ (800abe8 <HAL_PCD_ResumeCallback+0x34>)
 800abca:	f023 0306 	bic.w	r3, r3, #6
 800abce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800abd0:	f000 fab4 	bl	800b13c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fd23 	bl	8009626 <USBD_LL_Resume>
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	e000ed00 	.word	0xe000ed00

0800abec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800abf4:	f7fa fa60 	bl	80050b8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800abf8:	4a2b      	ldr	r2, [pc, #172]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
  pdev->pData = &hpcd_USB_FS;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a29      	ldr	r2, [pc, #164]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac04:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_FS.Instance = USB;
 800ac08:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac0a:	4a28      	ldr	r2, [pc, #160]	@ (800acac <USBD_LL_Init+0xc0>)
 800ac0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac0e:	4b26      	ldr	r3, [pc, #152]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac10:	2208      	movs	r2, #8
 800ac12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac14:	4b24      	ldr	r3, [pc, #144]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac16:	2202      	movs	r2, #2
 800ac18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac1a:	4b23      	ldr	r3, [pc, #140]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ac20:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac26:	4b20      	ldr	r3, [pc, #128]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac2c:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac32:	4b1d      	ldr	r3, [pc, #116]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac38:	481b      	ldr	r0, [pc, #108]	@ (800aca8 <USBD_LL_Init+0xbc>)
 800ac3a:	f7f8 fc84 	bl	8003546 <HAL_PCD_Init>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800ac44:	f7f7 f8de 	bl	8001e04 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac4e:	2318      	movs	r3, #24
 800ac50:	2200      	movs	r2, #0
 800ac52:	2100      	movs	r1, #0
 800ac54:	f7fa f948 	bl	8004ee8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac5e:	2358      	movs	r3, #88	@ 0x58
 800ac60:	2200      	movs	r2, #0
 800ac62:	2180      	movs	r1, #128	@ 0x80
 800ac64:	f7fa f940 	bl	8004ee8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac6e:	23c0      	movs	r3, #192	@ 0xc0
 800ac70:	2200      	movs	r2, #0
 800ac72:	2181      	movs	r1, #129	@ 0x81
 800ac74:	f7fa f938 	bl	8004ee8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ac82:	2200      	movs	r2, #0
 800ac84:	2101      	movs	r1, #1
 800ac86:	f7fa f92f 	bl	8004ee8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac94:	2200      	movs	r2, #0
 800ac96:	2182      	movs	r1, #130	@ 0x82
 800ac98:	f7fa f926 	bl	8004ee8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	2000129c 	.word	0x2000129c
 800acac:	40006800 	.word	0x40006800

0800acb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f8 fd3a 	bl	8003740 <HAL_PCD_Start>
 800accc:	4603      	mov	r3, r0
 800acce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d816      	bhi.n	800ad04 <USBD_LL_Start+0x54>
 800acd6:	a201      	add	r2, pc, #4	@ (adr r2, 800acdc <USBD_LL_Start+0x2c>)
 800acd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acdc:	0800aced 	.word	0x0800aced
 800ace0:	0800acf3 	.word	0x0800acf3
 800ace4:	0800acf9 	.word	0x0800acf9
 800ace8:	0800acff 	.word	0x0800acff
    case HAL_OK :
      usb_status = USBD_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]
    break;
 800acf0:	e00b      	b.n	800ad0a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acf2:	2303      	movs	r3, #3
 800acf4:	73fb      	strb	r3, [r7, #15]
    break;
 800acf6:	e008      	b.n	800ad0a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acf8:	2301      	movs	r3, #1
 800acfa:	73fb      	strb	r3, [r7, #15]
    break;
 800acfc:	e005      	b.n	800ad0a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acfe:	2303      	movs	r3, #3
 800ad00:	73fb      	strb	r3, [r7, #15]
    break;
 800ad02:	e002      	b.n	800ad0a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ad04:	2303      	movs	r3, #3
 800ad06:	73fb      	strb	r3, [r7, #15]
    break;
 800ad08:	bf00      	nop
  }
  return usb_status;
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	70fb      	strb	r3, [r7, #3]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70bb      	strb	r3, [r7, #2]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad3c:	78bb      	ldrb	r3, [r7, #2]
 800ad3e:	883a      	ldrh	r2, [r7, #0]
 800ad40:	78f9      	ldrb	r1, [r7, #3]
 800ad42:	f7f8 fe6a 	bl	8003a1a <HAL_PCD_EP_Open>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d817      	bhi.n	800ad80 <USBD_LL_OpenEP+0x6c>
 800ad50:	a201      	add	r2, pc, #4	@ (adr r2, 800ad58 <USBD_LL_OpenEP+0x44>)
 800ad52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad56:	bf00      	nop
 800ad58:	0800ad69 	.word	0x0800ad69
 800ad5c:	0800ad6f 	.word	0x0800ad6f
 800ad60:	0800ad75 	.word	0x0800ad75
 800ad64:	0800ad7b 	.word	0x0800ad7b
    case HAL_OK :
      usb_status = USBD_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6c:	e00b      	b.n	800ad86 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	73fb      	strb	r3, [r7, #15]
    break;
 800ad72:	e008      	b.n	800ad86 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad74:	2301      	movs	r3, #1
 800ad76:	73fb      	strb	r3, [r7, #15]
    break;
 800ad78:	e005      	b.n	800ad86 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad7e:	e002      	b.n	800ad86 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ad80:	2303      	movs	r3, #3
 800ad82:	73fb      	strb	r3, [r7, #15]
    break;
 800ad84:	bf00      	nop
  }
  return usb_status;
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada0:	2300      	movs	r3, #0
 800ada2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adaa:	78fa      	ldrb	r2, [r7, #3]
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f8 fe92 	bl	8003ad8 <HAL_PCD_EP_Close>
 800adb4:	4603      	mov	r3, r0
 800adb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800adb8:	7bbb      	ldrb	r3, [r7, #14]
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d816      	bhi.n	800adec <USBD_LL_CloseEP+0x5c>
 800adbe:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <USBD_LL_CloseEP+0x34>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800add5 	.word	0x0800add5
 800adc8:	0800addb 	.word	0x0800addb
 800adcc:	0800ade1 	.word	0x0800ade1
 800add0:	0800ade7 	.word	0x0800ade7
    case HAL_OK :
      usb_status = USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
    break;
 800add8:	e00b      	b.n	800adf2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	73fb      	strb	r3, [r7, #15]
    break;
 800adde:	e008      	b.n	800adf2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ade0:	2301      	movs	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
    break;
 800ade4:	e005      	b.n	800adf2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	73fb      	strb	r3, [r7, #15]
    break;
 800adea:	e002      	b.n	800adf2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	73fb      	strb	r3, [r7, #15]
    break;
 800adf0:	bf00      	nop
  }
  return usb_status;
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f8 ff24 	bl	8003c68 <HAL_PCD_EP_SetStall>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d816      	bhi.n	800ae58 <USBD_LL_StallEP+0x5c>
 800ae2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae30 <USBD_LL_StallEP+0x34>)
 800ae2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae30:	0800ae41 	.word	0x0800ae41
 800ae34:	0800ae47 	.word	0x0800ae47
 800ae38:	0800ae4d 	.word	0x0800ae4d
 800ae3c:	0800ae53 	.word	0x0800ae53
    case HAL_OK :
      usb_status = USBD_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	e00b      	b.n	800ae5e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4a:	e008      	b.n	800ae5e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae50:	e005      	b.n	800ae5e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	73fb      	strb	r3, [r7, #15]
    break;
 800ae56:	e002      	b.n	800ae5e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5c:	bf00      	nop
  }
  return usb_status;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7f8 ff4e 	bl	8003d28 <HAL_PCD_EP_ClrStall>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d816      	bhi.n	800aec4 <USBD_LL_ClearStallEP+0x5c>
 800ae96:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <USBD_LL_ClearStallEP+0x34>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb3 	.word	0x0800aeb3
 800aea4:	0800aeb9 	.word	0x0800aeb9
 800aea8:	0800aebf 	.word	0x0800aebf
    case HAL_OK :
      usb_status = USBD_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb0:	e00b      	b.n	800aeca <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb6:	e008      	b.n	800aeca <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
    break;
 800aebc:	e005      	b.n	800aeca <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aebe:	2303      	movs	r3, #3
 800aec0:	73fb      	strb	r3, [r7, #15]
    break;
 800aec2:	e002      	b.n	800aeca <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	73fb      	strb	r3, [r7, #15]
    break;
 800aec8:	bf00      	nop
  }
  return usb_status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aee6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	da0b      	bge.n	800af08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aef6:	68f9      	ldr	r1, [r7, #12]
 800aef8:	4613      	mov	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	440b      	add	r3, r1
 800af02:	3312      	adds	r3, #18
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	e00b      	b.n	800af20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af0e:	68f9      	ldr	r1, [r7, #12]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	440b      	add	r3, r1
 800af1a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800af1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	4611      	mov	r1, r2
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7f8 fd41 	bl	80039d2 <HAL_PCD_SetAddress>
 800af50:	4603      	mov	r3, r0
 800af52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2b03      	cmp	r3, #3
 800af58:	d816      	bhi.n	800af88 <USBD_LL_SetUSBAddress+0x5c>
 800af5a:	a201      	add	r2, pc, #4	@ (adr r2, 800af60 <USBD_LL_SetUSBAddress+0x34>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af71 	.word	0x0800af71
 800af64:	0800af77 	.word	0x0800af77
 800af68:	0800af7d 	.word	0x0800af7d
 800af6c:	0800af83 	.word	0x0800af83
    case HAL_OK :
      usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
    break;
 800af74:	e00b      	b.n	800af8e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af76:	2303      	movs	r3, #3
 800af78:	73fb      	strb	r3, [r7, #15]
    break;
 800af7a:	e008      	b.n	800af8e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af7c:	2301      	movs	r3, #1
 800af7e:	73fb      	strb	r3, [r7, #15]
    break;
 800af80:	e005      	b.n	800af8e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af82:	2303      	movs	r3, #3
 800af84:	73fb      	strb	r3, [r7, #15]
    break;
 800af86:	e002      	b.n	800af8e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800af88:	2303      	movs	r3, #3
 800af8a:	73fb      	strb	r3, [r7, #15]
    break;
 800af8c:	bf00      	nop
  }
  return usb_status;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	460b      	mov	r3, r1
 800afa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800afb6:	7af9      	ldrb	r1, [r7, #11]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	f7f8 fe1d 	bl	8003bfa <HAL_PCD_EP_Transmit>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800afc4:	7dbb      	ldrb	r3, [r7, #22]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d816      	bhi.n	800aff8 <USBD_LL_Transmit+0x60>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <USBD_LL_Transmit+0x38>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800afe7 	.word	0x0800afe7
 800afd8:	0800afed 	.word	0x0800afed
 800afdc:	0800aff3 	.word	0x0800aff3
    case HAL_OK :
      usb_status = USBD_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]
    break;
 800afe4:	e00b      	b.n	800affe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afe6:	2303      	movs	r3, #3
 800afe8:	75fb      	strb	r3, [r7, #23]
    break;
 800afea:	e008      	b.n	800affe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afec:	2301      	movs	r3, #1
 800afee:	75fb      	strb	r3, [r7, #23]
    break;
 800aff0:	e005      	b.n	800affe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aff2:	2303      	movs	r3, #3
 800aff4:	75fb      	strb	r3, [r7, #23]
    break;
 800aff6:	e002      	b.n	800affe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	75fb      	strb	r3, [r7, #23]
    break;
 800affc:	bf00      	nop
  }
  return usb_status;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	607a      	str	r2, [r7, #4]
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	460b      	mov	r3, r1
 800b016:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b026:	7af9      	ldrb	r1, [r7, #11]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	f7f8 fd9c 	bl	8003b68 <HAL_PCD_EP_Receive>
 800b030:	4603      	mov	r3, r0
 800b032:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b034:	7dbb      	ldrb	r3, [r7, #22]
 800b036:	2b03      	cmp	r3, #3
 800b038:	d816      	bhi.n	800b068 <USBD_LL_PrepareReceive+0x60>
 800b03a:	a201      	add	r2, pc, #4	@ (adr r2, 800b040 <USBD_LL_PrepareReceive+0x38>)
 800b03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b040:	0800b051 	.word	0x0800b051
 800b044:	0800b057 	.word	0x0800b057
 800b048:	0800b05d 	.word	0x0800b05d
 800b04c:	0800b063 	.word	0x0800b063
    case HAL_OK :
      usb_status = USBD_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	75fb      	strb	r3, [r7, #23]
    break;
 800b054:	e00b      	b.n	800b06e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	75fb      	strb	r3, [r7, #23]
    break;
 800b05a:	e008      	b.n	800b06e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b05c:	2301      	movs	r3, #1
 800b05e:	75fb      	strb	r3, [r7, #23]
    break;
 800b060:	e005      	b.n	800b06e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	75fb      	strb	r3, [r7, #23]
    break;
 800b066:	e002      	b.n	800b06e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	75fb      	strb	r3, [r7, #23]
    break;
 800b06c:	bf00      	nop
  }
  return usb_status;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f8 fd9b 	bl	8003bca <HAL_PCD_EP_GetRxCount>
 800b094:	4603      	mov	r3, r0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d002      	beq.n	800b0b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d013      	beq.n	800b0de <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b0b6:	e023      	b.n	800b100 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	7a9b      	ldrb	r3, [r3, #10]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d007      	beq.n	800b0d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b0c0:	f000 f83c 	bl	800b13c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0c4:	4b10      	ldr	r3, [pc, #64]	@ (800b108 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b108 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0ca:	f023 0306 	bic.w	r3, r3, #6
 800b0ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe faa5 	bl	8009626 <USBD_LL_Resume>
    break;
 800b0dc:	e010      	b.n	800b100 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe fa82 	bl	80095ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7a9b      	ldrb	r3, [r3, #10]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0f2:	4b05      	ldr	r3, [pc, #20]	@ (800b108 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	4a04      	ldr	r2, [pc, #16]	@ (800b108 <HAL_PCDEx_LPM_Callback+0x68>)
 800b0f8:	f043 0306 	orr.w	r3, r3, #6
 800b0fc:	6113      	str	r3, [r2, #16]
    break;
 800b0fe:	bf00      	nop
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	e000ed00 	.word	0xe000ed00

0800b10c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b114:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <USBD_static_malloc+0x18>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	2000157c 	.word	0x2000157c

0800b128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]

}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b140:	f7f6 fcd6 	bl	8001af0 <SystemClock_Config>
}
 800b144:	bf00      	nop
 800b146:	bd80      	pop	{r7, pc}

0800b148 <__cvt>:
 800b148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	ec57 6b10 	vmov	r6, r7, d0
 800b150:	2f00      	cmp	r7, #0
 800b152:	460c      	mov	r4, r1
 800b154:	4619      	mov	r1, r3
 800b156:	463b      	mov	r3, r7
 800b158:	bfbb      	ittet	lt
 800b15a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b15e:	461f      	movlt	r7, r3
 800b160:	2300      	movge	r3, #0
 800b162:	232d      	movlt	r3, #45	@ 0x2d
 800b164:	700b      	strb	r3, [r1, #0]
 800b166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b168:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b16c:	4691      	mov	r9, r2
 800b16e:	f023 0820 	bic.w	r8, r3, #32
 800b172:	bfbc      	itt	lt
 800b174:	4632      	movlt	r2, r6
 800b176:	4616      	movlt	r6, r2
 800b178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b17c:	d005      	beq.n	800b18a <__cvt+0x42>
 800b17e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b182:	d100      	bne.n	800b186 <__cvt+0x3e>
 800b184:	3401      	adds	r4, #1
 800b186:	2102      	movs	r1, #2
 800b188:	e000      	b.n	800b18c <__cvt+0x44>
 800b18a:	2103      	movs	r1, #3
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	ab02      	add	r3, sp, #8
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	ec47 6b10 	vmov	d0, r6, r7
 800b198:	4653      	mov	r3, sl
 800b19a:	4622      	mov	r2, r4
 800b19c:	f000 fe94 	bl	800bec8 <_dtoa_r>
 800b1a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	d119      	bne.n	800b1dc <__cvt+0x94>
 800b1a8:	f019 0f01 	tst.w	r9, #1
 800b1ac:	d00e      	beq.n	800b1cc <__cvt+0x84>
 800b1ae:	eb00 0904 	add.w	r9, r0, r4
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1be:	b108      	cbz	r0, 800b1c4 <__cvt+0x7c>
 800b1c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1c4:	2230      	movs	r2, #48	@ 0x30
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	454b      	cmp	r3, r9
 800b1ca:	d31e      	bcc.n	800b20a <__cvt+0xc2>
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1d0:	1b5b      	subs	r3, r3, r5
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	b004      	add	sp, #16
 800b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1e0:	eb00 0904 	add.w	r9, r0, r4
 800b1e4:	d1e5      	bne.n	800b1b2 <__cvt+0x6a>
 800b1e6:	7803      	ldrb	r3, [r0, #0]
 800b1e8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ea:	d10a      	bne.n	800b202 <__cvt+0xba>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	f7f5 fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f8:	b918      	cbnz	r0, 800b202 <__cvt+0xba>
 800b1fa:	f1c4 0401 	rsb	r4, r4, #1
 800b1fe:	f8ca 4000 	str.w	r4, [sl]
 800b202:	f8da 3000 	ldr.w	r3, [sl]
 800b206:	4499      	add	r9, r3
 800b208:	e7d3      	b.n	800b1b2 <__cvt+0x6a>
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	9103      	str	r1, [sp, #12]
 800b20e:	701a      	strb	r2, [r3, #0]
 800b210:	e7d9      	b.n	800b1c6 <__cvt+0x7e>

0800b212 <__exponent>:
 800b212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b214:	2900      	cmp	r1, #0
 800b216:	bfba      	itte	lt
 800b218:	4249      	neglt	r1, r1
 800b21a:	232d      	movlt	r3, #45	@ 0x2d
 800b21c:	232b      	movge	r3, #43	@ 0x2b
 800b21e:	2909      	cmp	r1, #9
 800b220:	7002      	strb	r2, [r0, #0]
 800b222:	7043      	strb	r3, [r0, #1]
 800b224:	dd29      	ble.n	800b27a <__exponent+0x68>
 800b226:	f10d 0307 	add.w	r3, sp, #7
 800b22a:	461d      	mov	r5, r3
 800b22c:	270a      	movs	r7, #10
 800b22e:	461a      	mov	r2, r3
 800b230:	fbb1 f6f7 	udiv	r6, r1, r7
 800b234:	fb07 1416 	mls	r4, r7, r6, r1
 800b238:	3430      	adds	r4, #48	@ 0x30
 800b23a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b23e:	460c      	mov	r4, r1
 800b240:	2c63      	cmp	r4, #99	@ 0x63
 800b242:	f103 33ff 	add.w	r3, r3, #4294967295
 800b246:	4631      	mov	r1, r6
 800b248:	dcf1      	bgt.n	800b22e <__exponent+0x1c>
 800b24a:	3130      	adds	r1, #48	@ 0x30
 800b24c:	1e94      	subs	r4, r2, #2
 800b24e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b252:	1c41      	adds	r1, r0, #1
 800b254:	4623      	mov	r3, r4
 800b256:	42ab      	cmp	r3, r5
 800b258:	d30a      	bcc.n	800b270 <__exponent+0x5e>
 800b25a:	f10d 0309 	add.w	r3, sp, #9
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	42ac      	cmp	r4, r5
 800b262:	bf88      	it	hi
 800b264:	2300      	movhi	r3, #0
 800b266:	3302      	adds	r3, #2
 800b268:	4403      	add	r3, r0
 800b26a:	1a18      	subs	r0, r3, r0
 800b26c:	b003      	add	sp, #12
 800b26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b270:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b274:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b278:	e7ed      	b.n	800b256 <__exponent+0x44>
 800b27a:	2330      	movs	r3, #48	@ 0x30
 800b27c:	3130      	adds	r1, #48	@ 0x30
 800b27e:	7083      	strb	r3, [r0, #2]
 800b280:	70c1      	strb	r1, [r0, #3]
 800b282:	1d03      	adds	r3, r0, #4
 800b284:	e7f1      	b.n	800b26a <__exponent+0x58>
	...

0800b288 <_printf_float>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	b08d      	sub	sp, #52	@ 0x34
 800b28e:	460c      	mov	r4, r1
 800b290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b294:	4616      	mov	r6, r2
 800b296:	461f      	mov	r7, r3
 800b298:	4605      	mov	r5, r0
 800b29a:	f000 fd05 	bl	800bca8 <_localeconv_r>
 800b29e:	6803      	ldr	r3, [r0, #0]
 800b2a0:	9304      	str	r3, [sp, #16]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f4 ffe4 	bl	8000270 <strlen>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b0:	9005      	str	r0, [sp, #20]
 800b2b2:	3307      	adds	r3, #7
 800b2b4:	f023 0307 	bic.w	r3, r3, #7
 800b2b8:	f103 0208 	add.w	r2, r3, #8
 800b2bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2c0:	f8d4 b000 	ldr.w	fp, [r4]
 800b2c4:	f8c8 2000 	str.w	r2, [r8]
 800b2c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2de:	4b9c      	ldr	r3, [pc, #624]	@ (800b550 <_printf_float+0x2c8>)
 800b2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e4:	f7f5 fc22 	bl	8000b2c <__aeabi_dcmpun>
 800b2e8:	bb70      	cbnz	r0, 800b348 <_printf_float+0xc0>
 800b2ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2ee:	4b98      	ldr	r3, [pc, #608]	@ (800b550 <_printf_float+0x2c8>)
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	f7f5 fbfc 	bl	8000af0 <__aeabi_dcmple>
 800b2f8:	bb30      	cbnz	r0, 800b348 <_printf_float+0xc0>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800b306:	b110      	cbz	r0, 800b30e <_printf_float+0x86>
 800b308:	232d      	movs	r3, #45	@ 0x2d
 800b30a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b30e:	4a91      	ldr	r2, [pc, #580]	@ (800b554 <_printf_float+0x2cc>)
 800b310:	4b91      	ldr	r3, [pc, #580]	@ (800b558 <_printf_float+0x2d0>)
 800b312:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b316:	bf8c      	ite	hi
 800b318:	4690      	movhi	r8, r2
 800b31a:	4698      	movls	r8, r3
 800b31c:	2303      	movs	r3, #3
 800b31e:	6123      	str	r3, [r4, #16]
 800b320:	f02b 0304 	bic.w	r3, fp, #4
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	f04f 0900 	mov.w	r9, #0
 800b32a:	9700      	str	r7, [sp, #0]
 800b32c:	4633      	mov	r3, r6
 800b32e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b330:	4621      	mov	r1, r4
 800b332:	4628      	mov	r0, r5
 800b334:	f000 f9d2 	bl	800b6dc <_printf_common>
 800b338:	3001      	adds	r0, #1
 800b33a:	f040 808d 	bne.w	800b458 <_printf_float+0x1d0>
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295
 800b342:	b00d      	add	sp, #52	@ 0x34
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	4640      	mov	r0, r8
 800b34e:	4649      	mov	r1, r9
 800b350:	f7f5 fbec 	bl	8000b2c <__aeabi_dcmpun>
 800b354:	b140      	cbz	r0, 800b368 <_printf_float+0xe0>
 800b356:	464b      	mov	r3, r9
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfbc      	itt	lt
 800b35c:	232d      	movlt	r3, #45	@ 0x2d
 800b35e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b362:	4a7e      	ldr	r2, [pc, #504]	@ (800b55c <_printf_float+0x2d4>)
 800b364:	4b7e      	ldr	r3, [pc, #504]	@ (800b560 <_printf_float+0x2d8>)
 800b366:	e7d4      	b.n	800b312 <_printf_float+0x8a>
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b36e:	9206      	str	r2, [sp, #24]
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	d13b      	bne.n	800b3ec <_printf_float+0x164>
 800b374:	2306      	movs	r3, #6
 800b376:	6063      	str	r3, [r4, #4]
 800b378:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b37c:	2300      	movs	r3, #0
 800b37e:	6022      	str	r2, [r4, #0]
 800b380:	9303      	str	r3, [sp, #12]
 800b382:	ab0a      	add	r3, sp, #40	@ 0x28
 800b384:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b388:	ab09      	add	r3, sp, #36	@ 0x24
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	6861      	ldr	r1, [r4, #4]
 800b38e:	ec49 8b10 	vmov	d0, r8, r9
 800b392:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b396:	4628      	mov	r0, r5
 800b398:	f7ff fed6 	bl	800b148 <__cvt>
 800b39c:	9b06      	ldr	r3, [sp, #24]
 800b39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b3a0:	2b47      	cmp	r3, #71	@ 0x47
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	d129      	bne.n	800b3fa <_printf_float+0x172>
 800b3a6:	1cc8      	adds	r0, r1, #3
 800b3a8:	db02      	blt.n	800b3b0 <_printf_float+0x128>
 800b3aa:	6863      	ldr	r3, [r4, #4]
 800b3ac:	4299      	cmp	r1, r3
 800b3ae:	dd41      	ble.n	800b434 <_printf_float+0x1ac>
 800b3b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3b4:	fa5f fa8a 	uxtb.w	sl, sl
 800b3b8:	3901      	subs	r1, #1
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3c2:	f7ff ff26 	bl	800b212 <__exponent>
 800b3c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3c8:	1813      	adds	r3, r2, r0
 800b3ca:	2a01      	cmp	r2, #1
 800b3cc:	4681      	mov	r9, r0
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	dc02      	bgt.n	800b3d8 <_printf_float+0x150>
 800b3d2:	6822      	ldr	r2, [r4, #0]
 800b3d4:	07d2      	lsls	r2, r2, #31
 800b3d6:	d501      	bpl.n	800b3dc <_printf_float+0x154>
 800b3d8:	3301      	adds	r3, #1
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0a2      	beq.n	800b32a <_printf_float+0xa2>
 800b3e4:	232d      	movs	r3, #45	@ 0x2d
 800b3e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3ea:	e79e      	b.n	800b32a <_printf_float+0xa2>
 800b3ec:	9a06      	ldr	r2, [sp, #24]
 800b3ee:	2a47      	cmp	r2, #71	@ 0x47
 800b3f0:	d1c2      	bne.n	800b378 <_printf_float+0xf0>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1c0      	bne.n	800b378 <_printf_float+0xf0>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e7bd      	b.n	800b376 <_printf_float+0xee>
 800b3fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3fe:	d9db      	bls.n	800b3b8 <_printf_float+0x130>
 800b400:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b404:	d118      	bne.n	800b438 <_printf_float+0x1b0>
 800b406:	2900      	cmp	r1, #0
 800b408:	6863      	ldr	r3, [r4, #4]
 800b40a:	dd0b      	ble.n	800b424 <_printf_float+0x19c>
 800b40c:	6121      	str	r1, [r4, #16]
 800b40e:	b913      	cbnz	r3, 800b416 <_printf_float+0x18e>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	07d0      	lsls	r0, r2, #31
 800b414:	d502      	bpl.n	800b41c <_printf_float+0x194>
 800b416:	3301      	adds	r3, #1
 800b418:	440b      	add	r3, r1
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b41e:	f04f 0900 	mov.w	r9, #0
 800b422:	e7db      	b.n	800b3dc <_printf_float+0x154>
 800b424:	b913      	cbnz	r3, 800b42c <_printf_float+0x1a4>
 800b426:	6822      	ldr	r2, [r4, #0]
 800b428:	07d2      	lsls	r2, r2, #31
 800b42a:	d501      	bpl.n	800b430 <_printf_float+0x1a8>
 800b42c:	3302      	adds	r3, #2
 800b42e:	e7f4      	b.n	800b41a <_printf_float+0x192>
 800b430:	2301      	movs	r3, #1
 800b432:	e7f2      	b.n	800b41a <_printf_float+0x192>
 800b434:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b43a:	4299      	cmp	r1, r3
 800b43c:	db05      	blt.n	800b44a <_printf_float+0x1c2>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	6121      	str	r1, [r4, #16]
 800b442:	07d8      	lsls	r0, r3, #31
 800b444:	d5ea      	bpl.n	800b41c <_printf_float+0x194>
 800b446:	1c4b      	adds	r3, r1, #1
 800b448:	e7e7      	b.n	800b41a <_printf_float+0x192>
 800b44a:	2900      	cmp	r1, #0
 800b44c:	bfd4      	ite	le
 800b44e:	f1c1 0202 	rsble	r2, r1, #2
 800b452:	2201      	movgt	r2, #1
 800b454:	4413      	add	r3, r2
 800b456:	e7e0      	b.n	800b41a <_printf_float+0x192>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	055a      	lsls	r2, r3, #21
 800b45c:	d407      	bmi.n	800b46e <_printf_float+0x1e6>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	4642      	mov	r2, r8
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	d12b      	bne.n	800b4c4 <_printf_float+0x23c>
 800b46c:	e767      	b.n	800b33e <_printf_float+0xb6>
 800b46e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b472:	f240 80dd 	bls.w	800b630 <_printf_float+0x3a8>
 800b476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b47a:	2200      	movs	r2, #0
 800b47c:	2300      	movs	r3, #0
 800b47e:	f7f5 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b482:	2800      	cmp	r0, #0
 800b484:	d033      	beq.n	800b4ee <_printf_float+0x266>
 800b486:	4a37      	ldr	r2, [pc, #220]	@ (800b564 <_printf_float+0x2dc>)
 800b488:	2301      	movs	r3, #1
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f af54 	beq.w	800b33e <_printf_float+0xb6>
 800b496:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b49a:	4543      	cmp	r3, r8
 800b49c:	db02      	blt.n	800b4a4 <_printf_float+0x21c>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	07d8      	lsls	r0, r3, #31
 800b4a2:	d50f      	bpl.n	800b4c4 <_printf_float+0x23c>
 800b4a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	47b8      	blx	r7
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	f43f af45 	beq.w	800b33e <_printf_float+0xb6>
 800b4b4:	f04f 0900 	mov.w	r9, #0
 800b4b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4bc:	f104 0a1a 	add.w	sl, r4, #26
 800b4c0:	45c8      	cmp	r8, r9
 800b4c2:	dc09      	bgt.n	800b4d8 <_printf_float+0x250>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	079b      	lsls	r3, r3, #30
 800b4c8:	f100 8103 	bmi.w	800b6d2 <_printf_float+0x44a>
 800b4cc:	68e0      	ldr	r0, [r4, #12]
 800b4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d0:	4298      	cmp	r0, r3
 800b4d2:	bfb8      	it	lt
 800b4d4:	4618      	movlt	r0, r3
 800b4d6:	e734      	b.n	800b342 <_printf_float+0xba>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	4652      	mov	r2, sl
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af2b 	beq.w	800b33e <_printf_float+0xb6>
 800b4e8:	f109 0901 	add.w	r9, r9, #1
 800b4ec:	e7e8      	b.n	800b4c0 <_printf_float+0x238>
 800b4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dc39      	bgt.n	800b568 <_printf_float+0x2e0>
 800b4f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b564 <_printf_float+0x2dc>)
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	47b8      	blx	r7
 800b4fe:	3001      	adds	r0, #1
 800b500:	f43f af1d 	beq.w	800b33e <_printf_float+0xb6>
 800b504:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b508:	ea59 0303 	orrs.w	r3, r9, r3
 800b50c:	d102      	bne.n	800b514 <_printf_float+0x28c>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	07d9      	lsls	r1, r3, #31
 800b512:	d5d7      	bpl.n	800b4c4 <_printf_float+0x23c>
 800b514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f af0d 	beq.w	800b33e <_printf_float+0xb6>
 800b524:	f04f 0a00 	mov.w	sl, #0
 800b528:	f104 0b1a 	add.w	fp, r4, #26
 800b52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52e:	425b      	negs	r3, r3
 800b530:	4553      	cmp	r3, sl
 800b532:	dc01      	bgt.n	800b538 <_printf_float+0x2b0>
 800b534:	464b      	mov	r3, r9
 800b536:	e793      	b.n	800b460 <_printf_float+0x1d8>
 800b538:	2301      	movs	r3, #1
 800b53a:	465a      	mov	r2, fp
 800b53c:	4631      	mov	r1, r6
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	f43f aefb 	beq.w	800b33e <_printf_float+0xb6>
 800b548:	f10a 0a01 	add.w	sl, sl, #1
 800b54c:	e7ee      	b.n	800b52c <_printf_float+0x2a4>
 800b54e:	bf00      	nop
 800b550:	7fefffff 	.word	0x7fefffff
 800b554:	0800df00 	.word	0x0800df00
 800b558:	0800defc 	.word	0x0800defc
 800b55c:	0800df08 	.word	0x0800df08
 800b560:	0800df04 	.word	0x0800df04
 800b564:	0800df0c 	.word	0x0800df0c
 800b568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b56a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b56e:	4553      	cmp	r3, sl
 800b570:	bfa8      	it	ge
 800b572:	4653      	movge	r3, sl
 800b574:	2b00      	cmp	r3, #0
 800b576:	4699      	mov	r9, r3
 800b578:	dc36      	bgt.n	800b5e8 <_printf_float+0x360>
 800b57a:	f04f 0b00 	mov.w	fp, #0
 800b57e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b582:	f104 021a 	add.w	r2, r4, #26
 800b586:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b588:	9306      	str	r3, [sp, #24]
 800b58a:	eba3 0309 	sub.w	r3, r3, r9
 800b58e:	455b      	cmp	r3, fp
 800b590:	dc31      	bgt.n	800b5f6 <_printf_float+0x36e>
 800b592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b594:	459a      	cmp	sl, r3
 800b596:	dc3a      	bgt.n	800b60e <_printf_float+0x386>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	07da      	lsls	r2, r3, #31
 800b59c:	d437      	bmi.n	800b60e <_printf_float+0x386>
 800b59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a0:	ebaa 0903 	sub.w	r9, sl, r3
 800b5a4:	9b06      	ldr	r3, [sp, #24]
 800b5a6:	ebaa 0303 	sub.w	r3, sl, r3
 800b5aa:	4599      	cmp	r9, r3
 800b5ac:	bfa8      	it	ge
 800b5ae:	4699      	movge	r9, r3
 800b5b0:	f1b9 0f00 	cmp.w	r9, #0
 800b5b4:	dc33      	bgt.n	800b61e <_printf_float+0x396>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5be:	f104 0b1a 	add.w	fp, r4, #26
 800b5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c8:	eba3 0309 	sub.w	r3, r3, r9
 800b5cc:	4543      	cmp	r3, r8
 800b5ce:	f77f af79 	ble.w	800b4c4 <_printf_float+0x23c>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	465a      	mov	r2, fp
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	f43f aeae 	beq.w	800b33e <_printf_float+0xb6>
 800b5e2:	f108 0801 	add.w	r8, r8, #1
 800b5e6:	e7ec      	b.n	800b5c2 <_printf_float+0x33a>
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d1c2      	bne.n	800b57a <_printf_float+0x2f2>
 800b5f4:	e6a3      	b.n	800b33e <_printf_float+0xb6>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	9206      	str	r2, [sp, #24]
 800b5fe:	47b8      	blx	r7
 800b600:	3001      	adds	r0, #1
 800b602:	f43f ae9c 	beq.w	800b33e <_printf_float+0xb6>
 800b606:	9a06      	ldr	r2, [sp, #24]
 800b608:	f10b 0b01 	add.w	fp, fp, #1
 800b60c:	e7bb      	b.n	800b586 <_printf_float+0x2fe>
 800b60e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b612:	4631      	mov	r1, r6
 800b614:	4628      	mov	r0, r5
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	d1c0      	bne.n	800b59e <_printf_float+0x316>
 800b61c:	e68f      	b.n	800b33e <_printf_float+0xb6>
 800b61e:	9a06      	ldr	r2, [sp, #24]
 800b620:	464b      	mov	r3, r9
 800b622:	4442      	add	r2, r8
 800b624:	4631      	mov	r1, r6
 800b626:	4628      	mov	r0, r5
 800b628:	47b8      	blx	r7
 800b62a:	3001      	adds	r0, #1
 800b62c:	d1c3      	bne.n	800b5b6 <_printf_float+0x32e>
 800b62e:	e686      	b.n	800b33e <_printf_float+0xb6>
 800b630:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b634:	f1ba 0f01 	cmp.w	sl, #1
 800b638:	dc01      	bgt.n	800b63e <_printf_float+0x3b6>
 800b63a:	07db      	lsls	r3, r3, #31
 800b63c:	d536      	bpl.n	800b6ac <_printf_float+0x424>
 800b63e:	2301      	movs	r3, #1
 800b640:	4642      	mov	r2, r8
 800b642:	4631      	mov	r1, r6
 800b644:	4628      	mov	r0, r5
 800b646:	47b8      	blx	r7
 800b648:	3001      	adds	r0, #1
 800b64a:	f43f ae78 	beq.w	800b33e <_printf_float+0xb6>
 800b64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	47b8      	blx	r7
 800b658:	3001      	adds	r0, #1
 800b65a:	f43f ae70 	beq.w	800b33e <_printf_float+0xb6>
 800b65e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b662:	2200      	movs	r2, #0
 800b664:	2300      	movs	r3, #0
 800b666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b66a:	f7f5 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b66e:	b9c0      	cbnz	r0, 800b6a2 <_printf_float+0x41a>
 800b670:	4653      	mov	r3, sl
 800b672:	f108 0201 	add.w	r2, r8, #1
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	d10c      	bne.n	800b69a <_printf_float+0x412>
 800b680:	e65d      	b.n	800b33e <_printf_float+0xb6>
 800b682:	2301      	movs	r3, #1
 800b684:	465a      	mov	r2, fp
 800b686:	4631      	mov	r1, r6
 800b688:	4628      	mov	r0, r5
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	f43f ae56 	beq.w	800b33e <_printf_float+0xb6>
 800b692:	f108 0801 	add.w	r8, r8, #1
 800b696:	45d0      	cmp	r8, sl
 800b698:	dbf3      	blt.n	800b682 <_printf_float+0x3fa>
 800b69a:	464b      	mov	r3, r9
 800b69c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b6a0:	e6df      	b.n	800b462 <_printf_float+0x1da>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	f104 0b1a 	add.w	fp, r4, #26
 800b6aa:	e7f4      	b.n	800b696 <_printf_float+0x40e>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	e7e1      	b.n	800b676 <_printf_float+0x3ee>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	464a      	mov	r2, r9
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	47b8      	blx	r7
 800b6bc:	3001      	adds	r0, #1
 800b6be:	f43f ae3e 	beq.w	800b33e <_printf_float+0xb6>
 800b6c2:	f108 0801 	add.w	r8, r8, #1
 800b6c6:	68e3      	ldr	r3, [r4, #12]
 800b6c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6ca:	1a5b      	subs	r3, r3, r1
 800b6cc:	4543      	cmp	r3, r8
 800b6ce:	dcf0      	bgt.n	800b6b2 <_printf_float+0x42a>
 800b6d0:	e6fc      	b.n	800b4cc <_printf_float+0x244>
 800b6d2:	f04f 0800 	mov.w	r8, #0
 800b6d6:	f104 0919 	add.w	r9, r4, #25
 800b6da:	e7f4      	b.n	800b6c6 <_printf_float+0x43e>

0800b6dc <_printf_common>:
 800b6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e0:	4616      	mov	r6, r2
 800b6e2:	4698      	mov	r8, r3
 800b6e4:	688a      	ldr	r2, [r1, #8]
 800b6e6:	690b      	ldr	r3, [r1, #16]
 800b6e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bfb8      	it	lt
 800b6f0:	4613      	movlt	r3, r2
 800b6f2:	6033      	str	r3, [r6, #0]
 800b6f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	b10a      	cbz	r2, 800b702 <_printf_common+0x26>
 800b6fe:	3301      	adds	r3, #1
 800b700:	6033      	str	r3, [r6, #0]
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	0699      	lsls	r1, r3, #26
 800b706:	bf42      	ittt	mi
 800b708:	6833      	ldrmi	r3, [r6, #0]
 800b70a:	3302      	addmi	r3, #2
 800b70c:	6033      	strmi	r3, [r6, #0]
 800b70e:	6825      	ldr	r5, [r4, #0]
 800b710:	f015 0506 	ands.w	r5, r5, #6
 800b714:	d106      	bne.n	800b724 <_printf_common+0x48>
 800b716:	f104 0a19 	add.w	sl, r4, #25
 800b71a:	68e3      	ldr	r3, [r4, #12]
 800b71c:	6832      	ldr	r2, [r6, #0]
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	42ab      	cmp	r3, r5
 800b722:	dc26      	bgt.n	800b772 <_printf_common+0x96>
 800b724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b728:	6822      	ldr	r2, [r4, #0]
 800b72a:	3b00      	subs	r3, #0
 800b72c:	bf18      	it	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	0692      	lsls	r2, r2, #26
 800b732:	d42b      	bmi.n	800b78c <_printf_common+0xb0>
 800b734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b738:	4641      	mov	r1, r8
 800b73a:	4638      	mov	r0, r7
 800b73c:	47c8      	blx	r9
 800b73e:	3001      	adds	r0, #1
 800b740:	d01e      	beq.n	800b780 <_printf_common+0xa4>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	6922      	ldr	r2, [r4, #16]
 800b746:	f003 0306 	and.w	r3, r3, #6
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	bf02      	ittt	eq
 800b74e:	68e5      	ldreq	r5, [r4, #12]
 800b750:	6833      	ldreq	r3, [r6, #0]
 800b752:	1aed      	subeq	r5, r5, r3
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	bf0c      	ite	eq
 800b758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b75c:	2500      	movne	r5, #0
 800b75e:	4293      	cmp	r3, r2
 800b760:	bfc4      	itt	gt
 800b762:	1a9b      	subgt	r3, r3, r2
 800b764:	18ed      	addgt	r5, r5, r3
 800b766:	2600      	movs	r6, #0
 800b768:	341a      	adds	r4, #26
 800b76a:	42b5      	cmp	r5, r6
 800b76c:	d11a      	bne.n	800b7a4 <_printf_common+0xc8>
 800b76e:	2000      	movs	r0, #0
 800b770:	e008      	b.n	800b784 <_printf_common+0xa8>
 800b772:	2301      	movs	r3, #1
 800b774:	4652      	mov	r2, sl
 800b776:	4641      	mov	r1, r8
 800b778:	4638      	mov	r0, r7
 800b77a:	47c8      	blx	r9
 800b77c:	3001      	adds	r0, #1
 800b77e:	d103      	bne.n	800b788 <_printf_common+0xac>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b788:	3501      	adds	r5, #1
 800b78a:	e7c6      	b.n	800b71a <_printf_common+0x3e>
 800b78c:	18e1      	adds	r1, r4, r3
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	2030      	movs	r0, #48	@ 0x30
 800b792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b796:	4422      	add	r2, r4
 800b798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b79c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	e7c7      	b.n	800b734 <_printf_common+0x58>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	47c8      	blx	r9
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d0e6      	beq.n	800b780 <_printf_common+0xa4>
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	e7d9      	b.n	800b76a <_printf_common+0x8e>
	...

0800b7b8 <_printf_i>:
 800b7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	7e0f      	ldrb	r7, [r1, #24]
 800b7be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7c0:	2f78      	cmp	r7, #120	@ 0x78
 800b7c2:	4691      	mov	r9, r2
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	469a      	mov	sl, r3
 800b7ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7ce:	d807      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7d0:	2f62      	cmp	r7, #98	@ 0x62
 800b7d2:	d80a      	bhi.n	800b7ea <_printf_i+0x32>
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	f000 80d1 	beq.w	800b97c <_printf_i+0x1c4>
 800b7da:	2f58      	cmp	r7, #88	@ 0x58
 800b7dc:	f000 80b8 	beq.w	800b950 <_printf_i+0x198>
 800b7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7e8:	e03a      	b.n	800b860 <_printf_i+0xa8>
 800b7ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7ee:	2b15      	cmp	r3, #21
 800b7f0:	d8f6      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b7f8 <_printf_i+0x40>)
 800b7f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b865 	.word	0x0800b865
 800b800:	0800b7e1 	.word	0x0800b7e1
 800b804:	0800b7e1 	.word	0x0800b7e1
 800b808:	0800b7e1 	.word	0x0800b7e1
 800b80c:	0800b7e1 	.word	0x0800b7e1
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b7e1 	.word	0x0800b7e1
 800b818:	0800b7e1 	.word	0x0800b7e1
 800b81c:	0800b7e1 	.word	0x0800b7e1
 800b820:	0800b7e1 	.word	0x0800b7e1
 800b824:	0800b963 	.word	0x0800b963
 800b828:	0800b88f 	.word	0x0800b88f
 800b82c:	0800b91d 	.word	0x0800b91d
 800b830:	0800b7e1 	.word	0x0800b7e1
 800b834:	0800b7e1 	.word	0x0800b7e1
 800b838:	0800b985 	.word	0x0800b985
 800b83c:	0800b7e1 	.word	0x0800b7e1
 800b840:	0800b88f 	.word	0x0800b88f
 800b844:	0800b7e1 	.word	0x0800b7e1
 800b848:	0800b7e1 	.word	0x0800b7e1
 800b84c:	0800b925 	.word	0x0800b925
 800b850:	6833      	ldr	r3, [r6, #0]
 800b852:	1d1a      	adds	r2, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6032      	str	r2, [r6, #0]
 800b858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b85c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b860:	2301      	movs	r3, #1
 800b862:	e09c      	b.n	800b99e <_printf_i+0x1e6>
 800b864:	6833      	ldr	r3, [r6, #0]
 800b866:	6820      	ldr	r0, [r4, #0]
 800b868:	1d19      	adds	r1, r3, #4
 800b86a:	6031      	str	r1, [r6, #0]
 800b86c:	0606      	lsls	r6, r0, #24
 800b86e:	d501      	bpl.n	800b874 <_printf_i+0xbc>
 800b870:	681d      	ldr	r5, [r3, #0]
 800b872:	e003      	b.n	800b87c <_printf_i+0xc4>
 800b874:	0645      	lsls	r5, r0, #25
 800b876:	d5fb      	bpl.n	800b870 <_printf_i+0xb8>
 800b878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	da03      	bge.n	800b888 <_printf_i+0xd0>
 800b880:	232d      	movs	r3, #45	@ 0x2d
 800b882:	426d      	negs	r5, r5
 800b884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b888:	4858      	ldr	r0, [pc, #352]	@ (800b9ec <_printf_i+0x234>)
 800b88a:	230a      	movs	r3, #10
 800b88c:	e011      	b.n	800b8b2 <_printf_i+0xfa>
 800b88e:	6821      	ldr	r1, [r4, #0]
 800b890:	6833      	ldr	r3, [r6, #0]
 800b892:	0608      	lsls	r0, r1, #24
 800b894:	f853 5b04 	ldr.w	r5, [r3], #4
 800b898:	d402      	bmi.n	800b8a0 <_printf_i+0xe8>
 800b89a:	0649      	lsls	r1, r1, #25
 800b89c:	bf48      	it	mi
 800b89e:	b2ad      	uxthmi	r5, r5
 800b8a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8a2:	4852      	ldr	r0, [pc, #328]	@ (800b9ec <_printf_i+0x234>)
 800b8a4:	6033      	str	r3, [r6, #0]
 800b8a6:	bf14      	ite	ne
 800b8a8:	230a      	movne	r3, #10
 800b8aa:	2308      	moveq	r3, #8
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8b2:	6866      	ldr	r6, [r4, #4]
 800b8b4:	60a6      	str	r6, [r4, #8]
 800b8b6:	2e00      	cmp	r6, #0
 800b8b8:	db05      	blt.n	800b8c6 <_printf_i+0x10e>
 800b8ba:	6821      	ldr	r1, [r4, #0]
 800b8bc:	432e      	orrs	r6, r5
 800b8be:	f021 0104 	bic.w	r1, r1, #4
 800b8c2:	6021      	str	r1, [r4, #0]
 800b8c4:	d04b      	beq.n	800b95e <_printf_i+0x1a6>
 800b8c6:	4616      	mov	r6, r2
 800b8c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8cc:	fb03 5711 	mls	r7, r3, r1, r5
 800b8d0:	5dc7      	ldrb	r7, [r0, r7]
 800b8d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8d6:	462f      	mov	r7, r5
 800b8d8:	42bb      	cmp	r3, r7
 800b8da:	460d      	mov	r5, r1
 800b8dc:	d9f4      	bls.n	800b8c8 <_printf_i+0x110>
 800b8de:	2b08      	cmp	r3, #8
 800b8e0:	d10b      	bne.n	800b8fa <_printf_i+0x142>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	07df      	lsls	r7, r3, #31
 800b8e6:	d508      	bpl.n	800b8fa <_printf_i+0x142>
 800b8e8:	6923      	ldr	r3, [r4, #16]
 800b8ea:	6861      	ldr	r1, [r4, #4]
 800b8ec:	4299      	cmp	r1, r3
 800b8ee:	bfde      	ittt	le
 800b8f0:	2330      	movle	r3, #48	@ 0x30
 800b8f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8fa:	1b92      	subs	r2, r2, r6
 800b8fc:	6122      	str	r2, [r4, #16]
 800b8fe:	f8cd a000 	str.w	sl, [sp]
 800b902:	464b      	mov	r3, r9
 800b904:	aa03      	add	r2, sp, #12
 800b906:	4621      	mov	r1, r4
 800b908:	4640      	mov	r0, r8
 800b90a:	f7ff fee7 	bl	800b6dc <_printf_common>
 800b90e:	3001      	adds	r0, #1
 800b910:	d14a      	bne.n	800b9a8 <_printf_i+0x1f0>
 800b912:	f04f 30ff 	mov.w	r0, #4294967295
 800b916:	b004      	add	sp, #16
 800b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	f043 0320 	orr.w	r3, r3, #32
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	4832      	ldr	r0, [pc, #200]	@ (800b9f0 <_printf_i+0x238>)
 800b926:	2778      	movs	r7, #120	@ 0x78
 800b928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	6831      	ldr	r1, [r6, #0]
 800b930:	061f      	lsls	r7, r3, #24
 800b932:	f851 5b04 	ldr.w	r5, [r1], #4
 800b936:	d402      	bmi.n	800b93e <_printf_i+0x186>
 800b938:	065f      	lsls	r7, r3, #25
 800b93a:	bf48      	it	mi
 800b93c:	b2ad      	uxthmi	r5, r5
 800b93e:	6031      	str	r1, [r6, #0]
 800b940:	07d9      	lsls	r1, r3, #31
 800b942:	bf44      	itt	mi
 800b944:	f043 0320 	orrmi.w	r3, r3, #32
 800b948:	6023      	strmi	r3, [r4, #0]
 800b94a:	b11d      	cbz	r5, 800b954 <_printf_i+0x19c>
 800b94c:	2310      	movs	r3, #16
 800b94e:	e7ad      	b.n	800b8ac <_printf_i+0xf4>
 800b950:	4826      	ldr	r0, [pc, #152]	@ (800b9ec <_printf_i+0x234>)
 800b952:	e7e9      	b.n	800b928 <_printf_i+0x170>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	f023 0320 	bic.w	r3, r3, #32
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	e7f6      	b.n	800b94c <_printf_i+0x194>
 800b95e:	4616      	mov	r6, r2
 800b960:	e7bd      	b.n	800b8de <_printf_i+0x126>
 800b962:	6833      	ldr	r3, [r6, #0]
 800b964:	6825      	ldr	r5, [r4, #0]
 800b966:	6961      	ldr	r1, [r4, #20]
 800b968:	1d18      	adds	r0, r3, #4
 800b96a:	6030      	str	r0, [r6, #0]
 800b96c:	062e      	lsls	r6, r5, #24
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	d501      	bpl.n	800b976 <_printf_i+0x1be>
 800b972:	6019      	str	r1, [r3, #0]
 800b974:	e002      	b.n	800b97c <_printf_i+0x1c4>
 800b976:	0668      	lsls	r0, r5, #25
 800b978:	d5fb      	bpl.n	800b972 <_printf_i+0x1ba>
 800b97a:	8019      	strh	r1, [r3, #0]
 800b97c:	2300      	movs	r3, #0
 800b97e:	6123      	str	r3, [r4, #16]
 800b980:	4616      	mov	r6, r2
 800b982:	e7bc      	b.n	800b8fe <_printf_i+0x146>
 800b984:	6833      	ldr	r3, [r6, #0]
 800b986:	1d1a      	adds	r2, r3, #4
 800b988:	6032      	str	r2, [r6, #0]
 800b98a:	681e      	ldr	r6, [r3, #0]
 800b98c:	6862      	ldr	r2, [r4, #4]
 800b98e:	2100      	movs	r1, #0
 800b990:	4630      	mov	r0, r6
 800b992:	f7f4 fc1d 	bl	80001d0 <memchr>
 800b996:	b108      	cbz	r0, 800b99c <_printf_i+0x1e4>
 800b998:	1b80      	subs	r0, r0, r6
 800b99a:	6060      	str	r0, [r4, #4]
 800b99c:	6863      	ldr	r3, [r4, #4]
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9a6:	e7aa      	b.n	800b8fe <_printf_i+0x146>
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	47d0      	blx	sl
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d0ad      	beq.n	800b912 <_printf_i+0x15a>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	079b      	lsls	r3, r3, #30
 800b9ba:	d413      	bmi.n	800b9e4 <_printf_i+0x22c>
 800b9bc:	68e0      	ldr	r0, [r4, #12]
 800b9be:	9b03      	ldr	r3, [sp, #12]
 800b9c0:	4298      	cmp	r0, r3
 800b9c2:	bfb8      	it	lt
 800b9c4:	4618      	movlt	r0, r3
 800b9c6:	e7a6      	b.n	800b916 <_printf_i+0x15e>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	47d0      	blx	sl
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d09d      	beq.n	800b912 <_printf_i+0x15a>
 800b9d6:	3501      	adds	r5, #1
 800b9d8:	68e3      	ldr	r3, [r4, #12]
 800b9da:	9903      	ldr	r1, [sp, #12]
 800b9dc:	1a5b      	subs	r3, r3, r1
 800b9de:	42ab      	cmp	r3, r5
 800b9e0:	dcf2      	bgt.n	800b9c8 <_printf_i+0x210>
 800b9e2:	e7eb      	b.n	800b9bc <_printf_i+0x204>
 800b9e4:	2500      	movs	r5, #0
 800b9e6:	f104 0619 	add.w	r6, r4, #25
 800b9ea:	e7f5      	b.n	800b9d8 <_printf_i+0x220>
 800b9ec:	0800df0e 	.word	0x0800df0e
 800b9f0:	0800df1f 	.word	0x0800df1f

0800b9f4 <std>:
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b9fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba02:	6083      	str	r3, [r0, #8]
 800ba04:	8181      	strh	r1, [r0, #12]
 800ba06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba08:	81c2      	strh	r2, [r0, #14]
 800ba0a:	6183      	str	r3, [r0, #24]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	2208      	movs	r2, #8
 800ba10:	305c      	adds	r0, #92	@ 0x5c
 800ba12:	f000 f92a 	bl	800bc6a <memset>
 800ba16:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <std+0x58>)
 800ba18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba50 <std+0x5c>)
 800ba1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba54 <std+0x60>)
 800ba20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba22:	4b0d      	ldr	r3, [pc, #52]	@ (800ba58 <std+0x64>)
 800ba24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba26:	4b0d      	ldr	r3, [pc, #52]	@ (800ba5c <std+0x68>)
 800ba28:	6224      	str	r4, [r4, #32]
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d006      	beq.n	800ba3c <std+0x48>
 800ba2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba32:	4294      	cmp	r4, r2
 800ba34:	d002      	beq.n	800ba3c <std+0x48>
 800ba36:	33d0      	adds	r3, #208	@ 0xd0
 800ba38:	429c      	cmp	r4, r3
 800ba3a:	d105      	bne.n	800ba48 <std+0x54>
 800ba3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba44:	f000 b9a4 	b.w	800bd90 <__retarget_lock_init_recursive>
 800ba48:	bd10      	pop	{r4, pc}
 800ba4a:	bf00      	nop
 800ba4c:	0800bbe5 	.word	0x0800bbe5
 800ba50:	0800bc07 	.word	0x0800bc07
 800ba54:	0800bc3f 	.word	0x0800bc3f
 800ba58:	0800bc63 	.word	0x0800bc63
 800ba5c:	2000179c 	.word	0x2000179c

0800ba60 <stdio_exit_handler>:
 800ba60:	4a02      	ldr	r2, [pc, #8]	@ (800ba6c <stdio_exit_handler+0xc>)
 800ba62:	4903      	ldr	r1, [pc, #12]	@ (800ba70 <stdio_exit_handler+0x10>)
 800ba64:	4803      	ldr	r0, [pc, #12]	@ (800ba74 <stdio_exit_handler+0x14>)
 800ba66:	f000 b869 	b.w	800bb3c <_fwalk_sglue>
 800ba6a:	bf00      	nop
 800ba6c:	20000110 	.word	0x20000110
 800ba70:	0800d715 	.word	0x0800d715
 800ba74:	20000120 	.word	0x20000120

0800ba78 <cleanup_stdio>:
 800ba78:	6841      	ldr	r1, [r0, #4]
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <cleanup_stdio+0x34>)
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	4604      	mov	r4, r0
 800ba82:	d001      	beq.n	800ba88 <cleanup_stdio+0x10>
 800ba84:	f001 fe46 	bl	800d714 <_fflush_r>
 800ba88:	68a1      	ldr	r1, [r4, #8]
 800ba8a:	4b09      	ldr	r3, [pc, #36]	@ (800bab0 <cleanup_stdio+0x38>)
 800ba8c:	4299      	cmp	r1, r3
 800ba8e:	d002      	beq.n	800ba96 <cleanup_stdio+0x1e>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f001 fe3f 	bl	800d714 <_fflush_r>
 800ba96:	68e1      	ldr	r1, [r4, #12]
 800ba98:	4b06      	ldr	r3, [pc, #24]	@ (800bab4 <cleanup_stdio+0x3c>)
 800ba9a:	4299      	cmp	r1, r3
 800ba9c:	d004      	beq.n	800baa8 <cleanup_stdio+0x30>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa4:	f001 be36 	b.w	800d714 <_fflush_r>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	2000179c 	.word	0x2000179c
 800bab0:	20001804 	.word	0x20001804
 800bab4:	2000186c 	.word	0x2000186c

0800bab8 <global_stdio_init.part.0>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	4b0b      	ldr	r3, [pc, #44]	@ (800bae8 <global_stdio_init.part.0+0x30>)
 800babc:	4c0b      	ldr	r4, [pc, #44]	@ (800baec <global_stdio_init.part.0+0x34>)
 800babe:	4a0c      	ldr	r2, [pc, #48]	@ (800baf0 <global_stdio_init.part.0+0x38>)
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	4620      	mov	r0, r4
 800bac4:	2200      	movs	r2, #0
 800bac6:	2104      	movs	r1, #4
 800bac8:	f7ff ff94 	bl	800b9f4 <std>
 800bacc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bad0:	2201      	movs	r2, #1
 800bad2:	2109      	movs	r1, #9
 800bad4:	f7ff ff8e 	bl	800b9f4 <std>
 800bad8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800badc:	2202      	movs	r2, #2
 800bade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae2:	2112      	movs	r1, #18
 800bae4:	f7ff bf86 	b.w	800b9f4 <std>
 800bae8:	200018d4 	.word	0x200018d4
 800baec:	2000179c 	.word	0x2000179c
 800baf0:	0800ba61 	.word	0x0800ba61

0800baf4 <__sfp_lock_acquire>:
 800baf4:	4801      	ldr	r0, [pc, #4]	@ (800bafc <__sfp_lock_acquire+0x8>)
 800baf6:	f000 b94c 	b.w	800bd92 <__retarget_lock_acquire_recursive>
 800bafa:	bf00      	nop
 800bafc:	200018dd 	.word	0x200018dd

0800bb00 <__sfp_lock_release>:
 800bb00:	4801      	ldr	r0, [pc, #4]	@ (800bb08 <__sfp_lock_release+0x8>)
 800bb02:	f000 b947 	b.w	800bd94 <__retarget_lock_release_recursive>
 800bb06:	bf00      	nop
 800bb08:	200018dd 	.word	0x200018dd

0800bb0c <__sinit>:
 800bb0c:	b510      	push	{r4, lr}
 800bb0e:	4604      	mov	r4, r0
 800bb10:	f7ff fff0 	bl	800baf4 <__sfp_lock_acquire>
 800bb14:	6a23      	ldr	r3, [r4, #32]
 800bb16:	b11b      	cbz	r3, 800bb20 <__sinit+0x14>
 800bb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb1c:	f7ff bff0 	b.w	800bb00 <__sfp_lock_release>
 800bb20:	4b04      	ldr	r3, [pc, #16]	@ (800bb34 <__sinit+0x28>)
 800bb22:	6223      	str	r3, [r4, #32]
 800bb24:	4b04      	ldr	r3, [pc, #16]	@ (800bb38 <__sinit+0x2c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f5      	bne.n	800bb18 <__sinit+0xc>
 800bb2c:	f7ff ffc4 	bl	800bab8 <global_stdio_init.part.0>
 800bb30:	e7f2      	b.n	800bb18 <__sinit+0xc>
 800bb32:	bf00      	nop
 800bb34:	0800ba79 	.word	0x0800ba79
 800bb38:	200018d4 	.word	0x200018d4

0800bb3c <_fwalk_sglue>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	4607      	mov	r7, r0
 800bb42:	4688      	mov	r8, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	2600      	movs	r6, #0
 800bb48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb4c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb50:	d505      	bpl.n	800bb5e <_fwalk_sglue+0x22>
 800bb52:	6824      	ldr	r4, [r4, #0]
 800bb54:	2c00      	cmp	r4, #0
 800bb56:	d1f7      	bne.n	800bb48 <_fwalk_sglue+0xc>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d907      	bls.n	800bb74 <_fwalk_sglue+0x38>
 800bb64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	d003      	beq.n	800bb74 <_fwalk_sglue+0x38>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4638      	mov	r0, r7
 800bb70:	47c0      	blx	r8
 800bb72:	4306      	orrs	r6, r0
 800bb74:	3568      	adds	r5, #104	@ 0x68
 800bb76:	e7e9      	b.n	800bb4c <_fwalk_sglue+0x10>

0800bb78 <sniprintf>:
 800bb78:	b40c      	push	{r2, r3}
 800bb7a:	b530      	push	{r4, r5, lr}
 800bb7c:	4b18      	ldr	r3, [pc, #96]	@ (800bbe0 <sniprintf+0x68>)
 800bb7e:	1e0c      	subs	r4, r1, #0
 800bb80:	681d      	ldr	r5, [r3, #0]
 800bb82:	b09d      	sub	sp, #116	@ 0x74
 800bb84:	da08      	bge.n	800bb98 <sniprintf+0x20>
 800bb86:	238b      	movs	r3, #139	@ 0x8b
 800bb88:	602b      	str	r3, [r5, #0]
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	b01d      	add	sp, #116	@ 0x74
 800bb90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb94:	b002      	add	sp, #8
 800bb96:	4770      	bx	lr
 800bb98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bba0:	f04f 0300 	mov.w	r3, #0
 800bba4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bba6:	bf14      	ite	ne
 800bba8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bbac:	4623      	moveq	r3, r4
 800bbae:	9304      	str	r3, [sp, #16]
 800bbb0:	9307      	str	r3, [sp, #28]
 800bbb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bbb6:	9002      	str	r0, [sp, #8]
 800bbb8:	9006      	str	r0, [sp, #24]
 800bbba:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bbbe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bbc0:	ab21      	add	r3, sp, #132	@ 0x84
 800bbc2:	a902      	add	r1, sp, #8
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	f001 fc24 	bl	800d414 <_svfiprintf_r>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	bfbc      	itt	lt
 800bbd0:	238b      	movlt	r3, #139	@ 0x8b
 800bbd2:	602b      	strlt	r3, [r5, #0]
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	d0da      	beq.n	800bb8e <sniprintf+0x16>
 800bbd8:	9b02      	ldr	r3, [sp, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e7d6      	b.n	800bb8e <sniprintf+0x16>
 800bbe0:	2000011c 	.word	0x2000011c

0800bbe4 <__sread>:
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbec:	f000 f882 	bl	800bcf4 <_read_r>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	bfab      	itete	ge
 800bbf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbf6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbf8:	181b      	addge	r3, r3, r0
 800bbfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbfe:	bfac      	ite	ge
 800bc00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc02:	81a3      	strhlt	r3, [r4, #12]
 800bc04:	bd10      	pop	{r4, pc}

0800bc06 <__swrite>:
 800bc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0a:	461f      	mov	r7, r3
 800bc0c:	898b      	ldrh	r3, [r1, #12]
 800bc0e:	05db      	lsls	r3, r3, #23
 800bc10:	4605      	mov	r5, r0
 800bc12:	460c      	mov	r4, r1
 800bc14:	4616      	mov	r6, r2
 800bc16:	d505      	bpl.n	800bc24 <__swrite+0x1e>
 800bc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f000 f856 	bl	800bcd0 <_lseek_r>
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc2e:	81a3      	strh	r3, [r4, #12]
 800bc30:	4632      	mov	r2, r6
 800bc32:	463b      	mov	r3, r7
 800bc34:	4628      	mov	r0, r5
 800bc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3a:	f000 b86d 	b.w	800bd18 <_write_r>

0800bc3e <__sseek>:
 800bc3e:	b510      	push	{r4, lr}
 800bc40:	460c      	mov	r4, r1
 800bc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc46:	f000 f843 	bl	800bcd0 <_lseek_r>
 800bc4a:	1c43      	adds	r3, r0, #1
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	bf15      	itete	ne
 800bc50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc5a:	81a3      	strheq	r3, [r4, #12]
 800bc5c:	bf18      	it	ne
 800bc5e:	81a3      	strhne	r3, [r4, #12]
 800bc60:	bd10      	pop	{r4, pc}

0800bc62 <__sclose>:
 800bc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc66:	f000 b823 	b.w	800bcb0 <_close_r>

0800bc6a <memset>:
 800bc6a:	4402      	add	r2, r0
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d100      	bne.n	800bc74 <memset+0xa>
 800bc72:	4770      	bx	lr
 800bc74:	f803 1b01 	strb.w	r1, [r3], #1
 800bc78:	e7f9      	b.n	800bc6e <memset+0x4>

0800bc7a <strstr>:
 800bc7a:	780a      	ldrb	r2, [r1, #0]
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	b96a      	cbnz	r2, 800bc9c <strstr+0x22>
 800bc80:	bd70      	pop	{r4, r5, r6, pc}
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d109      	bne.n	800bc9a <strstr+0x20>
 800bc86:	460c      	mov	r4, r1
 800bc88:	4605      	mov	r5, r0
 800bc8a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0f6      	beq.n	800bc80 <strstr+0x6>
 800bc92:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bc96:	429e      	cmp	r6, r3
 800bc98:	d0f7      	beq.n	800bc8a <strstr+0x10>
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	7803      	ldrb	r3, [r0, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1ef      	bne.n	800bc82 <strstr+0x8>
 800bca2:	4618      	mov	r0, r3
 800bca4:	e7ec      	b.n	800bc80 <strstr+0x6>
	...

0800bca8 <_localeconv_r>:
 800bca8:	4800      	ldr	r0, [pc, #0]	@ (800bcac <_localeconv_r+0x4>)
 800bcaa:	4770      	bx	lr
 800bcac:	2000025c 	.word	0x2000025c

0800bcb0 <_close_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d06      	ldr	r5, [pc, #24]	@ (800bccc <_close_r+0x1c>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	f7f6 fa46 	bl	800214c <_close>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_close_r+0x1a>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_close_r+0x1a>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	200018d8 	.word	0x200018d8

0800bcd0 <_lseek_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	@ (800bcf0 <_lseek_r+0x20>)
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	4611      	mov	r1, r2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	602a      	str	r2, [r5, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f7f6 fa5b 	bl	800219a <_lseek>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_lseek_r+0x1e>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_lseek_r+0x1e>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	200018d8 	.word	0x200018d8

0800bcf4 <_read_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	@ (800bd14 <_read_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f6 f9e9 	bl	80020da <_read>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_read_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_read_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	200018d8 	.word	0x200018d8

0800bd18 <_write_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d07      	ldr	r5, [pc, #28]	@ (800bd38 <_write_r+0x20>)
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	4608      	mov	r0, r1
 800bd20:	4611      	mov	r1, r2
 800bd22:	2200      	movs	r2, #0
 800bd24:	602a      	str	r2, [r5, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	f7f6 f9f4 	bl	8002114 <_write>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_write_r+0x1e>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_write_r+0x1e>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	200018d8 	.word	0x200018d8

0800bd3c <__errno>:
 800bd3c:	4b01      	ldr	r3, [pc, #4]	@ (800bd44 <__errno+0x8>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2000011c 	.word	0x2000011c

0800bd48 <__libc_init_array>:
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	4d0d      	ldr	r5, [pc, #52]	@ (800bd80 <__libc_init_array+0x38>)
 800bd4c:	4c0d      	ldr	r4, [pc, #52]	@ (800bd84 <__libc_init_array+0x3c>)
 800bd4e:	1b64      	subs	r4, r4, r5
 800bd50:	10a4      	asrs	r4, r4, #2
 800bd52:	2600      	movs	r6, #0
 800bd54:	42a6      	cmp	r6, r4
 800bd56:	d109      	bne.n	800bd6c <__libc_init_array+0x24>
 800bd58:	4d0b      	ldr	r5, [pc, #44]	@ (800bd88 <__libc_init_array+0x40>)
 800bd5a:	4c0c      	ldr	r4, [pc, #48]	@ (800bd8c <__libc_init_array+0x44>)
 800bd5c:	f002 f86a 	bl	800de34 <_init>
 800bd60:	1b64      	subs	r4, r4, r5
 800bd62:	10a4      	asrs	r4, r4, #2
 800bd64:	2600      	movs	r6, #0
 800bd66:	42a6      	cmp	r6, r4
 800bd68:	d105      	bne.n	800bd76 <__libc_init_array+0x2e>
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd70:	4798      	blx	r3
 800bd72:	3601      	adds	r6, #1
 800bd74:	e7ee      	b.n	800bd54 <__libc_init_array+0xc>
 800bd76:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd7a:	4798      	blx	r3
 800bd7c:	3601      	adds	r6, #1
 800bd7e:	e7f2      	b.n	800bd66 <__libc_init_array+0x1e>
 800bd80:	0800e27c 	.word	0x0800e27c
 800bd84:	0800e27c 	.word	0x0800e27c
 800bd88:	0800e27c 	.word	0x0800e27c
 800bd8c:	0800e280 	.word	0x0800e280

0800bd90 <__retarget_lock_init_recursive>:
 800bd90:	4770      	bx	lr

0800bd92 <__retarget_lock_acquire_recursive>:
 800bd92:	4770      	bx	lr

0800bd94 <__retarget_lock_release_recursive>:
 800bd94:	4770      	bx	lr

0800bd96 <memcpy>:
 800bd96:	440a      	add	r2, r1
 800bd98:	4291      	cmp	r1, r2
 800bd9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd9e:	d100      	bne.n	800bda2 <memcpy+0xc>
 800bda0:	4770      	bx	lr
 800bda2:	b510      	push	{r4, lr}
 800bda4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bda8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdac:	4291      	cmp	r1, r2
 800bdae:	d1f9      	bne.n	800bda4 <memcpy+0xe>
 800bdb0:	bd10      	pop	{r4, pc}

0800bdb2 <quorem>:
 800bdb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb6:	6903      	ldr	r3, [r0, #16]
 800bdb8:	690c      	ldr	r4, [r1, #16]
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	db7e      	blt.n	800bebe <quorem+0x10c>
 800bdc0:	3c01      	subs	r4, #1
 800bdc2:	f101 0814 	add.w	r8, r1, #20
 800bdc6:	00a3      	lsls	r3, r4, #2
 800bdc8:	f100 0514 	add.w	r5, r0, #20
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bdd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bddc:	3301      	adds	r3, #1
 800bdde:	429a      	cmp	r2, r3
 800bde0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bde4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bde8:	d32e      	bcc.n	800be48 <quorem+0x96>
 800bdea:	f04f 0a00 	mov.w	sl, #0
 800bdee:	46c4      	mov	ip, r8
 800bdf0:	46ae      	mov	lr, r5
 800bdf2:	46d3      	mov	fp, sl
 800bdf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdf8:	b298      	uxth	r0, r3
 800bdfa:	fb06 a000 	mla	r0, r6, r0, sl
 800bdfe:	0c02      	lsrs	r2, r0, #16
 800be00:	0c1b      	lsrs	r3, r3, #16
 800be02:	fb06 2303 	mla	r3, r6, r3, r2
 800be06:	f8de 2000 	ldr.w	r2, [lr]
 800be0a:	b280      	uxth	r0, r0
 800be0c:	b292      	uxth	r2, r2
 800be0e:	1a12      	subs	r2, r2, r0
 800be10:	445a      	add	r2, fp
 800be12:	f8de 0000 	ldr.w	r0, [lr]
 800be16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be24:	b292      	uxth	r2, r2
 800be26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be2a:	45e1      	cmp	r9, ip
 800be2c:	f84e 2b04 	str.w	r2, [lr], #4
 800be30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be34:	d2de      	bcs.n	800bdf4 <quorem+0x42>
 800be36:	9b00      	ldr	r3, [sp, #0]
 800be38:	58eb      	ldr	r3, [r5, r3]
 800be3a:	b92b      	cbnz	r3, 800be48 <quorem+0x96>
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	3b04      	subs	r3, #4
 800be40:	429d      	cmp	r5, r3
 800be42:	461a      	mov	r2, r3
 800be44:	d32f      	bcc.n	800bea6 <quorem+0xf4>
 800be46:	613c      	str	r4, [r7, #16]
 800be48:	4638      	mov	r0, r7
 800be4a:	f001 f97f 	bl	800d14c <__mcmp>
 800be4e:	2800      	cmp	r0, #0
 800be50:	db25      	blt.n	800be9e <quorem+0xec>
 800be52:	4629      	mov	r1, r5
 800be54:	2000      	movs	r0, #0
 800be56:	f858 2b04 	ldr.w	r2, [r8], #4
 800be5a:	f8d1 c000 	ldr.w	ip, [r1]
 800be5e:	fa1f fe82 	uxth.w	lr, r2
 800be62:	fa1f f38c 	uxth.w	r3, ip
 800be66:	eba3 030e 	sub.w	r3, r3, lr
 800be6a:	4403      	add	r3, r0
 800be6c:	0c12      	lsrs	r2, r2, #16
 800be6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be76:	b29b      	uxth	r3, r3
 800be78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be7c:	45c1      	cmp	r9, r8
 800be7e:	f841 3b04 	str.w	r3, [r1], #4
 800be82:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be86:	d2e6      	bcs.n	800be56 <quorem+0xa4>
 800be88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be90:	b922      	cbnz	r2, 800be9c <quorem+0xea>
 800be92:	3b04      	subs	r3, #4
 800be94:	429d      	cmp	r5, r3
 800be96:	461a      	mov	r2, r3
 800be98:	d30b      	bcc.n	800beb2 <quorem+0x100>
 800be9a:	613c      	str	r4, [r7, #16]
 800be9c:	3601      	adds	r6, #1
 800be9e:	4630      	mov	r0, r6
 800bea0:	b003      	add	sp, #12
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	6812      	ldr	r2, [r2, #0]
 800bea8:	3b04      	subs	r3, #4
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d1cb      	bne.n	800be46 <quorem+0x94>
 800beae:	3c01      	subs	r4, #1
 800beb0:	e7c6      	b.n	800be40 <quorem+0x8e>
 800beb2:	6812      	ldr	r2, [r2, #0]
 800beb4:	3b04      	subs	r3, #4
 800beb6:	2a00      	cmp	r2, #0
 800beb8:	d1ef      	bne.n	800be9a <quorem+0xe8>
 800beba:	3c01      	subs	r4, #1
 800bebc:	e7ea      	b.n	800be94 <quorem+0xe2>
 800bebe:	2000      	movs	r0, #0
 800bec0:	e7ee      	b.n	800bea0 <quorem+0xee>
 800bec2:	0000      	movs	r0, r0
 800bec4:	0000      	movs	r0, r0
	...

0800bec8 <_dtoa_r>:
 800bec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800becc:	69c7      	ldr	r7, [r0, #28]
 800bece:	b097      	sub	sp, #92	@ 0x5c
 800bed0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bed4:	ec55 4b10 	vmov	r4, r5, d0
 800bed8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800beda:	9107      	str	r1, [sp, #28]
 800bedc:	4681      	mov	r9, r0
 800bede:	920c      	str	r2, [sp, #48]	@ 0x30
 800bee0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bee2:	b97f      	cbnz	r7, 800bf04 <_dtoa_r+0x3c>
 800bee4:	2010      	movs	r0, #16
 800bee6:	f000 fe09 	bl	800cafc <malloc>
 800beea:	4602      	mov	r2, r0
 800beec:	f8c9 001c 	str.w	r0, [r9, #28]
 800bef0:	b920      	cbnz	r0, 800befc <_dtoa_r+0x34>
 800bef2:	4ba9      	ldr	r3, [pc, #676]	@ (800c198 <_dtoa_r+0x2d0>)
 800bef4:	21ef      	movs	r1, #239	@ 0xef
 800bef6:	48a9      	ldr	r0, [pc, #676]	@ (800c19c <_dtoa_r+0x2d4>)
 800bef8:	f001 fc5e 	bl	800d7b8 <__assert_func>
 800befc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf00:	6007      	str	r7, [r0, #0]
 800bf02:	60c7      	str	r7, [r0, #12]
 800bf04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf08:	6819      	ldr	r1, [r3, #0]
 800bf0a:	b159      	cbz	r1, 800bf24 <_dtoa_r+0x5c>
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	604a      	str	r2, [r1, #4]
 800bf10:	2301      	movs	r3, #1
 800bf12:	4093      	lsls	r3, r2
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	4648      	mov	r0, r9
 800bf18:	f000 fee6 	bl	800cce8 <_Bfree>
 800bf1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bf20:	2200      	movs	r2, #0
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	1e2b      	subs	r3, r5, #0
 800bf26:	bfb9      	ittee	lt
 800bf28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf2c:	9305      	strlt	r3, [sp, #20]
 800bf2e:	2300      	movge	r3, #0
 800bf30:	6033      	strge	r3, [r6, #0]
 800bf32:	9f05      	ldr	r7, [sp, #20]
 800bf34:	4b9a      	ldr	r3, [pc, #616]	@ (800c1a0 <_dtoa_r+0x2d8>)
 800bf36:	bfbc      	itt	lt
 800bf38:	2201      	movlt	r2, #1
 800bf3a:	6032      	strlt	r2, [r6, #0]
 800bf3c:	43bb      	bics	r3, r7
 800bf3e:	d112      	bne.n	800bf66 <_dtoa_r+0x9e>
 800bf40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf4c:	4323      	orrs	r3, r4
 800bf4e:	f000 855a 	beq.w	800ca06 <_dtoa_r+0xb3e>
 800bf52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c1b4 <_dtoa_r+0x2ec>
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 855c 	beq.w	800ca16 <_dtoa_r+0xb4e>
 800bf5e:	f10a 0303 	add.w	r3, sl, #3
 800bf62:	f000 bd56 	b.w	800ca12 <_dtoa_r+0xb4a>
 800bf66:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	ec51 0b17 	vmov	r0, r1, d7
 800bf70:	2300      	movs	r3, #0
 800bf72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bf76:	f7f4 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf7a:	4680      	mov	r8, r0
 800bf7c:	b158      	cbz	r0, 800bf96 <_dtoa_r+0xce>
 800bf7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf80:	2301      	movs	r3, #1
 800bf82:	6013      	str	r3, [r2, #0]
 800bf84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf86:	b113      	cbz	r3, 800bf8e <_dtoa_r+0xc6>
 800bf88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bf8a:	4b86      	ldr	r3, [pc, #536]	@ (800c1a4 <_dtoa_r+0x2dc>)
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c1b8 <_dtoa_r+0x2f0>
 800bf92:	f000 bd40 	b.w	800ca16 <_dtoa_r+0xb4e>
 800bf96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bf9a:	aa14      	add	r2, sp, #80	@ 0x50
 800bf9c:	a915      	add	r1, sp, #84	@ 0x54
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	f001 f984 	bl	800d2ac <__d2b>
 800bfa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bfa8:	9002      	str	r0, [sp, #8]
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	d078      	beq.n	800c0a0 <_dtoa_r+0x1d8>
 800bfae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bfb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bfbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bfc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bfc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bfc8:	4619      	mov	r1, r3
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4b76      	ldr	r3, [pc, #472]	@ (800c1a8 <_dtoa_r+0x2e0>)
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c180 <_dtoa_r+0x2b8>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fb0e 	bl	80005f8 <__aeabi_dmul>
 800bfdc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c188 <_dtoa_r+0x2c0>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 f953 	bl	800028c <__adddf3>
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	460d      	mov	r5, r1
 800bfec:	f7f4 fa9a 	bl	8000524 <__aeabi_i2d>
 800bff0:	a367      	add	r3, pc, #412	@ (adr r3, 800c190 <_dtoa_r+0x2c8>)
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	f7f4 faff 	bl	80005f8 <__aeabi_dmul>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 f943 	bl	800028c <__adddf3>
 800c006:	4604      	mov	r4, r0
 800c008:	460d      	mov	r5, r1
 800c00a:	f7f4 fda5 	bl	8000b58 <__aeabi_d2iz>
 800c00e:	2200      	movs	r2, #0
 800c010:	4607      	mov	r7, r0
 800c012:	2300      	movs	r3, #0
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	f7f4 fd60 	bl	8000adc <__aeabi_dcmplt>
 800c01c:	b140      	cbz	r0, 800c030 <_dtoa_r+0x168>
 800c01e:	4638      	mov	r0, r7
 800c020:	f7f4 fa80 	bl	8000524 <__aeabi_i2d>
 800c024:	4622      	mov	r2, r4
 800c026:	462b      	mov	r3, r5
 800c028:	f7f4 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c02c:	b900      	cbnz	r0, 800c030 <_dtoa_r+0x168>
 800c02e:	3f01      	subs	r7, #1
 800c030:	2f16      	cmp	r7, #22
 800c032:	d852      	bhi.n	800c0da <_dtoa_r+0x212>
 800c034:	4b5d      	ldr	r3, [pc, #372]	@ (800c1ac <_dtoa_r+0x2e4>)
 800c036:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c042:	f7f4 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800c046:	2800      	cmp	r0, #0
 800c048:	d049      	beq.n	800c0de <_dtoa_r+0x216>
 800c04a:	3f01      	subs	r7, #1
 800c04c:	2300      	movs	r3, #0
 800c04e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c050:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c052:	1b9b      	subs	r3, r3, r6
 800c054:	1e5a      	subs	r2, r3, #1
 800c056:	bf45      	ittet	mi
 800c058:	f1c3 0301 	rsbmi	r3, r3, #1
 800c05c:	9300      	strmi	r3, [sp, #0]
 800c05e:	2300      	movpl	r3, #0
 800c060:	2300      	movmi	r3, #0
 800c062:	9206      	str	r2, [sp, #24]
 800c064:	bf54      	ite	pl
 800c066:	9300      	strpl	r3, [sp, #0]
 800c068:	9306      	strmi	r3, [sp, #24]
 800c06a:	2f00      	cmp	r7, #0
 800c06c:	db39      	blt.n	800c0e2 <_dtoa_r+0x21a>
 800c06e:	9b06      	ldr	r3, [sp, #24]
 800c070:	970d      	str	r7, [sp, #52]	@ 0x34
 800c072:	443b      	add	r3, r7
 800c074:	9306      	str	r3, [sp, #24]
 800c076:	2300      	movs	r3, #0
 800c078:	9308      	str	r3, [sp, #32]
 800c07a:	9b07      	ldr	r3, [sp, #28]
 800c07c:	2b09      	cmp	r3, #9
 800c07e:	d863      	bhi.n	800c148 <_dtoa_r+0x280>
 800c080:	2b05      	cmp	r3, #5
 800c082:	bfc4      	itt	gt
 800c084:	3b04      	subgt	r3, #4
 800c086:	9307      	strgt	r3, [sp, #28]
 800c088:	9b07      	ldr	r3, [sp, #28]
 800c08a:	f1a3 0302 	sub.w	r3, r3, #2
 800c08e:	bfcc      	ite	gt
 800c090:	2400      	movgt	r4, #0
 800c092:	2401      	movle	r4, #1
 800c094:	2b03      	cmp	r3, #3
 800c096:	d863      	bhi.n	800c160 <_dtoa_r+0x298>
 800c098:	e8df f003 	tbb	[pc, r3]
 800c09c:	2b375452 	.word	0x2b375452
 800c0a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c0a4:	441e      	add	r6, r3
 800c0a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	bfc1      	itttt	gt
 800c0ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c0b2:	409f      	lslgt	r7, r3
 800c0b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c0b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c0bc:	bfd6      	itet	le
 800c0be:	f1c3 0320 	rsble	r3, r3, #32
 800c0c2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c0c6:	fa04 f003 	lslle.w	r0, r4, r3
 800c0ca:	f7f4 fa1b 	bl	8000504 <__aeabi_ui2d>
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c0d4:	3e01      	subs	r6, #1
 800c0d6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c0d8:	e776      	b.n	800bfc8 <_dtoa_r+0x100>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e7b7      	b.n	800c04e <_dtoa_r+0x186>
 800c0de:	9010      	str	r0, [sp, #64]	@ 0x40
 800c0e0:	e7b6      	b.n	800c050 <_dtoa_r+0x188>
 800c0e2:	9b00      	ldr	r3, [sp, #0]
 800c0e4:	1bdb      	subs	r3, r3, r7
 800c0e6:	9300      	str	r3, [sp, #0]
 800c0e8:	427b      	negs	r3, r7
 800c0ea:	9308      	str	r3, [sp, #32]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0f0:	e7c3      	b.n	800c07a <_dtoa_r+0x1b2>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0f8:	eb07 0b03 	add.w	fp, r7, r3
 800c0fc:	f10b 0301 	add.w	r3, fp, #1
 800c100:	2b01      	cmp	r3, #1
 800c102:	9303      	str	r3, [sp, #12]
 800c104:	bfb8      	it	lt
 800c106:	2301      	movlt	r3, #1
 800c108:	e006      	b.n	800c118 <_dtoa_r+0x250>
 800c10a:	2301      	movs	r3, #1
 800c10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c10e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c110:	2b00      	cmp	r3, #0
 800c112:	dd28      	ble.n	800c166 <_dtoa_r+0x29e>
 800c114:	469b      	mov	fp, r3
 800c116:	9303      	str	r3, [sp, #12]
 800c118:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c11c:	2100      	movs	r1, #0
 800c11e:	2204      	movs	r2, #4
 800c120:	f102 0514 	add.w	r5, r2, #20
 800c124:	429d      	cmp	r5, r3
 800c126:	d926      	bls.n	800c176 <_dtoa_r+0x2ae>
 800c128:	6041      	str	r1, [r0, #4]
 800c12a:	4648      	mov	r0, r9
 800c12c:	f000 fd9c 	bl	800cc68 <_Balloc>
 800c130:	4682      	mov	sl, r0
 800c132:	2800      	cmp	r0, #0
 800c134:	d142      	bne.n	800c1bc <_dtoa_r+0x2f4>
 800c136:	4b1e      	ldr	r3, [pc, #120]	@ (800c1b0 <_dtoa_r+0x2e8>)
 800c138:	4602      	mov	r2, r0
 800c13a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c13e:	e6da      	b.n	800bef6 <_dtoa_r+0x2e>
 800c140:	2300      	movs	r3, #0
 800c142:	e7e3      	b.n	800c10c <_dtoa_r+0x244>
 800c144:	2300      	movs	r3, #0
 800c146:	e7d5      	b.n	800c0f4 <_dtoa_r+0x22c>
 800c148:	2401      	movs	r4, #1
 800c14a:	2300      	movs	r3, #0
 800c14c:	9307      	str	r3, [sp, #28]
 800c14e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c150:	f04f 3bff 	mov.w	fp, #4294967295
 800c154:	2200      	movs	r2, #0
 800c156:	f8cd b00c 	str.w	fp, [sp, #12]
 800c15a:	2312      	movs	r3, #18
 800c15c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c15e:	e7db      	b.n	800c118 <_dtoa_r+0x250>
 800c160:	2301      	movs	r3, #1
 800c162:	9309      	str	r3, [sp, #36]	@ 0x24
 800c164:	e7f4      	b.n	800c150 <_dtoa_r+0x288>
 800c166:	f04f 0b01 	mov.w	fp, #1
 800c16a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c16e:	465b      	mov	r3, fp
 800c170:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c174:	e7d0      	b.n	800c118 <_dtoa_r+0x250>
 800c176:	3101      	adds	r1, #1
 800c178:	0052      	lsls	r2, r2, #1
 800c17a:	e7d1      	b.n	800c120 <_dtoa_r+0x258>
 800c17c:	f3af 8000 	nop.w
 800c180:	636f4361 	.word	0x636f4361
 800c184:	3fd287a7 	.word	0x3fd287a7
 800c188:	8b60c8b3 	.word	0x8b60c8b3
 800c18c:	3fc68a28 	.word	0x3fc68a28
 800c190:	509f79fb 	.word	0x509f79fb
 800c194:	3fd34413 	.word	0x3fd34413
 800c198:	0800df3d 	.word	0x0800df3d
 800c19c:	0800df54 	.word	0x0800df54
 800c1a0:	7ff00000 	.word	0x7ff00000
 800c1a4:	0800df0d 	.word	0x0800df0d
 800c1a8:	3ff80000 	.word	0x3ff80000
 800c1ac:	0800e0a8 	.word	0x0800e0a8
 800c1b0:	0800dfac 	.word	0x0800dfac
 800c1b4:	0800df39 	.word	0x0800df39
 800c1b8:	0800df0c 	.word	0x0800df0c
 800c1bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1c0:	6018      	str	r0, [r3, #0]
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	2b0e      	cmp	r3, #14
 800c1c6:	f200 80a1 	bhi.w	800c30c <_dtoa_r+0x444>
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	f000 809e 	beq.w	800c30c <_dtoa_r+0x444>
 800c1d0:	2f00      	cmp	r7, #0
 800c1d2:	dd33      	ble.n	800c23c <_dtoa_r+0x374>
 800c1d4:	4b9c      	ldr	r3, [pc, #624]	@ (800c448 <_dtoa_r+0x580>)
 800c1d6:	f007 020f 	and.w	r2, r7, #15
 800c1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1de:	ed93 7b00 	vldr	d7, [r3]
 800c1e2:	05f8      	lsls	r0, r7, #23
 800c1e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c1e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c1ec:	d516      	bpl.n	800c21c <_dtoa_r+0x354>
 800c1ee:	4b97      	ldr	r3, [pc, #604]	@ (800c44c <_dtoa_r+0x584>)
 800c1f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1f8:	f7f4 fb28 	bl	800084c <__aeabi_ddiv>
 800c1fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c200:	f004 040f 	and.w	r4, r4, #15
 800c204:	2603      	movs	r6, #3
 800c206:	4d91      	ldr	r5, [pc, #580]	@ (800c44c <_dtoa_r+0x584>)
 800c208:	b954      	cbnz	r4, 800c220 <_dtoa_r+0x358>
 800c20a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c20e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c212:	f7f4 fb1b 	bl	800084c <__aeabi_ddiv>
 800c216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c21a:	e028      	b.n	800c26e <_dtoa_r+0x3a6>
 800c21c:	2602      	movs	r6, #2
 800c21e:	e7f2      	b.n	800c206 <_dtoa_r+0x33e>
 800c220:	07e1      	lsls	r1, r4, #31
 800c222:	d508      	bpl.n	800c236 <_dtoa_r+0x36e>
 800c224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c234:	3601      	adds	r6, #1
 800c236:	1064      	asrs	r4, r4, #1
 800c238:	3508      	adds	r5, #8
 800c23a:	e7e5      	b.n	800c208 <_dtoa_r+0x340>
 800c23c:	f000 80af 	beq.w	800c39e <_dtoa_r+0x4d6>
 800c240:	427c      	negs	r4, r7
 800c242:	4b81      	ldr	r3, [pc, #516]	@ (800c448 <_dtoa_r+0x580>)
 800c244:	4d81      	ldr	r5, [pc, #516]	@ (800c44c <_dtoa_r+0x584>)
 800c246:	f004 020f 	and.w	r2, r4, #15
 800c24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c256:	f7f4 f9cf 	bl	80005f8 <__aeabi_dmul>
 800c25a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c25e:	1124      	asrs	r4, r4, #4
 800c260:	2300      	movs	r3, #0
 800c262:	2602      	movs	r6, #2
 800c264:	2c00      	cmp	r4, #0
 800c266:	f040 808f 	bne.w	800c388 <_dtoa_r+0x4c0>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1d3      	bne.n	800c216 <_dtoa_r+0x34e>
 800c26e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c270:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8094 	beq.w	800c3a2 <_dtoa_r+0x4da>
 800c27a:	4b75      	ldr	r3, [pc, #468]	@ (800c450 <_dtoa_r+0x588>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	4620      	mov	r0, r4
 800c280:	4629      	mov	r1, r5
 800c282:	f7f4 fc2b 	bl	8000adc <__aeabi_dcmplt>
 800c286:	2800      	cmp	r0, #0
 800c288:	f000 808b 	beq.w	800c3a2 <_dtoa_r+0x4da>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 8087 	beq.w	800c3a2 <_dtoa_r+0x4da>
 800c294:	f1bb 0f00 	cmp.w	fp, #0
 800c298:	dd34      	ble.n	800c304 <_dtoa_r+0x43c>
 800c29a:	4620      	mov	r0, r4
 800c29c:	4b6d      	ldr	r3, [pc, #436]	@ (800c454 <_dtoa_r+0x58c>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f4 f9a9 	bl	80005f8 <__aeabi_dmul>
 800c2a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800c2ae:	3601      	adds	r6, #1
 800c2b0:	465c      	mov	r4, fp
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7f4 f936 	bl	8000524 <__aeabi_i2d>
 800c2b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2bc:	f7f4 f99c 	bl	80005f8 <__aeabi_dmul>
 800c2c0:	4b65      	ldr	r3, [pc, #404]	@ (800c458 <_dtoa_r+0x590>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f7f3 ffe2 	bl	800028c <__adddf3>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c2ce:	2c00      	cmp	r4, #0
 800c2d0:	d16a      	bne.n	800c3a8 <_dtoa_r+0x4e0>
 800c2d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d6:	4b61      	ldr	r3, [pc, #388]	@ (800c45c <_dtoa_r+0x594>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f7f3 ffd5 	bl	8000288 <__aeabi_dsub>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2e6:	462a      	mov	r2, r5
 800c2e8:	4633      	mov	r3, r6
 800c2ea:	f7f4 fc15 	bl	8000b18 <__aeabi_dcmpgt>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	f040 8298 	bne.w	800c824 <_dtoa_r+0x95c>
 800c2f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2fe:	f7f4 fbed 	bl	8000adc <__aeabi_dcmplt>
 800c302:	bb38      	cbnz	r0, 800c354 <_dtoa_r+0x48c>
 800c304:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c308:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c30c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f2c0 8157 	blt.w	800c5c2 <_dtoa_r+0x6fa>
 800c314:	2f0e      	cmp	r7, #14
 800c316:	f300 8154 	bgt.w	800c5c2 <_dtoa_r+0x6fa>
 800c31a:	4b4b      	ldr	r3, [pc, #300]	@ (800c448 <_dtoa_r+0x580>)
 800c31c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c320:	ed93 7b00 	vldr	d7, [r3]
 800c324:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c326:	2b00      	cmp	r3, #0
 800c328:	ed8d 7b00 	vstr	d7, [sp]
 800c32c:	f280 80e5 	bge.w	800c4fa <_dtoa_r+0x632>
 800c330:	9b03      	ldr	r3, [sp, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	f300 80e1 	bgt.w	800c4fa <_dtoa_r+0x632>
 800c338:	d10c      	bne.n	800c354 <_dtoa_r+0x48c>
 800c33a:	4b48      	ldr	r3, [pc, #288]	@ (800c45c <_dtoa_r+0x594>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	ec51 0b17 	vmov	r0, r1, d7
 800c342:	f7f4 f959 	bl	80005f8 <__aeabi_dmul>
 800c346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34a:	f7f4 fbdb 	bl	8000b04 <__aeabi_dcmpge>
 800c34e:	2800      	cmp	r0, #0
 800c350:	f000 8266 	beq.w	800c820 <_dtoa_r+0x958>
 800c354:	2400      	movs	r4, #0
 800c356:	4625      	mov	r5, r4
 800c358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c35a:	4656      	mov	r6, sl
 800c35c:	ea6f 0803 	mvn.w	r8, r3
 800c360:	2700      	movs	r7, #0
 800c362:	4621      	mov	r1, r4
 800c364:	4648      	mov	r0, r9
 800c366:	f000 fcbf 	bl	800cce8 <_Bfree>
 800c36a:	2d00      	cmp	r5, #0
 800c36c:	f000 80bd 	beq.w	800c4ea <_dtoa_r+0x622>
 800c370:	b12f      	cbz	r7, 800c37e <_dtoa_r+0x4b6>
 800c372:	42af      	cmp	r7, r5
 800c374:	d003      	beq.n	800c37e <_dtoa_r+0x4b6>
 800c376:	4639      	mov	r1, r7
 800c378:	4648      	mov	r0, r9
 800c37a:	f000 fcb5 	bl	800cce8 <_Bfree>
 800c37e:	4629      	mov	r1, r5
 800c380:	4648      	mov	r0, r9
 800c382:	f000 fcb1 	bl	800cce8 <_Bfree>
 800c386:	e0b0      	b.n	800c4ea <_dtoa_r+0x622>
 800c388:	07e2      	lsls	r2, r4, #31
 800c38a:	d505      	bpl.n	800c398 <_dtoa_r+0x4d0>
 800c38c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c390:	f7f4 f932 	bl	80005f8 <__aeabi_dmul>
 800c394:	3601      	adds	r6, #1
 800c396:	2301      	movs	r3, #1
 800c398:	1064      	asrs	r4, r4, #1
 800c39a:	3508      	adds	r5, #8
 800c39c:	e762      	b.n	800c264 <_dtoa_r+0x39c>
 800c39e:	2602      	movs	r6, #2
 800c3a0:	e765      	b.n	800c26e <_dtoa_r+0x3a6>
 800c3a2:	9c03      	ldr	r4, [sp, #12]
 800c3a4:	46b8      	mov	r8, r7
 800c3a6:	e784      	b.n	800c2b2 <_dtoa_r+0x3ea>
 800c3a8:	4b27      	ldr	r3, [pc, #156]	@ (800c448 <_dtoa_r+0x580>)
 800c3aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3b4:	4454      	add	r4, sl
 800c3b6:	2900      	cmp	r1, #0
 800c3b8:	d054      	beq.n	800c464 <_dtoa_r+0x59c>
 800c3ba:	4929      	ldr	r1, [pc, #164]	@ (800c460 <_dtoa_r+0x598>)
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f7f4 fa45 	bl	800084c <__aeabi_ddiv>
 800c3c2:	4633      	mov	r3, r6
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	f7f3 ff5f 	bl	8000288 <__aeabi_dsub>
 800c3ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3ce:	4656      	mov	r6, sl
 800c3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3d4:	f7f4 fbc0 	bl	8000b58 <__aeabi_d2iz>
 800c3d8:	4605      	mov	r5, r0
 800c3da:	f7f4 f8a3 	bl	8000524 <__aeabi_i2d>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e6:	f7f3 ff4f 	bl	8000288 <__aeabi_dsub>
 800c3ea:	3530      	adds	r5, #48	@ 0x30
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3f4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3fc:	f7f4 fb6e 	bl	8000adc <__aeabi_dcmplt>
 800c400:	2800      	cmp	r0, #0
 800c402:	d172      	bne.n	800c4ea <_dtoa_r+0x622>
 800c404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c408:	4911      	ldr	r1, [pc, #68]	@ (800c450 <_dtoa_r+0x588>)
 800c40a:	2000      	movs	r0, #0
 800c40c:	f7f3 ff3c 	bl	8000288 <__aeabi_dsub>
 800c410:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c414:	f7f4 fb62 	bl	8000adc <__aeabi_dcmplt>
 800c418:	2800      	cmp	r0, #0
 800c41a:	f040 80b4 	bne.w	800c586 <_dtoa_r+0x6be>
 800c41e:	42a6      	cmp	r6, r4
 800c420:	f43f af70 	beq.w	800c304 <_dtoa_r+0x43c>
 800c424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c428:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <_dtoa_r+0x58c>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	f7f4 f8e4 	bl	80005f8 <__aeabi_dmul>
 800c430:	4b08      	ldr	r3, [pc, #32]	@ (800c454 <_dtoa_r+0x58c>)
 800c432:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c436:	2200      	movs	r2, #0
 800c438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c444:	e7c4      	b.n	800c3d0 <_dtoa_r+0x508>
 800c446:	bf00      	nop
 800c448:	0800e0a8 	.word	0x0800e0a8
 800c44c:	0800e080 	.word	0x0800e080
 800c450:	3ff00000 	.word	0x3ff00000
 800c454:	40240000 	.word	0x40240000
 800c458:	401c0000 	.word	0x401c0000
 800c45c:	40140000 	.word	0x40140000
 800c460:	3fe00000 	.word	0x3fe00000
 800c464:	4631      	mov	r1, r6
 800c466:	4628      	mov	r0, r5
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c470:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c472:	4656      	mov	r6, sl
 800c474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c478:	f7f4 fb6e 	bl	8000b58 <__aeabi_d2iz>
 800c47c:	4605      	mov	r5, r0
 800c47e:	f7f4 f851 	bl	8000524 <__aeabi_i2d>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48a:	f7f3 fefd 	bl	8000288 <__aeabi_dsub>
 800c48e:	3530      	adds	r5, #48	@ 0x30
 800c490:	f806 5b01 	strb.w	r5, [r6], #1
 800c494:	4602      	mov	r2, r0
 800c496:	460b      	mov	r3, r1
 800c498:	42a6      	cmp	r6, r4
 800c49a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c49e:	f04f 0200 	mov.w	r2, #0
 800c4a2:	d124      	bne.n	800c4ee <_dtoa_r+0x626>
 800c4a4:	4baf      	ldr	r3, [pc, #700]	@ (800c764 <_dtoa_r+0x89c>)
 800c4a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4aa:	f7f3 feef 	bl	800028c <__adddf3>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4b6:	f7f4 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d163      	bne.n	800c586 <_dtoa_r+0x6be>
 800c4be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4c2:	49a8      	ldr	r1, [pc, #672]	@ (800c764 <_dtoa_r+0x89c>)
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	f7f3 fedf 	bl	8000288 <__aeabi_dsub>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4d2:	f7f4 fb03 	bl	8000adc <__aeabi_dcmplt>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f af14 	beq.w	800c304 <_dtoa_r+0x43c>
 800c4dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c4de:	1e73      	subs	r3, r6, #1
 800c4e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4e6:	2b30      	cmp	r3, #48	@ 0x30
 800c4e8:	d0f8      	beq.n	800c4dc <_dtoa_r+0x614>
 800c4ea:	4647      	mov	r7, r8
 800c4ec:	e03b      	b.n	800c566 <_dtoa_r+0x69e>
 800c4ee:	4b9e      	ldr	r3, [pc, #632]	@ (800c768 <_dtoa_r+0x8a0>)
 800c4f0:	f7f4 f882 	bl	80005f8 <__aeabi_dmul>
 800c4f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4f8:	e7bc      	b.n	800c474 <_dtoa_r+0x5ac>
 800c4fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4fe:	4656      	mov	r6, sl
 800c500:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	f7f4 f9a0 	bl	800084c <__aeabi_ddiv>
 800c50c:	f7f4 fb24 	bl	8000b58 <__aeabi_d2iz>
 800c510:	4680      	mov	r8, r0
 800c512:	f7f4 f807 	bl	8000524 <__aeabi_i2d>
 800c516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c51a:	f7f4 f86d 	bl	80005f8 <__aeabi_dmul>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4620      	mov	r0, r4
 800c524:	4629      	mov	r1, r5
 800c526:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c52a:	f7f3 fead 	bl	8000288 <__aeabi_dsub>
 800c52e:	f806 4b01 	strb.w	r4, [r6], #1
 800c532:	9d03      	ldr	r5, [sp, #12]
 800c534:	eba6 040a 	sub.w	r4, r6, sl
 800c538:	42a5      	cmp	r5, r4
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	d133      	bne.n	800c5a8 <_dtoa_r+0x6e0>
 800c540:	f7f3 fea4 	bl	800028c <__adddf3>
 800c544:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c548:	4604      	mov	r4, r0
 800c54a:	460d      	mov	r5, r1
 800c54c:	f7f4 fae4 	bl	8000b18 <__aeabi_dcmpgt>
 800c550:	b9c0      	cbnz	r0, 800c584 <_dtoa_r+0x6bc>
 800c552:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f4 fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c55e:	b110      	cbz	r0, 800c566 <_dtoa_r+0x69e>
 800c560:	f018 0f01 	tst.w	r8, #1
 800c564:	d10e      	bne.n	800c584 <_dtoa_r+0x6bc>
 800c566:	9902      	ldr	r1, [sp, #8]
 800c568:	4648      	mov	r0, r9
 800c56a:	f000 fbbd 	bl	800cce8 <_Bfree>
 800c56e:	2300      	movs	r3, #0
 800c570:	7033      	strb	r3, [r6, #0]
 800c572:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c574:	3701      	adds	r7, #1
 800c576:	601f      	str	r7, [r3, #0]
 800c578:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 824b 	beq.w	800ca16 <_dtoa_r+0xb4e>
 800c580:	601e      	str	r6, [r3, #0]
 800c582:	e248      	b.n	800ca16 <_dtoa_r+0xb4e>
 800c584:	46b8      	mov	r8, r7
 800c586:	4633      	mov	r3, r6
 800c588:	461e      	mov	r6, r3
 800c58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c58e:	2a39      	cmp	r2, #57	@ 0x39
 800c590:	d106      	bne.n	800c5a0 <_dtoa_r+0x6d8>
 800c592:	459a      	cmp	sl, r3
 800c594:	d1f8      	bne.n	800c588 <_dtoa_r+0x6c0>
 800c596:	2230      	movs	r2, #48	@ 0x30
 800c598:	f108 0801 	add.w	r8, r8, #1
 800c59c:	f88a 2000 	strb.w	r2, [sl]
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	3201      	adds	r2, #1
 800c5a4:	701a      	strb	r2, [r3, #0]
 800c5a6:	e7a0      	b.n	800c4ea <_dtoa_r+0x622>
 800c5a8:	4b6f      	ldr	r3, [pc, #444]	@ (800c768 <_dtoa_r+0x8a0>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f7f4 f824 	bl	80005f8 <__aeabi_dmul>
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	f7f4 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d09f      	beq.n	800c500 <_dtoa_r+0x638>
 800c5c0:	e7d1      	b.n	800c566 <_dtoa_r+0x69e>
 800c5c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	f000 80ea 	beq.w	800c79e <_dtoa_r+0x8d6>
 800c5ca:	9a07      	ldr	r2, [sp, #28]
 800c5cc:	2a01      	cmp	r2, #1
 800c5ce:	f300 80cd 	bgt.w	800c76c <_dtoa_r+0x8a4>
 800c5d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5d4:	2a00      	cmp	r2, #0
 800c5d6:	f000 80c1 	beq.w	800c75c <_dtoa_r+0x894>
 800c5da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c5de:	9c08      	ldr	r4, [sp, #32]
 800c5e0:	9e00      	ldr	r6, [sp, #0]
 800c5e2:	9a00      	ldr	r2, [sp, #0]
 800c5e4:	441a      	add	r2, r3
 800c5e6:	9200      	str	r2, [sp, #0]
 800c5e8:	9a06      	ldr	r2, [sp, #24]
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	441a      	add	r2, r3
 800c5ee:	4648      	mov	r0, r9
 800c5f0:	9206      	str	r2, [sp, #24]
 800c5f2:	f000 fc2d 	bl	800ce50 <__i2b>
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	b166      	cbz	r6, 800c614 <_dtoa_r+0x74c>
 800c5fa:	9b06      	ldr	r3, [sp, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dd09      	ble.n	800c614 <_dtoa_r+0x74c>
 800c600:	42b3      	cmp	r3, r6
 800c602:	9a00      	ldr	r2, [sp, #0]
 800c604:	bfa8      	it	ge
 800c606:	4633      	movge	r3, r6
 800c608:	1ad2      	subs	r2, r2, r3
 800c60a:	9200      	str	r2, [sp, #0]
 800c60c:	9a06      	ldr	r2, [sp, #24]
 800c60e:	1af6      	subs	r6, r6, r3
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	9306      	str	r3, [sp, #24]
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	b30b      	cbz	r3, 800c65c <_dtoa_r+0x794>
 800c618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80c6 	beq.w	800c7ac <_dtoa_r+0x8e4>
 800c620:	2c00      	cmp	r4, #0
 800c622:	f000 80c0 	beq.w	800c7a6 <_dtoa_r+0x8de>
 800c626:	4629      	mov	r1, r5
 800c628:	4622      	mov	r2, r4
 800c62a:	4648      	mov	r0, r9
 800c62c:	f000 fcc8 	bl	800cfc0 <__pow5mult>
 800c630:	9a02      	ldr	r2, [sp, #8]
 800c632:	4601      	mov	r1, r0
 800c634:	4605      	mov	r5, r0
 800c636:	4648      	mov	r0, r9
 800c638:	f000 fc20 	bl	800ce7c <__multiply>
 800c63c:	9902      	ldr	r1, [sp, #8]
 800c63e:	4680      	mov	r8, r0
 800c640:	4648      	mov	r0, r9
 800c642:	f000 fb51 	bl	800cce8 <_Bfree>
 800c646:	9b08      	ldr	r3, [sp, #32]
 800c648:	1b1b      	subs	r3, r3, r4
 800c64a:	9308      	str	r3, [sp, #32]
 800c64c:	f000 80b1 	beq.w	800c7b2 <_dtoa_r+0x8ea>
 800c650:	9a08      	ldr	r2, [sp, #32]
 800c652:	4641      	mov	r1, r8
 800c654:	4648      	mov	r0, r9
 800c656:	f000 fcb3 	bl	800cfc0 <__pow5mult>
 800c65a:	9002      	str	r0, [sp, #8]
 800c65c:	2101      	movs	r1, #1
 800c65e:	4648      	mov	r0, r9
 800c660:	f000 fbf6 	bl	800ce50 <__i2b>
 800c664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c666:	4604      	mov	r4, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 81d8 	beq.w	800ca1e <_dtoa_r+0xb56>
 800c66e:	461a      	mov	r2, r3
 800c670:	4601      	mov	r1, r0
 800c672:	4648      	mov	r0, r9
 800c674:	f000 fca4 	bl	800cfc0 <__pow5mult>
 800c678:	9b07      	ldr	r3, [sp, #28]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	4604      	mov	r4, r0
 800c67e:	f300 809f 	bgt.w	800c7c0 <_dtoa_r+0x8f8>
 800c682:	9b04      	ldr	r3, [sp, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	f040 8097 	bne.w	800c7b8 <_dtoa_r+0x8f0>
 800c68a:	9b05      	ldr	r3, [sp, #20]
 800c68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c690:	2b00      	cmp	r3, #0
 800c692:	f040 8093 	bne.w	800c7bc <_dtoa_r+0x8f4>
 800c696:	9b05      	ldr	r3, [sp, #20]
 800c698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c69c:	0d1b      	lsrs	r3, r3, #20
 800c69e:	051b      	lsls	r3, r3, #20
 800c6a0:	b133      	cbz	r3, 800c6b0 <_dtoa_r+0x7e8>
 800c6a2:	9b00      	ldr	r3, [sp, #0]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	9b06      	ldr	r3, [sp, #24]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	9306      	str	r3, [sp, #24]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	9308      	str	r3, [sp, #32]
 800c6b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 81b8 	beq.w	800ca2a <_dtoa_r+0xb62>
 800c6ba:	6923      	ldr	r3, [r4, #16]
 800c6bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6c0:	6918      	ldr	r0, [r3, #16]
 800c6c2:	f000 fb79 	bl	800cdb8 <__hi0bits>
 800c6c6:	f1c0 0020 	rsb	r0, r0, #32
 800c6ca:	9b06      	ldr	r3, [sp, #24]
 800c6cc:	4418      	add	r0, r3
 800c6ce:	f010 001f 	ands.w	r0, r0, #31
 800c6d2:	f000 8082 	beq.w	800c7da <_dtoa_r+0x912>
 800c6d6:	f1c0 0320 	rsb	r3, r0, #32
 800c6da:	2b04      	cmp	r3, #4
 800c6dc:	dd73      	ble.n	800c7c6 <_dtoa_r+0x8fe>
 800c6de:	9b00      	ldr	r3, [sp, #0]
 800c6e0:	f1c0 001c 	rsb	r0, r0, #28
 800c6e4:	4403      	add	r3, r0
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	9b06      	ldr	r3, [sp, #24]
 800c6ea:	4403      	add	r3, r0
 800c6ec:	4406      	add	r6, r0
 800c6ee:	9306      	str	r3, [sp, #24]
 800c6f0:	9b00      	ldr	r3, [sp, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	dd05      	ble.n	800c702 <_dtoa_r+0x83a>
 800c6f6:	9902      	ldr	r1, [sp, #8]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4648      	mov	r0, r9
 800c6fc:	f000 fcba 	bl	800d074 <__lshift>
 800c700:	9002      	str	r0, [sp, #8]
 800c702:	9b06      	ldr	r3, [sp, #24]
 800c704:	2b00      	cmp	r3, #0
 800c706:	dd05      	ble.n	800c714 <_dtoa_r+0x84c>
 800c708:	4621      	mov	r1, r4
 800c70a:	461a      	mov	r2, r3
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 fcb1 	bl	800d074 <__lshift>
 800c712:	4604      	mov	r4, r0
 800c714:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c716:	2b00      	cmp	r3, #0
 800c718:	d061      	beq.n	800c7de <_dtoa_r+0x916>
 800c71a:	9802      	ldr	r0, [sp, #8]
 800c71c:	4621      	mov	r1, r4
 800c71e:	f000 fd15 	bl	800d14c <__mcmp>
 800c722:	2800      	cmp	r0, #0
 800c724:	da5b      	bge.n	800c7de <_dtoa_r+0x916>
 800c726:	2300      	movs	r3, #0
 800c728:	9902      	ldr	r1, [sp, #8]
 800c72a:	220a      	movs	r2, #10
 800c72c:	4648      	mov	r0, r9
 800c72e:	f000 fafd 	bl	800cd2c <__multadd>
 800c732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c734:	9002      	str	r0, [sp, #8]
 800c736:	f107 38ff 	add.w	r8, r7, #4294967295
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 8177 	beq.w	800ca2e <_dtoa_r+0xb66>
 800c740:	4629      	mov	r1, r5
 800c742:	2300      	movs	r3, #0
 800c744:	220a      	movs	r2, #10
 800c746:	4648      	mov	r0, r9
 800c748:	f000 faf0 	bl	800cd2c <__multadd>
 800c74c:	f1bb 0f00 	cmp.w	fp, #0
 800c750:	4605      	mov	r5, r0
 800c752:	dc6f      	bgt.n	800c834 <_dtoa_r+0x96c>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	2b02      	cmp	r3, #2
 800c758:	dc49      	bgt.n	800c7ee <_dtoa_r+0x926>
 800c75a:	e06b      	b.n	800c834 <_dtoa_r+0x96c>
 800c75c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c75e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c762:	e73c      	b.n	800c5de <_dtoa_r+0x716>
 800c764:	3fe00000 	.word	0x3fe00000
 800c768:	40240000 	.word	0x40240000
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	1e5c      	subs	r4, r3, #1
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	42a3      	cmp	r3, r4
 800c774:	db09      	blt.n	800c78a <_dtoa_r+0x8c2>
 800c776:	1b1c      	subs	r4, r3, r4
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f6bf af30 	bge.w	800c5e0 <_dtoa_r+0x718>
 800c780:	9b00      	ldr	r3, [sp, #0]
 800c782:	9a03      	ldr	r2, [sp, #12]
 800c784:	1a9e      	subs	r6, r3, r2
 800c786:	2300      	movs	r3, #0
 800c788:	e72b      	b.n	800c5e2 <_dtoa_r+0x71a>
 800c78a:	9b08      	ldr	r3, [sp, #32]
 800c78c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c78e:	9408      	str	r4, [sp, #32]
 800c790:	1ae3      	subs	r3, r4, r3
 800c792:	441a      	add	r2, r3
 800c794:	9e00      	ldr	r6, [sp, #0]
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	920d      	str	r2, [sp, #52]	@ 0x34
 800c79a:	2400      	movs	r4, #0
 800c79c:	e721      	b.n	800c5e2 <_dtoa_r+0x71a>
 800c79e:	9c08      	ldr	r4, [sp, #32]
 800c7a0:	9e00      	ldr	r6, [sp, #0]
 800c7a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c7a4:	e728      	b.n	800c5f8 <_dtoa_r+0x730>
 800c7a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c7aa:	e751      	b.n	800c650 <_dtoa_r+0x788>
 800c7ac:	9a08      	ldr	r2, [sp, #32]
 800c7ae:	9902      	ldr	r1, [sp, #8]
 800c7b0:	e750      	b.n	800c654 <_dtoa_r+0x78c>
 800c7b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c7b6:	e751      	b.n	800c65c <_dtoa_r+0x794>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e779      	b.n	800c6b0 <_dtoa_r+0x7e8>
 800c7bc:	9b04      	ldr	r3, [sp, #16]
 800c7be:	e777      	b.n	800c6b0 <_dtoa_r+0x7e8>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9308      	str	r3, [sp, #32]
 800c7c4:	e779      	b.n	800c6ba <_dtoa_r+0x7f2>
 800c7c6:	d093      	beq.n	800c6f0 <_dtoa_r+0x828>
 800c7c8:	9a00      	ldr	r2, [sp, #0]
 800c7ca:	331c      	adds	r3, #28
 800c7cc:	441a      	add	r2, r3
 800c7ce:	9200      	str	r2, [sp, #0]
 800c7d0:	9a06      	ldr	r2, [sp, #24]
 800c7d2:	441a      	add	r2, r3
 800c7d4:	441e      	add	r6, r3
 800c7d6:	9206      	str	r2, [sp, #24]
 800c7d8:	e78a      	b.n	800c6f0 <_dtoa_r+0x828>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	e7f4      	b.n	800c7c8 <_dtoa_r+0x900>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	46b8      	mov	r8, r7
 800c7e4:	dc20      	bgt.n	800c828 <_dtoa_r+0x960>
 800c7e6:	469b      	mov	fp, r3
 800c7e8:	9b07      	ldr	r3, [sp, #28]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	dd1e      	ble.n	800c82c <_dtoa_r+0x964>
 800c7ee:	f1bb 0f00 	cmp.w	fp, #0
 800c7f2:	f47f adb1 	bne.w	800c358 <_dtoa_r+0x490>
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	465b      	mov	r3, fp
 800c7fa:	2205      	movs	r2, #5
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fa95 	bl	800cd2c <__multadd>
 800c802:	4601      	mov	r1, r0
 800c804:	4604      	mov	r4, r0
 800c806:	9802      	ldr	r0, [sp, #8]
 800c808:	f000 fca0 	bl	800d14c <__mcmp>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f77f ada3 	ble.w	800c358 <_dtoa_r+0x490>
 800c812:	4656      	mov	r6, sl
 800c814:	2331      	movs	r3, #49	@ 0x31
 800c816:	f806 3b01 	strb.w	r3, [r6], #1
 800c81a:	f108 0801 	add.w	r8, r8, #1
 800c81e:	e59f      	b.n	800c360 <_dtoa_r+0x498>
 800c820:	9c03      	ldr	r4, [sp, #12]
 800c822:	46b8      	mov	r8, r7
 800c824:	4625      	mov	r5, r4
 800c826:	e7f4      	b.n	800c812 <_dtoa_r+0x94a>
 800c828:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 8101 	beq.w	800ca36 <_dtoa_r+0xb6e>
 800c834:	2e00      	cmp	r6, #0
 800c836:	dd05      	ble.n	800c844 <_dtoa_r+0x97c>
 800c838:	4629      	mov	r1, r5
 800c83a:	4632      	mov	r2, r6
 800c83c:	4648      	mov	r0, r9
 800c83e:	f000 fc19 	bl	800d074 <__lshift>
 800c842:	4605      	mov	r5, r0
 800c844:	9b08      	ldr	r3, [sp, #32]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d05c      	beq.n	800c904 <_dtoa_r+0xa3c>
 800c84a:	6869      	ldr	r1, [r5, #4]
 800c84c:	4648      	mov	r0, r9
 800c84e:	f000 fa0b 	bl	800cc68 <_Balloc>
 800c852:	4606      	mov	r6, r0
 800c854:	b928      	cbnz	r0, 800c862 <_dtoa_r+0x99a>
 800c856:	4b82      	ldr	r3, [pc, #520]	@ (800ca60 <_dtoa_r+0xb98>)
 800c858:	4602      	mov	r2, r0
 800c85a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c85e:	f7ff bb4a 	b.w	800bef6 <_dtoa_r+0x2e>
 800c862:	692a      	ldr	r2, [r5, #16]
 800c864:	3202      	adds	r2, #2
 800c866:	0092      	lsls	r2, r2, #2
 800c868:	f105 010c 	add.w	r1, r5, #12
 800c86c:	300c      	adds	r0, #12
 800c86e:	f7ff fa92 	bl	800bd96 <memcpy>
 800c872:	2201      	movs	r2, #1
 800c874:	4631      	mov	r1, r6
 800c876:	4648      	mov	r0, r9
 800c878:	f000 fbfc 	bl	800d074 <__lshift>
 800c87c:	f10a 0301 	add.w	r3, sl, #1
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	eb0a 030b 	add.w	r3, sl, fp
 800c886:	9308      	str	r3, [sp, #32]
 800c888:	9b04      	ldr	r3, [sp, #16]
 800c88a:	f003 0301 	and.w	r3, r3, #1
 800c88e:	462f      	mov	r7, r5
 800c890:	9306      	str	r3, [sp, #24]
 800c892:	4605      	mov	r5, r0
 800c894:	9b00      	ldr	r3, [sp, #0]
 800c896:	9802      	ldr	r0, [sp, #8]
 800c898:	4621      	mov	r1, r4
 800c89a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c89e:	f7ff fa88 	bl	800bdb2 <quorem>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	3330      	adds	r3, #48	@ 0x30
 800c8a6:	9003      	str	r0, [sp, #12]
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	9802      	ldr	r0, [sp, #8]
 800c8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ae:	f000 fc4d 	bl	800d14c <__mcmp>
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	9004      	str	r0, [sp, #16]
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	4648      	mov	r0, r9
 800c8ba:	f000 fc63 	bl	800d184 <__mdiff>
 800c8be:	68c2      	ldr	r2, [r0, #12]
 800c8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	bb02      	cbnz	r2, 800c908 <_dtoa_r+0xa40>
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	9802      	ldr	r0, [sp, #8]
 800c8ca:	f000 fc3f 	bl	800d14c <__mcmp>
 800c8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8da:	f000 fa05 	bl	800cce8 <_Bfree>
 800c8de:	9b07      	ldr	r3, [sp, #28]
 800c8e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c8e2:	9e00      	ldr	r6, [sp, #0]
 800c8e4:	ea42 0103 	orr.w	r1, r2, r3
 800c8e8:	9b06      	ldr	r3, [sp, #24]
 800c8ea:	4319      	orrs	r1, r3
 800c8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ee:	d10d      	bne.n	800c90c <_dtoa_r+0xa44>
 800c8f0:	2b39      	cmp	r3, #57	@ 0x39
 800c8f2:	d027      	beq.n	800c944 <_dtoa_r+0xa7c>
 800c8f4:	9a04      	ldr	r2, [sp, #16]
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	dd01      	ble.n	800c8fe <_dtoa_r+0xa36>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	3331      	adds	r3, #49	@ 0x31
 800c8fe:	f88b 3000 	strb.w	r3, [fp]
 800c902:	e52e      	b.n	800c362 <_dtoa_r+0x49a>
 800c904:	4628      	mov	r0, r5
 800c906:	e7b9      	b.n	800c87c <_dtoa_r+0x9b4>
 800c908:	2201      	movs	r2, #1
 800c90a:	e7e2      	b.n	800c8d2 <_dtoa_r+0xa0a>
 800c90c:	9904      	ldr	r1, [sp, #16]
 800c90e:	2900      	cmp	r1, #0
 800c910:	db04      	blt.n	800c91c <_dtoa_r+0xa54>
 800c912:	9807      	ldr	r0, [sp, #28]
 800c914:	4301      	orrs	r1, r0
 800c916:	9806      	ldr	r0, [sp, #24]
 800c918:	4301      	orrs	r1, r0
 800c91a:	d120      	bne.n	800c95e <_dtoa_r+0xa96>
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	ddee      	ble.n	800c8fe <_dtoa_r+0xa36>
 800c920:	9902      	ldr	r1, [sp, #8]
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	2201      	movs	r2, #1
 800c926:	4648      	mov	r0, r9
 800c928:	f000 fba4 	bl	800d074 <__lshift>
 800c92c:	4621      	mov	r1, r4
 800c92e:	9002      	str	r0, [sp, #8]
 800c930:	f000 fc0c 	bl	800d14c <__mcmp>
 800c934:	2800      	cmp	r0, #0
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	dc02      	bgt.n	800c940 <_dtoa_r+0xa78>
 800c93a:	d1e0      	bne.n	800c8fe <_dtoa_r+0xa36>
 800c93c:	07da      	lsls	r2, r3, #31
 800c93e:	d5de      	bpl.n	800c8fe <_dtoa_r+0xa36>
 800c940:	2b39      	cmp	r3, #57	@ 0x39
 800c942:	d1da      	bne.n	800c8fa <_dtoa_r+0xa32>
 800c944:	2339      	movs	r3, #57	@ 0x39
 800c946:	f88b 3000 	strb.w	r3, [fp]
 800c94a:	4633      	mov	r3, r6
 800c94c:	461e      	mov	r6, r3
 800c94e:	3b01      	subs	r3, #1
 800c950:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c954:	2a39      	cmp	r2, #57	@ 0x39
 800c956:	d04e      	beq.n	800c9f6 <_dtoa_r+0xb2e>
 800c958:	3201      	adds	r2, #1
 800c95a:	701a      	strb	r2, [r3, #0]
 800c95c:	e501      	b.n	800c362 <_dtoa_r+0x49a>
 800c95e:	2a00      	cmp	r2, #0
 800c960:	dd03      	ble.n	800c96a <_dtoa_r+0xaa2>
 800c962:	2b39      	cmp	r3, #57	@ 0x39
 800c964:	d0ee      	beq.n	800c944 <_dtoa_r+0xa7c>
 800c966:	3301      	adds	r3, #1
 800c968:	e7c9      	b.n	800c8fe <_dtoa_r+0xa36>
 800c96a:	9a00      	ldr	r2, [sp, #0]
 800c96c:	9908      	ldr	r1, [sp, #32]
 800c96e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c972:	428a      	cmp	r2, r1
 800c974:	d028      	beq.n	800c9c8 <_dtoa_r+0xb00>
 800c976:	9902      	ldr	r1, [sp, #8]
 800c978:	2300      	movs	r3, #0
 800c97a:	220a      	movs	r2, #10
 800c97c:	4648      	mov	r0, r9
 800c97e:	f000 f9d5 	bl	800cd2c <__multadd>
 800c982:	42af      	cmp	r7, r5
 800c984:	9002      	str	r0, [sp, #8]
 800c986:	f04f 0300 	mov.w	r3, #0
 800c98a:	f04f 020a 	mov.w	r2, #10
 800c98e:	4639      	mov	r1, r7
 800c990:	4648      	mov	r0, r9
 800c992:	d107      	bne.n	800c9a4 <_dtoa_r+0xadc>
 800c994:	f000 f9ca 	bl	800cd2c <__multadd>
 800c998:	4607      	mov	r7, r0
 800c99a:	4605      	mov	r5, r0
 800c99c:	9b00      	ldr	r3, [sp, #0]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	e777      	b.n	800c894 <_dtoa_r+0x9cc>
 800c9a4:	f000 f9c2 	bl	800cd2c <__multadd>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4607      	mov	r7, r0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	220a      	movs	r2, #10
 800c9b0:	4648      	mov	r0, r9
 800c9b2:	f000 f9bb 	bl	800cd2c <__multadd>
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	e7f0      	b.n	800c99c <_dtoa_r+0xad4>
 800c9ba:	f1bb 0f00 	cmp.w	fp, #0
 800c9be:	bfcc      	ite	gt
 800c9c0:	465e      	movgt	r6, fp
 800c9c2:	2601      	movle	r6, #1
 800c9c4:	4456      	add	r6, sl
 800c9c6:	2700      	movs	r7, #0
 800c9c8:	9902      	ldr	r1, [sp, #8]
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	4648      	mov	r0, r9
 800c9d0:	f000 fb50 	bl	800d074 <__lshift>
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	9002      	str	r0, [sp, #8]
 800c9d8:	f000 fbb8 	bl	800d14c <__mcmp>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	dcb4      	bgt.n	800c94a <_dtoa_r+0xa82>
 800c9e0:	d102      	bne.n	800c9e8 <_dtoa_r+0xb20>
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	07db      	lsls	r3, r3, #31
 800c9e6:	d4b0      	bmi.n	800c94a <_dtoa_r+0xa82>
 800c9e8:	4633      	mov	r3, r6
 800c9ea:	461e      	mov	r6, r3
 800c9ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9f0:	2a30      	cmp	r2, #48	@ 0x30
 800c9f2:	d0fa      	beq.n	800c9ea <_dtoa_r+0xb22>
 800c9f4:	e4b5      	b.n	800c362 <_dtoa_r+0x49a>
 800c9f6:	459a      	cmp	sl, r3
 800c9f8:	d1a8      	bne.n	800c94c <_dtoa_r+0xa84>
 800c9fa:	2331      	movs	r3, #49	@ 0x31
 800c9fc:	f108 0801 	add.w	r8, r8, #1
 800ca00:	f88a 3000 	strb.w	r3, [sl]
 800ca04:	e4ad      	b.n	800c362 <_dtoa_r+0x49a>
 800ca06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ca64 <_dtoa_r+0xb9c>
 800ca0c:	b11b      	cbz	r3, 800ca16 <_dtoa_r+0xb4e>
 800ca0e:	f10a 0308 	add.w	r3, sl, #8
 800ca12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	4650      	mov	r0, sl
 800ca18:	b017      	add	sp, #92	@ 0x5c
 800ca1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1e:	9b07      	ldr	r3, [sp, #28]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	f77f ae2e 	ble.w	800c682 <_dtoa_r+0x7ba>
 800ca26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca28:	9308      	str	r3, [sp, #32]
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	e64d      	b.n	800c6ca <_dtoa_r+0x802>
 800ca2e:	f1bb 0f00 	cmp.w	fp, #0
 800ca32:	f77f aed9 	ble.w	800c7e8 <_dtoa_r+0x920>
 800ca36:	4656      	mov	r6, sl
 800ca38:	9802      	ldr	r0, [sp, #8]
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	f7ff f9b9 	bl	800bdb2 <quorem>
 800ca40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ca44:	f806 3b01 	strb.w	r3, [r6], #1
 800ca48:	eba6 020a 	sub.w	r2, r6, sl
 800ca4c:	4593      	cmp	fp, r2
 800ca4e:	ddb4      	ble.n	800c9ba <_dtoa_r+0xaf2>
 800ca50:	9902      	ldr	r1, [sp, #8]
 800ca52:	2300      	movs	r3, #0
 800ca54:	220a      	movs	r2, #10
 800ca56:	4648      	mov	r0, r9
 800ca58:	f000 f968 	bl	800cd2c <__multadd>
 800ca5c:	9002      	str	r0, [sp, #8]
 800ca5e:	e7eb      	b.n	800ca38 <_dtoa_r+0xb70>
 800ca60:	0800dfac 	.word	0x0800dfac
 800ca64:	0800df30 	.word	0x0800df30

0800ca68 <_free_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d041      	beq.n	800caf4 <_free_r+0x8c>
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f0c      	subs	r4, r1, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfb8      	it	lt
 800ca7a:	18e4      	addlt	r4, r4, r3
 800ca7c:	f000 f8e8 	bl	800cc50 <__malloc_lock>
 800ca80:	4a1d      	ldr	r2, [pc, #116]	@ (800caf8 <_free_r+0x90>)
 800ca82:	6813      	ldr	r3, [r2, #0]
 800ca84:	b933      	cbnz	r3, 800ca94 <_free_r+0x2c>
 800ca86:	6063      	str	r3, [r4, #4]
 800ca88:	6014      	str	r4, [r2, #0]
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca90:	f000 b8e4 	b.w	800cc5c <__malloc_unlock>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d908      	bls.n	800caaa <_free_r+0x42>
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	1821      	adds	r1, r4, r0
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	bf01      	itttt	eq
 800caa0:	6819      	ldreq	r1, [r3, #0]
 800caa2:	685b      	ldreq	r3, [r3, #4]
 800caa4:	1809      	addeq	r1, r1, r0
 800caa6:	6021      	streq	r1, [r4, #0]
 800caa8:	e7ed      	b.n	800ca86 <_free_r+0x1e>
 800caaa:	461a      	mov	r2, r3
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b10b      	cbz	r3, 800cab4 <_free_r+0x4c>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d9fa      	bls.n	800caaa <_free_r+0x42>
 800cab4:	6811      	ldr	r1, [r2, #0]
 800cab6:	1850      	adds	r0, r2, r1
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d10b      	bne.n	800cad4 <_free_r+0x6c>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	4401      	add	r1, r0
 800cac0:	1850      	adds	r0, r2, r1
 800cac2:	4283      	cmp	r3, r0
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	d1e0      	bne.n	800ca8a <_free_r+0x22>
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	6053      	str	r3, [r2, #4]
 800cace:	4408      	add	r0, r1
 800cad0:	6010      	str	r0, [r2, #0]
 800cad2:	e7da      	b.n	800ca8a <_free_r+0x22>
 800cad4:	d902      	bls.n	800cadc <_free_r+0x74>
 800cad6:	230c      	movs	r3, #12
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	e7d6      	b.n	800ca8a <_free_r+0x22>
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	1821      	adds	r1, r4, r0
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf04      	itt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	6063      	str	r3, [r4, #4]
 800caea:	bf04      	itt	eq
 800caec:	1809      	addeq	r1, r1, r0
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6054      	str	r4, [r2, #4]
 800caf2:	e7ca      	b.n	800ca8a <_free_r+0x22>
 800caf4:	bd38      	pop	{r3, r4, r5, pc}
 800caf6:	bf00      	nop
 800caf8:	200018e4 	.word	0x200018e4

0800cafc <malloc>:
 800cafc:	4b02      	ldr	r3, [pc, #8]	@ (800cb08 <malloc+0xc>)
 800cafe:	4601      	mov	r1, r0
 800cb00:	6818      	ldr	r0, [r3, #0]
 800cb02:	f000 b825 	b.w	800cb50 <_malloc_r>
 800cb06:	bf00      	nop
 800cb08:	2000011c 	.word	0x2000011c

0800cb0c <sbrk_aligned>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	4e0f      	ldr	r6, [pc, #60]	@ (800cb4c <sbrk_aligned+0x40>)
 800cb10:	460c      	mov	r4, r1
 800cb12:	6831      	ldr	r1, [r6, #0]
 800cb14:	4605      	mov	r5, r0
 800cb16:	b911      	cbnz	r1, 800cb1e <sbrk_aligned+0x12>
 800cb18:	f000 fe3e 	bl	800d798 <_sbrk_r>
 800cb1c:	6030      	str	r0, [r6, #0]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 fe39 	bl	800d798 <_sbrk_r>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d103      	bne.n	800cb32 <sbrk_aligned+0x26>
 800cb2a:	f04f 34ff 	mov.w	r4, #4294967295
 800cb2e:	4620      	mov	r0, r4
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
 800cb32:	1cc4      	adds	r4, r0, #3
 800cb34:	f024 0403 	bic.w	r4, r4, #3
 800cb38:	42a0      	cmp	r0, r4
 800cb3a:	d0f8      	beq.n	800cb2e <sbrk_aligned+0x22>
 800cb3c:	1a21      	subs	r1, r4, r0
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 fe2a 	bl	800d798 <_sbrk_r>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d1f2      	bne.n	800cb2e <sbrk_aligned+0x22>
 800cb48:	e7ef      	b.n	800cb2a <sbrk_aligned+0x1e>
 800cb4a:	bf00      	nop
 800cb4c:	200018e0 	.word	0x200018e0

0800cb50 <_malloc_r>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	1ccd      	adds	r5, r1, #3
 800cb56:	f025 0503 	bic.w	r5, r5, #3
 800cb5a:	3508      	adds	r5, #8
 800cb5c:	2d0c      	cmp	r5, #12
 800cb5e:	bf38      	it	cc
 800cb60:	250c      	movcc	r5, #12
 800cb62:	2d00      	cmp	r5, #0
 800cb64:	4606      	mov	r6, r0
 800cb66:	db01      	blt.n	800cb6c <_malloc_r+0x1c>
 800cb68:	42a9      	cmp	r1, r5
 800cb6a:	d904      	bls.n	800cb76 <_malloc_r+0x26>
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	6033      	str	r3, [r6, #0]
 800cb70:	2000      	movs	r0, #0
 800cb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc4c <_malloc_r+0xfc>
 800cb7a:	f000 f869 	bl	800cc50 <__malloc_lock>
 800cb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb82:	461c      	mov	r4, r3
 800cb84:	bb44      	cbnz	r4, 800cbd8 <_malloc_r+0x88>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff ffbf 	bl	800cb0c <sbrk_aligned>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	4604      	mov	r4, r0
 800cb92:	d158      	bne.n	800cc46 <_malloc_r+0xf6>
 800cb94:	f8d8 4000 	ldr.w	r4, [r8]
 800cb98:	4627      	mov	r7, r4
 800cb9a:	2f00      	cmp	r7, #0
 800cb9c:	d143      	bne.n	800cc26 <_malloc_r+0xd6>
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	d04b      	beq.n	800cc3a <_malloc_r+0xea>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	4639      	mov	r1, r7
 800cba6:	4630      	mov	r0, r6
 800cba8:	eb04 0903 	add.w	r9, r4, r3
 800cbac:	f000 fdf4 	bl	800d798 <_sbrk_r>
 800cbb0:	4581      	cmp	r9, r0
 800cbb2:	d142      	bne.n	800cc3a <_malloc_r+0xea>
 800cbb4:	6821      	ldr	r1, [r4, #0]
 800cbb6:	1a6d      	subs	r5, r5, r1
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7ff ffa6 	bl	800cb0c <sbrk_aligned>
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d03a      	beq.n	800cc3a <_malloc_r+0xea>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	442b      	add	r3, r5
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	f8d8 3000 	ldr.w	r3, [r8]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	bb62      	cbnz	r2, 800cc2c <_malloc_r+0xdc>
 800cbd2:	f8c8 7000 	str.w	r7, [r8]
 800cbd6:	e00f      	b.n	800cbf8 <_malloc_r+0xa8>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	1b52      	subs	r2, r2, r5
 800cbdc:	d420      	bmi.n	800cc20 <_malloc_r+0xd0>
 800cbde:	2a0b      	cmp	r2, #11
 800cbe0:	d917      	bls.n	800cc12 <_malloc_r+0xc2>
 800cbe2:	1961      	adds	r1, r4, r5
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	6025      	str	r5, [r4, #0]
 800cbe8:	bf18      	it	ne
 800cbea:	6059      	strne	r1, [r3, #4]
 800cbec:	6863      	ldr	r3, [r4, #4]
 800cbee:	bf08      	it	eq
 800cbf0:	f8c8 1000 	streq.w	r1, [r8]
 800cbf4:	5162      	str	r2, [r4, r5]
 800cbf6:	604b      	str	r3, [r1, #4]
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 f82f 	bl	800cc5c <__malloc_unlock>
 800cbfe:	f104 000b 	add.w	r0, r4, #11
 800cc02:	1d23      	adds	r3, r4, #4
 800cc04:	f020 0007 	bic.w	r0, r0, #7
 800cc08:	1ac2      	subs	r2, r0, r3
 800cc0a:	bf1c      	itt	ne
 800cc0c:	1a1b      	subne	r3, r3, r0
 800cc0e:	50a3      	strne	r3, [r4, r2]
 800cc10:	e7af      	b.n	800cb72 <_malloc_r+0x22>
 800cc12:	6862      	ldr	r2, [r4, #4]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	bf0c      	ite	eq
 800cc18:	f8c8 2000 	streq.w	r2, [r8]
 800cc1c:	605a      	strne	r2, [r3, #4]
 800cc1e:	e7eb      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc20:	4623      	mov	r3, r4
 800cc22:	6864      	ldr	r4, [r4, #4]
 800cc24:	e7ae      	b.n	800cb84 <_malloc_r+0x34>
 800cc26:	463c      	mov	r4, r7
 800cc28:	687f      	ldr	r7, [r7, #4]
 800cc2a:	e7b6      	b.n	800cb9a <_malloc_r+0x4a>
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	42a3      	cmp	r3, r4
 800cc32:	d1fb      	bne.n	800cc2c <_malloc_r+0xdc>
 800cc34:	2300      	movs	r3, #0
 800cc36:	6053      	str	r3, [r2, #4]
 800cc38:	e7de      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	6033      	str	r3, [r6, #0]
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 f80c 	bl	800cc5c <__malloc_unlock>
 800cc44:	e794      	b.n	800cb70 <_malloc_r+0x20>
 800cc46:	6005      	str	r5, [r0, #0]
 800cc48:	e7d6      	b.n	800cbf8 <_malloc_r+0xa8>
 800cc4a:	bf00      	nop
 800cc4c:	200018e4 	.word	0x200018e4

0800cc50 <__malloc_lock>:
 800cc50:	4801      	ldr	r0, [pc, #4]	@ (800cc58 <__malloc_lock+0x8>)
 800cc52:	f7ff b89e 	b.w	800bd92 <__retarget_lock_acquire_recursive>
 800cc56:	bf00      	nop
 800cc58:	200018dc 	.word	0x200018dc

0800cc5c <__malloc_unlock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	@ (800cc64 <__malloc_unlock+0x8>)
 800cc5e:	f7ff b899 	b.w	800bd94 <__retarget_lock_release_recursive>
 800cc62:	bf00      	nop
 800cc64:	200018dc 	.word	0x200018dc

0800cc68 <_Balloc>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	69c6      	ldr	r6, [r0, #28]
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	b976      	cbnz	r6, 800cc90 <_Balloc+0x28>
 800cc72:	2010      	movs	r0, #16
 800cc74:	f7ff ff42 	bl	800cafc <malloc>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	61e0      	str	r0, [r4, #28]
 800cc7c:	b920      	cbnz	r0, 800cc88 <_Balloc+0x20>
 800cc7e:	4b18      	ldr	r3, [pc, #96]	@ (800cce0 <_Balloc+0x78>)
 800cc80:	4818      	ldr	r0, [pc, #96]	@ (800cce4 <_Balloc+0x7c>)
 800cc82:	216b      	movs	r1, #107	@ 0x6b
 800cc84:	f000 fd98 	bl	800d7b8 <__assert_func>
 800cc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc8c:	6006      	str	r6, [r0, #0]
 800cc8e:	60c6      	str	r6, [r0, #12]
 800cc90:	69e6      	ldr	r6, [r4, #28]
 800cc92:	68f3      	ldr	r3, [r6, #12]
 800cc94:	b183      	cbz	r3, 800ccb8 <_Balloc+0x50>
 800cc96:	69e3      	ldr	r3, [r4, #28]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc9e:	b9b8      	cbnz	r0, 800ccd0 <_Balloc+0x68>
 800cca0:	2101      	movs	r1, #1
 800cca2:	fa01 f605 	lsl.w	r6, r1, r5
 800cca6:	1d72      	adds	r2, r6, #5
 800cca8:	0092      	lsls	r2, r2, #2
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fda2 	bl	800d7f4 <_calloc_r>
 800ccb0:	b160      	cbz	r0, 800cccc <_Balloc+0x64>
 800ccb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccb6:	e00e      	b.n	800ccd6 <_Balloc+0x6e>
 800ccb8:	2221      	movs	r2, #33	@ 0x21
 800ccba:	2104      	movs	r1, #4
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 fd99 	bl	800d7f4 <_calloc_r>
 800ccc2:	69e3      	ldr	r3, [r4, #28]
 800ccc4:	60f0      	str	r0, [r6, #12]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1e4      	bne.n	800cc96 <_Balloc+0x2e>
 800cccc:	2000      	movs	r0, #0
 800ccce:	bd70      	pop	{r4, r5, r6, pc}
 800ccd0:	6802      	ldr	r2, [r0, #0]
 800ccd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccdc:	e7f7      	b.n	800ccce <_Balloc+0x66>
 800ccde:	bf00      	nop
 800cce0:	0800df3d 	.word	0x0800df3d
 800cce4:	0800dfbd 	.word	0x0800dfbd

0800cce8 <_Bfree>:
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	69c6      	ldr	r6, [r0, #28]
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	b976      	cbnz	r6, 800cd10 <_Bfree+0x28>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	f7ff ff02 	bl	800cafc <malloc>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	61e8      	str	r0, [r5, #28]
 800ccfc:	b920      	cbnz	r0, 800cd08 <_Bfree+0x20>
 800ccfe:	4b09      	ldr	r3, [pc, #36]	@ (800cd24 <_Bfree+0x3c>)
 800cd00:	4809      	ldr	r0, [pc, #36]	@ (800cd28 <_Bfree+0x40>)
 800cd02:	218f      	movs	r1, #143	@ 0x8f
 800cd04:	f000 fd58 	bl	800d7b8 <__assert_func>
 800cd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd0c:	6006      	str	r6, [r0, #0]
 800cd0e:	60c6      	str	r6, [r0, #12]
 800cd10:	b13c      	cbz	r4, 800cd22 <_Bfree+0x3a>
 800cd12:	69eb      	ldr	r3, [r5, #28]
 800cd14:	6862      	ldr	r2, [r4, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd1c:	6021      	str	r1, [r4, #0]
 800cd1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	0800df3d 	.word	0x0800df3d
 800cd28:	0800dfbd 	.word	0x0800dfbd

0800cd2c <__multadd>:
 800cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	690d      	ldr	r5, [r1, #16]
 800cd32:	4607      	mov	r7, r0
 800cd34:	460c      	mov	r4, r1
 800cd36:	461e      	mov	r6, r3
 800cd38:	f101 0c14 	add.w	ip, r1, #20
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd42:	b299      	uxth	r1, r3
 800cd44:	fb02 6101 	mla	r1, r2, r1, r6
 800cd48:	0c1e      	lsrs	r6, r3, #16
 800cd4a:	0c0b      	lsrs	r3, r1, #16
 800cd4c:	fb02 3306 	mla	r3, r2, r6, r3
 800cd50:	b289      	uxth	r1, r1
 800cd52:	3001      	adds	r0, #1
 800cd54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd58:	4285      	cmp	r5, r0
 800cd5a:	f84c 1b04 	str.w	r1, [ip], #4
 800cd5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd62:	dcec      	bgt.n	800cd3e <__multadd+0x12>
 800cd64:	b30e      	cbz	r6, 800cdaa <__multadd+0x7e>
 800cd66:	68a3      	ldr	r3, [r4, #8]
 800cd68:	42ab      	cmp	r3, r5
 800cd6a:	dc19      	bgt.n	800cda0 <__multadd+0x74>
 800cd6c:	6861      	ldr	r1, [r4, #4]
 800cd6e:	4638      	mov	r0, r7
 800cd70:	3101      	adds	r1, #1
 800cd72:	f7ff ff79 	bl	800cc68 <_Balloc>
 800cd76:	4680      	mov	r8, r0
 800cd78:	b928      	cbnz	r0, 800cd86 <__multadd+0x5a>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb0 <__multadd+0x84>)
 800cd7e:	480d      	ldr	r0, [pc, #52]	@ (800cdb4 <__multadd+0x88>)
 800cd80:	21ba      	movs	r1, #186	@ 0xba
 800cd82:	f000 fd19 	bl	800d7b8 <__assert_func>
 800cd86:	6922      	ldr	r2, [r4, #16]
 800cd88:	3202      	adds	r2, #2
 800cd8a:	f104 010c 	add.w	r1, r4, #12
 800cd8e:	0092      	lsls	r2, r2, #2
 800cd90:	300c      	adds	r0, #12
 800cd92:	f7ff f800 	bl	800bd96 <memcpy>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7ff ffa5 	bl	800cce8 <_Bfree>
 800cd9e:	4644      	mov	r4, r8
 800cda0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cda4:	3501      	adds	r5, #1
 800cda6:	615e      	str	r6, [r3, #20]
 800cda8:	6125      	str	r5, [r4, #16]
 800cdaa:	4620      	mov	r0, r4
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	0800dfac 	.word	0x0800dfac
 800cdb4:	0800dfbd 	.word	0x0800dfbd

0800cdb8 <__hi0bits>:
 800cdb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	bf36      	itet	cc
 800cdc0:	0403      	lslcc	r3, r0, #16
 800cdc2:	2000      	movcs	r0, #0
 800cdc4:	2010      	movcc	r0, #16
 800cdc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdca:	bf3c      	itt	cc
 800cdcc:	021b      	lslcc	r3, r3, #8
 800cdce:	3008      	addcc	r0, #8
 800cdd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdd4:	bf3c      	itt	cc
 800cdd6:	011b      	lslcc	r3, r3, #4
 800cdd8:	3004      	addcc	r0, #4
 800cdda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdde:	bf3c      	itt	cc
 800cde0:	009b      	lslcc	r3, r3, #2
 800cde2:	3002      	addcc	r0, #2
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	db05      	blt.n	800cdf4 <__hi0bits+0x3c>
 800cde8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdec:	f100 0001 	add.w	r0, r0, #1
 800cdf0:	bf08      	it	eq
 800cdf2:	2020      	moveq	r0, #32
 800cdf4:	4770      	bx	lr

0800cdf6 <__lo0bits>:
 800cdf6:	6803      	ldr	r3, [r0, #0]
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	f013 0007 	ands.w	r0, r3, #7
 800cdfe:	d00b      	beq.n	800ce18 <__lo0bits+0x22>
 800ce00:	07d9      	lsls	r1, r3, #31
 800ce02:	d421      	bmi.n	800ce48 <__lo0bits+0x52>
 800ce04:	0798      	lsls	r0, r3, #30
 800ce06:	bf49      	itett	mi
 800ce08:	085b      	lsrmi	r3, r3, #1
 800ce0a:	089b      	lsrpl	r3, r3, #2
 800ce0c:	2001      	movmi	r0, #1
 800ce0e:	6013      	strmi	r3, [r2, #0]
 800ce10:	bf5c      	itt	pl
 800ce12:	6013      	strpl	r3, [r2, #0]
 800ce14:	2002      	movpl	r0, #2
 800ce16:	4770      	bx	lr
 800ce18:	b299      	uxth	r1, r3
 800ce1a:	b909      	cbnz	r1, 800ce20 <__lo0bits+0x2a>
 800ce1c:	0c1b      	lsrs	r3, r3, #16
 800ce1e:	2010      	movs	r0, #16
 800ce20:	b2d9      	uxtb	r1, r3
 800ce22:	b909      	cbnz	r1, 800ce28 <__lo0bits+0x32>
 800ce24:	3008      	adds	r0, #8
 800ce26:	0a1b      	lsrs	r3, r3, #8
 800ce28:	0719      	lsls	r1, r3, #28
 800ce2a:	bf04      	itt	eq
 800ce2c:	091b      	lsreq	r3, r3, #4
 800ce2e:	3004      	addeq	r0, #4
 800ce30:	0799      	lsls	r1, r3, #30
 800ce32:	bf04      	itt	eq
 800ce34:	089b      	lsreq	r3, r3, #2
 800ce36:	3002      	addeq	r0, #2
 800ce38:	07d9      	lsls	r1, r3, #31
 800ce3a:	d403      	bmi.n	800ce44 <__lo0bits+0x4e>
 800ce3c:	085b      	lsrs	r3, r3, #1
 800ce3e:	f100 0001 	add.w	r0, r0, #1
 800ce42:	d003      	beq.n	800ce4c <__lo0bits+0x56>
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	4770      	bx	lr
 800ce48:	2000      	movs	r0, #0
 800ce4a:	4770      	bx	lr
 800ce4c:	2020      	movs	r0, #32
 800ce4e:	4770      	bx	lr

0800ce50 <__i2b>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	2101      	movs	r1, #1
 800ce56:	f7ff ff07 	bl	800cc68 <_Balloc>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	b928      	cbnz	r0, 800ce6a <__i2b+0x1a>
 800ce5e:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <__i2b+0x24>)
 800ce60:	4805      	ldr	r0, [pc, #20]	@ (800ce78 <__i2b+0x28>)
 800ce62:	f240 1145 	movw	r1, #325	@ 0x145
 800ce66:	f000 fca7 	bl	800d7b8 <__assert_func>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	6144      	str	r4, [r0, #20]
 800ce6e:	6103      	str	r3, [r0, #16]
 800ce70:	bd10      	pop	{r4, pc}
 800ce72:	bf00      	nop
 800ce74:	0800dfac 	.word	0x0800dfac
 800ce78:	0800dfbd 	.word	0x0800dfbd

0800ce7c <__multiply>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	4617      	mov	r7, r2
 800ce82:	690a      	ldr	r2, [r1, #16]
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	bfa8      	it	ge
 800ce8a:	463b      	movge	r3, r7
 800ce8c:	4689      	mov	r9, r1
 800ce8e:	bfa4      	itt	ge
 800ce90:	460f      	movge	r7, r1
 800ce92:	4699      	movge	r9, r3
 800ce94:	693d      	ldr	r5, [r7, #16]
 800ce96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	eb05 060a 	add.w	r6, r5, sl
 800cea2:	42b3      	cmp	r3, r6
 800cea4:	b085      	sub	sp, #20
 800cea6:	bfb8      	it	lt
 800cea8:	3101      	addlt	r1, #1
 800ceaa:	f7ff fedd 	bl	800cc68 <_Balloc>
 800ceae:	b930      	cbnz	r0, 800cebe <__multiply+0x42>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	4b41      	ldr	r3, [pc, #260]	@ (800cfb8 <__multiply+0x13c>)
 800ceb4:	4841      	ldr	r0, [pc, #260]	@ (800cfbc <__multiply+0x140>)
 800ceb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ceba:	f000 fc7d 	bl	800d7b8 <__assert_func>
 800cebe:	f100 0414 	add.w	r4, r0, #20
 800cec2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cec6:	4623      	mov	r3, r4
 800cec8:	2200      	movs	r2, #0
 800ceca:	4573      	cmp	r3, lr
 800cecc:	d320      	bcc.n	800cf10 <__multiply+0x94>
 800cece:	f107 0814 	add.w	r8, r7, #20
 800ced2:	f109 0114 	add.w	r1, r9, #20
 800ced6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ceda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cede:	9302      	str	r3, [sp, #8]
 800cee0:	1beb      	subs	r3, r5, r7
 800cee2:	3b15      	subs	r3, #21
 800cee4:	f023 0303 	bic.w	r3, r3, #3
 800cee8:	3304      	adds	r3, #4
 800ceea:	3715      	adds	r7, #21
 800ceec:	42bd      	cmp	r5, r7
 800ceee:	bf38      	it	cc
 800cef0:	2304      	movcc	r3, #4
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	9b02      	ldr	r3, [sp, #8]
 800cef6:	9103      	str	r1, [sp, #12]
 800cef8:	428b      	cmp	r3, r1
 800cefa:	d80c      	bhi.n	800cf16 <__multiply+0x9a>
 800cefc:	2e00      	cmp	r6, #0
 800cefe:	dd03      	ble.n	800cf08 <__multiply+0x8c>
 800cf00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d055      	beq.n	800cfb4 <__multiply+0x138>
 800cf08:	6106      	str	r6, [r0, #16]
 800cf0a:	b005      	add	sp, #20
 800cf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf10:	f843 2b04 	str.w	r2, [r3], #4
 800cf14:	e7d9      	b.n	800ceca <__multiply+0x4e>
 800cf16:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf1a:	f1ba 0f00 	cmp.w	sl, #0
 800cf1e:	d01f      	beq.n	800cf60 <__multiply+0xe4>
 800cf20:	46c4      	mov	ip, r8
 800cf22:	46a1      	mov	r9, r4
 800cf24:	2700      	movs	r7, #0
 800cf26:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf2a:	f8d9 3000 	ldr.w	r3, [r9]
 800cf2e:	fa1f fb82 	uxth.w	fp, r2
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf38:	443b      	add	r3, r7
 800cf3a:	f8d9 7000 	ldr.w	r7, [r9]
 800cf3e:	0c12      	lsrs	r2, r2, #16
 800cf40:	0c3f      	lsrs	r7, r7, #16
 800cf42:	fb0a 7202 	mla	r2, sl, r2, r7
 800cf46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf50:	4565      	cmp	r5, ip
 800cf52:	f849 3b04 	str.w	r3, [r9], #4
 800cf56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cf5a:	d8e4      	bhi.n	800cf26 <__multiply+0xaa>
 800cf5c:	9b01      	ldr	r3, [sp, #4]
 800cf5e:	50e7      	str	r7, [r4, r3]
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf66:	3104      	adds	r1, #4
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	d020      	beq.n	800cfb0 <__multiply+0x134>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	4647      	mov	r7, r8
 800cf72:	46a4      	mov	ip, r4
 800cf74:	f04f 0a00 	mov.w	sl, #0
 800cf78:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf80:	fb09 220b 	mla	r2, r9, fp, r2
 800cf84:	4452      	add	r2, sl
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf8c:	f84c 3b04 	str.w	r3, [ip], #4
 800cf90:	f857 3b04 	ldr.w	r3, [r7], #4
 800cf94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf98:	f8bc 3000 	ldrh.w	r3, [ip]
 800cf9c:	fb09 330a 	mla	r3, r9, sl, r3
 800cfa0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cfa4:	42bd      	cmp	r5, r7
 800cfa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfaa:	d8e5      	bhi.n	800cf78 <__multiply+0xfc>
 800cfac:	9a01      	ldr	r2, [sp, #4]
 800cfae:	50a3      	str	r3, [r4, r2]
 800cfb0:	3404      	adds	r4, #4
 800cfb2:	e79f      	b.n	800cef4 <__multiply+0x78>
 800cfb4:	3e01      	subs	r6, #1
 800cfb6:	e7a1      	b.n	800cefc <__multiply+0x80>
 800cfb8:	0800dfac 	.word	0x0800dfac
 800cfbc:	0800dfbd 	.word	0x0800dfbd

0800cfc0 <__pow5mult>:
 800cfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	4615      	mov	r5, r2
 800cfc6:	f012 0203 	ands.w	r2, r2, #3
 800cfca:	4607      	mov	r7, r0
 800cfcc:	460e      	mov	r6, r1
 800cfce:	d007      	beq.n	800cfe0 <__pow5mult+0x20>
 800cfd0:	4c25      	ldr	r4, [pc, #148]	@ (800d068 <__pow5mult+0xa8>)
 800cfd2:	3a01      	subs	r2, #1
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfda:	f7ff fea7 	bl	800cd2c <__multadd>
 800cfde:	4606      	mov	r6, r0
 800cfe0:	10ad      	asrs	r5, r5, #2
 800cfe2:	d03d      	beq.n	800d060 <__pow5mult+0xa0>
 800cfe4:	69fc      	ldr	r4, [r7, #28]
 800cfe6:	b97c      	cbnz	r4, 800d008 <__pow5mult+0x48>
 800cfe8:	2010      	movs	r0, #16
 800cfea:	f7ff fd87 	bl	800cafc <malloc>
 800cfee:	4602      	mov	r2, r0
 800cff0:	61f8      	str	r0, [r7, #28]
 800cff2:	b928      	cbnz	r0, 800d000 <__pow5mult+0x40>
 800cff4:	4b1d      	ldr	r3, [pc, #116]	@ (800d06c <__pow5mult+0xac>)
 800cff6:	481e      	ldr	r0, [pc, #120]	@ (800d070 <__pow5mult+0xb0>)
 800cff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cffc:	f000 fbdc 	bl	800d7b8 <__assert_func>
 800d000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d004:	6004      	str	r4, [r0, #0]
 800d006:	60c4      	str	r4, [r0, #12]
 800d008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d00c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d010:	b94c      	cbnz	r4, 800d026 <__pow5mult+0x66>
 800d012:	f240 2171 	movw	r1, #625	@ 0x271
 800d016:	4638      	mov	r0, r7
 800d018:	f7ff ff1a 	bl	800ce50 <__i2b>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d022:	4604      	mov	r4, r0
 800d024:	6003      	str	r3, [r0, #0]
 800d026:	f04f 0900 	mov.w	r9, #0
 800d02a:	07eb      	lsls	r3, r5, #31
 800d02c:	d50a      	bpl.n	800d044 <__pow5mult+0x84>
 800d02e:	4631      	mov	r1, r6
 800d030:	4622      	mov	r2, r4
 800d032:	4638      	mov	r0, r7
 800d034:	f7ff ff22 	bl	800ce7c <__multiply>
 800d038:	4631      	mov	r1, r6
 800d03a:	4680      	mov	r8, r0
 800d03c:	4638      	mov	r0, r7
 800d03e:	f7ff fe53 	bl	800cce8 <_Bfree>
 800d042:	4646      	mov	r6, r8
 800d044:	106d      	asrs	r5, r5, #1
 800d046:	d00b      	beq.n	800d060 <__pow5mult+0xa0>
 800d048:	6820      	ldr	r0, [r4, #0]
 800d04a:	b938      	cbnz	r0, 800d05c <__pow5mult+0x9c>
 800d04c:	4622      	mov	r2, r4
 800d04e:	4621      	mov	r1, r4
 800d050:	4638      	mov	r0, r7
 800d052:	f7ff ff13 	bl	800ce7c <__multiply>
 800d056:	6020      	str	r0, [r4, #0]
 800d058:	f8c0 9000 	str.w	r9, [r0]
 800d05c:	4604      	mov	r4, r0
 800d05e:	e7e4      	b.n	800d02a <__pow5mult+0x6a>
 800d060:	4630      	mov	r0, r6
 800d062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d066:	bf00      	nop
 800d068:	0800e070 	.word	0x0800e070
 800d06c:	0800df3d 	.word	0x0800df3d
 800d070:	0800dfbd 	.word	0x0800dfbd

0800d074 <__lshift>:
 800d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d078:	460c      	mov	r4, r1
 800d07a:	6849      	ldr	r1, [r1, #4]
 800d07c:	6923      	ldr	r3, [r4, #16]
 800d07e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d082:	68a3      	ldr	r3, [r4, #8]
 800d084:	4607      	mov	r7, r0
 800d086:	4691      	mov	r9, r2
 800d088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d08c:	f108 0601 	add.w	r6, r8, #1
 800d090:	42b3      	cmp	r3, r6
 800d092:	db0b      	blt.n	800d0ac <__lshift+0x38>
 800d094:	4638      	mov	r0, r7
 800d096:	f7ff fde7 	bl	800cc68 <_Balloc>
 800d09a:	4605      	mov	r5, r0
 800d09c:	b948      	cbnz	r0, 800d0b2 <__lshift+0x3e>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	4b28      	ldr	r3, [pc, #160]	@ (800d144 <__lshift+0xd0>)
 800d0a2:	4829      	ldr	r0, [pc, #164]	@ (800d148 <__lshift+0xd4>)
 800d0a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0a8:	f000 fb86 	bl	800d7b8 <__assert_func>
 800d0ac:	3101      	adds	r1, #1
 800d0ae:	005b      	lsls	r3, r3, #1
 800d0b0:	e7ee      	b.n	800d090 <__lshift+0x1c>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f100 0114 	add.w	r1, r0, #20
 800d0b8:	f100 0210 	add.w	r2, r0, #16
 800d0bc:	4618      	mov	r0, r3
 800d0be:	4553      	cmp	r3, sl
 800d0c0:	db33      	blt.n	800d12a <__lshift+0xb6>
 800d0c2:	6920      	ldr	r0, [r4, #16]
 800d0c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0c8:	f104 0314 	add.w	r3, r4, #20
 800d0cc:	f019 091f 	ands.w	r9, r9, #31
 800d0d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0d8:	d02b      	beq.n	800d132 <__lshift+0xbe>
 800d0da:	f1c9 0e20 	rsb	lr, r9, #32
 800d0de:	468a      	mov	sl, r1
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	6818      	ldr	r0, [r3, #0]
 800d0e4:	fa00 f009 	lsl.w	r0, r0, r9
 800d0e8:	4310      	orrs	r0, r2
 800d0ea:	f84a 0b04 	str.w	r0, [sl], #4
 800d0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f2:	459c      	cmp	ip, r3
 800d0f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0f8:	d8f3      	bhi.n	800d0e2 <__lshift+0x6e>
 800d0fa:	ebac 0304 	sub.w	r3, ip, r4
 800d0fe:	3b15      	subs	r3, #21
 800d100:	f023 0303 	bic.w	r3, r3, #3
 800d104:	3304      	adds	r3, #4
 800d106:	f104 0015 	add.w	r0, r4, #21
 800d10a:	4560      	cmp	r0, ip
 800d10c:	bf88      	it	hi
 800d10e:	2304      	movhi	r3, #4
 800d110:	50ca      	str	r2, [r1, r3]
 800d112:	b10a      	cbz	r2, 800d118 <__lshift+0xa4>
 800d114:	f108 0602 	add.w	r6, r8, #2
 800d118:	3e01      	subs	r6, #1
 800d11a:	4638      	mov	r0, r7
 800d11c:	612e      	str	r6, [r5, #16]
 800d11e:	4621      	mov	r1, r4
 800d120:	f7ff fde2 	bl	800cce8 <_Bfree>
 800d124:	4628      	mov	r0, r5
 800d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d12e:	3301      	adds	r3, #1
 800d130:	e7c5      	b.n	800d0be <__lshift+0x4a>
 800d132:	3904      	subs	r1, #4
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	f841 2f04 	str.w	r2, [r1, #4]!
 800d13c:	459c      	cmp	ip, r3
 800d13e:	d8f9      	bhi.n	800d134 <__lshift+0xc0>
 800d140:	e7ea      	b.n	800d118 <__lshift+0xa4>
 800d142:	bf00      	nop
 800d144:	0800dfac 	.word	0x0800dfac
 800d148:	0800dfbd 	.word	0x0800dfbd

0800d14c <__mcmp>:
 800d14c:	690a      	ldr	r2, [r1, #16]
 800d14e:	4603      	mov	r3, r0
 800d150:	6900      	ldr	r0, [r0, #16]
 800d152:	1a80      	subs	r0, r0, r2
 800d154:	b530      	push	{r4, r5, lr}
 800d156:	d10e      	bne.n	800d176 <__mcmp+0x2a>
 800d158:	3314      	adds	r3, #20
 800d15a:	3114      	adds	r1, #20
 800d15c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d16c:	4295      	cmp	r5, r2
 800d16e:	d003      	beq.n	800d178 <__mcmp+0x2c>
 800d170:	d205      	bcs.n	800d17e <__mcmp+0x32>
 800d172:	f04f 30ff 	mov.w	r0, #4294967295
 800d176:	bd30      	pop	{r4, r5, pc}
 800d178:	42a3      	cmp	r3, r4
 800d17a:	d3f3      	bcc.n	800d164 <__mcmp+0x18>
 800d17c:	e7fb      	b.n	800d176 <__mcmp+0x2a>
 800d17e:	2001      	movs	r0, #1
 800d180:	e7f9      	b.n	800d176 <__mcmp+0x2a>
	...

0800d184 <__mdiff>:
 800d184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d188:	4689      	mov	r9, r1
 800d18a:	4606      	mov	r6, r0
 800d18c:	4611      	mov	r1, r2
 800d18e:	4648      	mov	r0, r9
 800d190:	4614      	mov	r4, r2
 800d192:	f7ff ffdb 	bl	800d14c <__mcmp>
 800d196:	1e05      	subs	r5, r0, #0
 800d198:	d112      	bne.n	800d1c0 <__mdiff+0x3c>
 800d19a:	4629      	mov	r1, r5
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7ff fd63 	bl	800cc68 <_Balloc>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	b928      	cbnz	r0, 800d1b2 <__mdiff+0x2e>
 800d1a6:	4b3f      	ldr	r3, [pc, #252]	@ (800d2a4 <__mdiff+0x120>)
 800d1a8:	f240 2137 	movw	r1, #567	@ 0x237
 800d1ac:	483e      	ldr	r0, [pc, #248]	@ (800d2a8 <__mdiff+0x124>)
 800d1ae:	f000 fb03 	bl	800d7b8 <__assert_func>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	b003      	add	sp, #12
 800d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c0:	bfbc      	itt	lt
 800d1c2:	464b      	movlt	r3, r9
 800d1c4:	46a1      	movlt	r9, r4
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1cc:	bfba      	itte	lt
 800d1ce:	461c      	movlt	r4, r3
 800d1d0:	2501      	movlt	r5, #1
 800d1d2:	2500      	movge	r5, #0
 800d1d4:	f7ff fd48 	bl	800cc68 <_Balloc>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	b918      	cbnz	r0, 800d1e4 <__mdiff+0x60>
 800d1dc:	4b31      	ldr	r3, [pc, #196]	@ (800d2a4 <__mdiff+0x120>)
 800d1de:	f240 2145 	movw	r1, #581	@ 0x245
 800d1e2:	e7e3      	b.n	800d1ac <__mdiff+0x28>
 800d1e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1e8:	6926      	ldr	r6, [r4, #16]
 800d1ea:	60c5      	str	r5, [r0, #12]
 800d1ec:	f109 0310 	add.w	r3, r9, #16
 800d1f0:	f109 0514 	add.w	r5, r9, #20
 800d1f4:	f104 0e14 	add.w	lr, r4, #20
 800d1f8:	f100 0b14 	add.w	fp, r0, #20
 800d1fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	46d9      	mov	r9, fp
 800d208:	f04f 0c00 	mov.w	ip, #0
 800d20c:	9b01      	ldr	r3, [sp, #4]
 800d20e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d212:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	fa1f f38a 	uxth.w	r3, sl
 800d21c:	4619      	mov	r1, r3
 800d21e:	b283      	uxth	r3, r0
 800d220:	1acb      	subs	r3, r1, r3
 800d222:	0c00      	lsrs	r0, r0, #16
 800d224:	4463      	add	r3, ip
 800d226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d22a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d22e:	b29b      	uxth	r3, r3
 800d230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d234:	4576      	cmp	r6, lr
 800d236:	f849 3b04 	str.w	r3, [r9], #4
 800d23a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d23e:	d8e5      	bhi.n	800d20c <__mdiff+0x88>
 800d240:	1b33      	subs	r3, r6, r4
 800d242:	3b15      	subs	r3, #21
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	3415      	adds	r4, #21
 800d24a:	3304      	adds	r3, #4
 800d24c:	42a6      	cmp	r6, r4
 800d24e:	bf38      	it	cc
 800d250:	2304      	movcc	r3, #4
 800d252:	441d      	add	r5, r3
 800d254:	445b      	add	r3, fp
 800d256:	461e      	mov	r6, r3
 800d258:	462c      	mov	r4, r5
 800d25a:	4544      	cmp	r4, r8
 800d25c:	d30e      	bcc.n	800d27c <__mdiff+0xf8>
 800d25e:	f108 0103 	add.w	r1, r8, #3
 800d262:	1b49      	subs	r1, r1, r5
 800d264:	f021 0103 	bic.w	r1, r1, #3
 800d268:	3d03      	subs	r5, #3
 800d26a:	45a8      	cmp	r8, r5
 800d26c:	bf38      	it	cc
 800d26e:	2100      	movcc	r1, #0
 800d270:	440b      	add	r3, r1
 800d272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d276:	b191      	cbz	r1, 800d29e <__mdiff+0x11a>
 800d278:	6117      	str	r7, [r2, #16]
 800d27a:	e79d      	b.n	800d1b8 <__mdiff+0x34>
 800d27c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d280:	46e6      	mov	lr, ip
 800d282:	0c08      	lsrs	r0, r1, #16
 800d284:	fa1c fc81 	uxtah	ip, ip, r1
 800d288:	4471      	add	r1, lr
 800d28a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d28e:	b289      	uxth	r1, r1
 800d290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d294:	f846 1b04 	str.w	r1, [r6], #4
 800d298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d29c:	e7dd      	b.n	800d25a <__mdiff+0xd6>
 800d29e:	3f01      	subs	r7, #1
 800d2a0:	e7e7      	b.n	800d272 <__mdiff+0xee>
 800d2a2:	bf00      	nop
 800d2a4:	0800dfac 	.word	0x0800dfac
 800d2a8:	0800dfbd 	.word	0x0800dfbd

0800d2ac <__d2b>:
 800d2ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	2101      	movs	r1, #1
 800d2b4:	ec59 8b10 	vmov	r8, r9, d0
 800d2b8:	4616      	mov	r6, r2
 800d2ba:	f7ff fcd5 	bl	800cc68 <_Balloc>
 800d2be:	4604      	mov	r4, r0
 800d2c0:	b930      	cbnz	r0, 800d2d0 <__d2b+0x24>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	4b23      	ldr	r3, [pc, #140]	@ (800d354 <__d2b+0xa8>)
 800d2c6:	4824      	ldr	r0, [pc, #144]	@ (800d358 <__d2b+0xac>)
 800d2c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2cc:	f000 fa74 	bl	800d7b8 <__assert_func>
 800d2d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2d8:	b10d      	cbz	r5, 800d2de <__d2b+0x32>
 800d2da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2de:	9301      	str	r3, [sp, #4]
 800d2e0:	f1b8 0300 	subs.w	r3, r8, #0
 800d2e4:	d023      	beq.n	800d32e <__d2b+0x82>
 800d2e6:	4668      	mov	r0, sp
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	f7ff fd84 	bl	800cdf6 <__lo0bits>
 800d2ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2f2:	b1d0      	cbz	r0, 800d32a <__d2b+0x7e>
 800d2f4:	f1c0 0320 	rsb	r3, r0, #32
 800d2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fc:	430b      	orrs	r3, r1
 800d2fe:	40c2      	lsrs	r2, r0
 800d300:	6163      	str	r3, [r4, #20]
 800d302:	9201      	str	r2, [sp, #4]
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	61a3      	str	r3, [r4, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bf0c      	ite	eq
 800d30c:	2201      	moveq	r2, #1
 800d30e:	2202      	movne	r2, #2
 800d310:	6122      	str	r2, [r4, #16]
 800d312:	b1a5      	cbz	r5, 800d33e <__d2b+0x92>
 800d314:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d318:	4405      	add	r5, r0
 800d31a:	603d      	str	r5, [r7, #0]
 800d31c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d320:	6030      	str	r0, [r6, #0]
 800d322:	4620      	mov	r0, r4
 800d324:	b003      	add	sp, #12
 800d326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d32a:	6161      	str	r1, [r4, #20]
 800d32c:	e7ea      	b.n	800d304 <__d2b+0x58>
 800d32e:	a801      	add	r0, sp, #4
 800d330:	f7ff fd61 	bl	800cdf6 <__lo0bits>
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	6163      	str	r3, [r4, #20]
 800d338:	3020      	adds	r0, #32
 800d33a:	2201      	movs	r2, #1
 800d33c:	e7e8      	b.n	800d310 <__d2b+0x64>
 800d33e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d342:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d346:	6038      	str	r0, [r7, #0]
 800d348:	6918      	ldr	r0, [r3, #16]
 800d34a:	f7ff fd35 	bl	800cdb8 <__hi0bits>
 800d34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d352:	e7e5      	b.n	800d320 <__d2b+0x74>
 800d354:	0800dfac 	.word	0x0800dfac
 800d358:	0800dfbd 	.word	0x0800dfbd

0800d35c <__ssputs_r>:
 800d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d360:	688e      	ldr	r6, [r1, #8]
 800d362:	461f      	mov	r7, r3
 800d364:	42be      	cmp	r6, r7
 800d366:	680b      	ldr	r3, [r1, #0]
 800d368:	4682      	mov	sl, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4690      	mov	r8, r2
 800d36e:	d82d      	bhi.n	800d3cc <__ssputs_r+0x70>
 800d370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d378:	d026      	beq.n	800d3c8 <__ssputs_r+0x6c>
 800d37a:	6965      	ldr	r5, [r4, #20]
 800d37c:	6909      	ldr	r1, [r1, #16]
 800d37e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d382:	eba3 0901 	sub.w	r9, r3, r1
 800d386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d38a:	1c7b      	adds	r3, r7, #1
 800d38c:	444b      	add	r3, r9
 800d38e:	106d      	asrs	r5, r5, #1
 800d390:	429d      	cmp	r5, r3
 800d392:	bf38      	it	cc
 800d394:	461d      	movcc	r5, r3
 800d396:	0553      	lsls	r3, r2, #21
 800d398:	d527      	bpl.n	800d3ea <__ssputs_r+0x8e>
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7ff fbd8 	bl	800cb50 <_malloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	b360      	cbz	r0, 800d3fe <__ssputs_r+0xa2>
 800d3a4:	6921      	ldr	r1, [r4, #16]
 800d3a6:	464a      	mov	r2, r9
 800d3a8:	f7fe fcf5 	bl	800bd96 <memcpy>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	6126      	str	r6, [r4, #16]
 800d3ba:	6165      	str	r5, [r4, #20]
 800d3bc:	444e      	add	r6, r9
 800d3be:	eba5 0509 	sub.w	r5, r5, r9
 800d3c2:	6026      	str	r6, [r4, #0]
 800d3c4:	60a5      	str	r5, [r4, #8]
 800d3c6:	463e      	mov	r6, r7
 800d3c8:	42be      	cmp	r6, r7
 800d3ca:	d900      	bls.n	800d3ce <__ssputs_r+0x72>
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	f000 f9c6 	bl	800d764 <memmove>
 800d3d8:	68a3      	ldr	r3, [r4, #8]
 800d3da:	1b9b      	subs	r3, r3, r6
 800d3dc:	60a3      	str	r3, [r4, #8]
 800d3de:	6823      	ldr	r3, [r4, #0]
 800d3e0:	4433      	add	r3, r6
 800d3e2:	6023      	str	r3, [r4, #0]
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	f000 fa28 	bl	800d840 <_realloc_r>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d1e0      	bne.n	800d3b8 <__ssputs_r+0x5c>
 800d3f6:	6921      	ldr	r1, [r4, #16]
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	f7ff fb35 	bl	800ca68 <_free_r>
 800d3fe:	230c      	movs	r3, #12
 800d400:	f8ca 3000 	str.w	r3, [sl]
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	e7e9      	b.n	800d3e6 <__ssputs_r+0x8a>
	...

0800d414 <_svfiprintf_r>:
 800d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d418:	4698      	mov	r8, r3
 800d41a:	898b      	ldrh	r3, [r1, #12]
 800d41c:	061b      	lsls	r3, r3, #24
 800d41e:	b09d      	sub	sp, #116	@ 0x74
 800d420:	4607      	mov	r7, r0
 800d422:	460d      	mov	r5, r1
 800d424:	4614      	mov	r4, r2
 800d426:	d510      	bpl.n	800d44a <_svfiprintf_r+0x36>
 800d428:	690b      	ldr	r3, [r1, #16]
 800d42a:	b973      	cbnz	r3, 800d44a <_svfiprintf_r+0x36>
 800d42c:	2140      	movs	r1, #64	@ 0x40
 800d42e:	f7ff fb8f 	bl	800cb50 <_malloc_r>
 800d432:	6028      	str	r0, [r5, #0]
 800d434:	6128      	str	r0, [r5, #16]
 800d436:	b930      	cbnz	r0, 800d446 <_svfiprintf_r+0x32>
 800d438:	230c      	movs	r3, #12
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
 800d440:	b01d      	add	sp, #116	@ 0x74
 800d442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d446:	2340      	movs	r3, #64	@ 0x40
 800d448:	616b      	str	r3, [r5, #20]
 800d44a:	2300      	movs	r3, #0
 800d44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44e:	2320      	movs	r3, #32
 800d450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d454:	f8cd 800c 	str.w	r8, [sp, #12]
 800d458:	2330      	movs	r3, #48	@ 0x30
 800d45a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5f8 <_svfiprintf_r+0x1e4>
 800d45e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	4623      	mov	r3, r4
 800d468:	469a      	mov	sl, r3
 800d46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46e:	b10a      	cbz	r2, 800d474 <_svfiprintf_r+0x60>
 800d470:	2a25      	cmp	r2, #37	@ 0x25
 800d472:	d1f9      	bne.n	800d468 <_svfiprintf_r+0x54>
 800d474:	ebba 0b04 	subs.w	fp, sl, r4
 800d478:	d00b      	beq.n	800d492 <_svfiprintf_r+0x7e>
 800d47a:	465b      	mov	r3, fp
 800d47c:	4622      	mov	r2, r4
 800d47e:	4629      	mov	r1, r5
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff ff6b 	bl	800d35c <__ssputs_r>
 800d486:	3001      	adds	r0, #1
 800d488:	f000 80a7 	beq.w	800d5da <_svfiprintf_r+0x1c6>
 800d48c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d48e:	445a      	add	r2, fp
 800d490:	9209      	str	r2, [sp, #36]	@ 0x24
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 809f 	beq.w	800d5da <_svfiprintf_r+0x1c6>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a6:	f10a 0a01 	add.w	sl, sl, #1
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	9307      	str	r3, [sp, #28]
 800d4ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4b4:	4654      	mov	r4, sl
 800d4b6:	2205      	movs	r2, #5
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	484e      	ldr	r0, [pc, #312]	@ (800d5f8 <_svfiprintf_r+0x1e4>)
 800d4be:	f7f2 fe87 	bl	80001d0 <memchr>
 800d4c2:	9a04      	ldr	r2, [sp, #16]
 800d4c4:	b9d8      	cbnz	r0, 800d4fe <_svfiprintf_r+0xea>
 800d4c6:	06d0      	lsls	r0, r2, #27
 800d4c8:	bf44      	itt	mi
 800d4ca:	2320      	movmi	r3, #32
 800d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4d0:	0711      	lsls	r1, r2, #28
 800d4d2:	bf44      	itt	mi
 800d4d4:	232b      	movmi	r3, #43	@ 0x2b
 800d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4da:	f89a 3000 	ldrb.w	r3, [sl]
 800d4de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e0:	d015      	beq.n	800d50e <_svfiprintf_r+0xfa>
 800d4e2:	9a07      	ldr	r2, [sp, #28]
 800d4e4:	4654      	mov	r4, sl
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f04f 0c0a 	mov.w	ip, #10
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f2:	3b30      	subs	r3, #48	@ 0x30
 800d4f4:	2b09      	cmp	r3, #9
 800d4f6:	d94b      	bls.n	800d590 <_svfiprintf_r+0x17c>
 800d4f8:	b1b0      	cbz	r0, 800d528 <_svfiprintf_r+0x114>
 800d4fa:	9207      	str	r2, [sp, #28]
 800d4fc:	e014      	b.n	800d528 <_svfiprintf_r+0x114>
 800d4fe:	eba0 0308 	sub.w	r3, r0, r8
 800d502:	fa09 f303 	lsl.w	r3, r9, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	46a2      	mov	sl, r4
 800d50c:	e7d2      	b.n	800d4b4 <_svfiprintf_r+0xa0>
 800d50e:	9b03      	ldr	r3, [sp, #12]
 800d510:	1d19      	adds	r1, r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	9103      	str	r1, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfbb      	ittet	lt
 800d51a:	425b      	neglt	r3, r3
 800d51c:	f042 0202 	orrlt.w	r2, r2, #2
 800d520:	9307      	strge	r3, [sp, #28]
 800d522:	9307      	strlt	r3, [sp, #28]
 800d524:	bfb8      	it	lt
 800d526:	9204      	strlt	r2, [sp, #16]
 800d528:	7823      	ldrb	r3, [r4, #0]
 800d52a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d52c:	d10a      	bne.n	800d544 <_svfiprintf_r+0x130>
 800d52e:	7863      	ldrb	r3, [r4, #1]
 800d530:	2b2a      	cmp	r3, #42	@ 0x2a
 800d532:	d132      	bne.n	800d59a <_svfiprintf_r+0x186>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	9203      	str	r2, [sp, #12]
 800d53c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d540:	3402      	adds	r4, #2
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d608 <_svfiprintf_r+0x1f4>
 800d548:	7821      	ldrb	r1, [r4, #0]
 800d54a:	2203      	movs	r2, #3
 800d54c:	4650      	mov	r0, sl
 800d54e:	f7f2 fe3f 	bl	80001d0 <memchr>
 800d552:	b138      	cbz	r0, 800d564 <_svfiprintf_r+0x150>
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	eba0 000a 	sub.w	r0, r0, sl
 800d55a:	2240      	movs	r2, #64	@ 0x40
 800d55c:	4082      	lsls	r2, r0
 800d55e:	4313      	orrs	r3, r2
 800d560:	3401      	adds	r4, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	4824      	ldr	r0, [pc, #144]	@ (800d5fc <_svfiprintf_r+0x1e8>)
 800d56a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d56e:	2206      	movs	r2, #6
 800d570:	f7f2 fe2e 	bl	80001d0 <memchr>
 800d574:	2800      	cmp	r0, #0
 800d576:	d036      	beq.n	800d5e6 <_svfiprintf_r+0x1d2>
 800d578:	4b21      	ldr	r3, [pc, #132]	@ (800d600 <_svfiprintf_r+0x1ec>)
 800d57a:	bb1b      	cbnz	r3, 800d5c4 <_svfiprintf_r+0x1b0>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	3307      	adds	r3, #7
 800d580:	f023 0307 	bic.w	r3, r3, #7
 800d584:	3308      	adds	r3, #8
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	4433      	add	r3, r6
 800d58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58e:	e76a      	b.n	800d466 <_svfiprintf_r+0x52>
 800d590:	fb0c 3202 	mla	r2, ip, r2, r3
 800d594:	460c      	mov	r4, r1
 800d596:	2001      	movs	r0, #1
 800d598:	e7a8      	b.n	800d4ec <_svfiprintf_r+0xd8>
 800d59a:	2300      	movs	r3, #0
 800d59c:	3401      	adds	r4, #1
 800d59e:	9305      	str	r3, [sp, #20]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ac:	3a30      	subs	r2, #48	@ 0x30
 800d5ae:	2a09      	cmp	r2, #9
 800d5b0:	d903      	bls.n	800d5ba <_svfiprintf_r+0x1a6>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0c6      	beq.n	800d544 <_svfiprintf_r+0x130>
 800d5b6:	9105      	str	r1, [sp, #20]
 800d5b8:	e7c4      	b.n	800d544 <_svfiprintf_r+0x130>
 800d5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5be:	4604      	mov	r4, r0
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e7f0      	b.n	800d5a6 <_svfiprintf_r+0x192>
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d604 <_svfiprintf_r+0x1f0>)
 800d5cc:	a904      	add	r1, sp, #16
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f7fd fe5a 	bl	800b288 <_printf_float>
 800d5d4:	1c42      	adds	r2, r0, #1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	d1d6      	bne.n	800d588 <_svfiprintf_r+0x174>
 800d5da:	89ab      	ldrh	r3, [r5, #12]
 800d5dc:	065b      	lsls	r3, r3, #25
 800d5de:	f53f af2d 	bmi.w	800d43c <_svfiprintf_r+0x28>
 800d5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5e4:	e72c      	b.n	800d440 <_svfiprintf_r+0x2c>
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	462a      	mov	r2, r5
 800d5ec:	4b05      	ldr	r3, [pc, #20]	@ (800d604 <_svfiprintf_r+0x1f0>)
 800d5ee:	a904      	add	r1, sp, #16
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7fe f8e1 	bl	800b7b8 <_printf_i>
 800d5f6:	e7ed      	b.n	800d5d4 <_svfiprintf_r+0x1c0>
 800d5f8:	0800e016 	.word	0x0800e016
 800d5fc:	0800e020 	.word	0x0800e020
 800d600:	0800b289 	.word	0x0800b289
 800d604:	0800d35d 	.word	0x0800d35d
 800d608:	0800e01c 	.word	0x0800e01c

0800d60c <__sflush_r>:
 800d60c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	0716      	lsls	r6, r2, #28
 800d616:	4605      	mov	r5, r0
 800d618:	460c      	mov	r4, r1
 800d61a:	d454      	bmi.n	800d6c6 <__sflush_r+0xba>
 800d61c:	684b      	ldr	r3, [r1, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	dc02      	bgt.n	800d628 <__sflush_r+0x1c>
 800d622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d624:	2b00      	cmp	r3, #0
 800d626:	dd48      	ble.n	800d6ba <__sflush_r+0xae>
 800d628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d045      	beq.n	800d6ba <__sflush_r+0xae>
 800d62e:	2300      	movs	r3, #0
 800d630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d634:	682f      	ldr	r7, [r5, #0]
 800d636:	6a21      	ldr	r1, [r4, #32]
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	d030      	beq.n	800d69e <__sflush_r+0x92>
 800d63c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	0759      	lsls	r1, r3, #29
 800d642:	d505      	bpl.n	800d650 <__sflush_r+0x44>
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d64a:	b10b      	cbz	r3, 800d650 <__sflush_r+0x44>
 800d64c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	2300      	movs	r3, #0
 800d652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d654:	6a21      	ldr	r1, [r4, #32]
 800d656:	4628      	mov	r0, r5
 800d658:	47b0      	blx	r6
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	89a3      	ldrh	r3, [r4, #12]
 800d65e:	d106      	bne.n	800d66e <__sflush_r+0x62>
 800d660:	6829      	ldr	r1, [r5, #0]
 800d662:	291d      	cmp	r1, #29
 800d664:	d82b      	bhi.n	800d6be <__sflush_r+0xb2>
 800d666:	4a2a      	ldr	r2, [pc, #168]	@ (800d710 <__sflush_r+0x104>)
 800d668:	40ca      	lsrs	r2, r1
 800d66a:	07d6      	lsls	r6, r2, #31
 800d66c:	d527      	bpl.n	800d6be <__sflush_r+0xb2>
 800d66e:	2200      	movs	r2, #0
 800d670:	6062      	str	r2, [r4, #4]
 800d672:	04d9      	lsls	r1, r3, #19
 800d674:	6922      	ldr	r2, [r4, #16]
 800d676:	6022      	str	r2, [r4, #0]
 800d678:	d504      	bpl.n	800d684 <__sflush_r+0x78>
 800d67a:	1c42      	adds	r2, r0, #1
 800d67c:	d101      	bne.n	800d682 <__sflush_r+0x76>
 800d67e:	682b      	ldr	r3, [r5, #0]
 800d680:	b903      	cbnz	r3, 800d684 <__sflush_r+0x78>
 800d682:	6560      	str	r0, [r4, #84]	@ 0x54
 800d684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d686:	602f      	str	r7, [r5, #0]
 800d688:	b1b9      	cbz	r1, 800d6ba <__sflush_r+0xae>
 800d68a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d68e:	4299      	cmp	r1, r3
 800d690:	d002      	beq.n	800d698 <__sflush_r+0x8c>
 800d692:	4628      	mov	r0, r5
 800d694:	f7ff f9e8 	bl	800ca68 <_free_r>
 800d698:	2300      	movs	r3, #0
 800d69a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d69c:	e00d      	b.n	800d6ba <__sflush_r+0xae>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b0      	blx	r6
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	1c50      	adds	r0, r2, #1
 800d6a8:	d1c9      	bne.n	800d63e <__sflush_r+0x32>
 800d6aa:	682b      	ldr	r3, [r5, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d0c6      	beq.n	800d63e <__sflush_r+0x32>
 800d6b0:	2b1d      	cmp	r3, #29
 800d6b2:	d001      	beq.n	800d6b8 <__sflush_r+0xac>
 800d6b4:	2b16      	cmp	r3, #22
 800d6b6:	d11e      	bne.n	800d6f6 <__sflush_r+0xea>
 800d6b8:	602f      	str	r7, [r5, #0]
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	e022      	b.n	800d704 <__sflush_r+0xf8>
 800d6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6c2:	b21b      	sxth	r3, r3
 800d6c4:	e01b      	b.n	800d6fe <__sflush_r+0xf2>
 800d6c6:	690f      	ldr	r7, [r1, #16]
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	d0f6      	beq.n	800d6ba <__sflush_r+0xae>
 800d6cc:	0793      	lsls	r3, r2, #30
 800d6ce:	680e      	ldr	r6, [r1, #0]
 800d6d0:	bf08      	it	eq
 800d6d2:	694b      	ldreq	r3, [r1, #20]
 800d6d4:	600f      	str	r7, [r1, #0]
 800d6d6:	bf18      	it	ne
 800d6d8:	2300      	movne	r3, #0
 800d6da:	eba6 0807 	sub.w	r8, r6, r7
 800d6de:	608b      	str	r3, [r1, #8]
 800d6e0:	f1b8 0f00 	cmp.w	r8, #0
 800d6e4:	dde9      	ble.n	800d6ba <__sflush_r+0xae>
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6ea:	4643      	mov	r3, r8
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	47b0      	blx	r6
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	dc08      	bgt.n	800d708 <__sflush_r+0xfc>
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	f04f 30ff 	mov.w	r0, #4294967295
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	4407      	add	r7, r0
 800d70a:	eba8 0800 	sub.w	r8, r8, r0
 800d70e:	e7e7      	b.n	800d6e0 <__sflush_r+0xd4>
 800d710:	20400001 	.word	0x20400001

0800d714 <_fflush_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	690b      	ldr	r3, [r1, #16]
 800d718:	4605      	mov	r5, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b913      	cbnz	r3, 800d724 <_fflush_r+0x10>
 800d71e:	2500      	movs	r5, #0
 800d720:	4628      	mov	r0, r5
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	b118      	cbz	r0, 800d72e <_fflush_r+0x1a>
 800d726:	6a03      	ldr	r3, [r0, #32]
 800d728:	b90b      	cbnz	r3, 800d72e <_fflush_r+0x1a>
 800d72a:	f7fe f9ef 	bl	800bb0c <__sinit>
 800d72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0f3      	beq.n	800d71e <_fflush_r+0xa>
 800d736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d738:	07d0      	lsls	r0, r2, #31
 800d73a:	d404      	bmi.n	800d746 <_fflush_r+0x32>
 800d73c:	0599      	lsls	r1, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_fflush_r+0x32>
 800d740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d742:	f7fe fb26 	bl	800bd92 <__retarget_lock_acquire_recursive>
 800d746:	4628      	mov	r0, r5
 800d748:	4621      	mov	r1, r4
 800d74a:	f7ff ff5f 	bl	800d60c <__sflush_r>
 800d74e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d750:	07da      	lsls	r2, r3, #31
 800d752:	4605      	mov	r5, r0
 800d754:	d4e4      	bmi.n	800d720 <_fflush_r+0xc>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	059b      	lsls	r3, r3, #22
 800d75a:	d4e1      	bmi.n	800d720 <_fflush_r+0xc>
 800d75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d75e:	f7fe fb19 	bl	800bd94 <__retarget_lock_release_recursive>
 800d762:	e7dd      	b.n	800d720 <_fflush_r+0xc>

0800d764 <memmove>:
 800d764:	4288      	cmp	r0, r1
 800d766:	b510      	push	{r4, lr}
 800d768:	eb01 0402 	add.w	r4, r1, r2
 800d76c:	d902      	bls.n	800d774 <memmove+0x10>
 800d76e:	4284      	cmp	r4, r0
 800d770:	4623      	mov	r3, r4
 800d772:	d807      	bhi.n	800d784 <memmove+0x20>
 800d774:	1e43      	subs	r3, r0, #1
 800d776:	42a1      	cmp	r1, r4
 800d778:	d008      	beq.n	800d78c <memmove+0x28>
 800d77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d782:	e7f8      	b.n	800d776 <memmove+0x12>
 800d784:	4402      	add	r2, r0
 800d786:	4601      	mov	r1, r0
 800d788:	428a      	cmp	r2, r1
 800d78a:	d100      	bne.n	800d78e <memmove+0x2a>
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d796:	e7f7      	b.n	800d788 <memmove+0x24>

0800d798 <_sbrk_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d06      	ldr	r5, [pc, #24]	@ (800d7b4 <_sbrk_r+0x1c>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	f7f4 fd06 	bl	80021b4 <_sbrk>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_sbrk_r+0x1a>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_sbrk_r+0x1a>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	200018d8 	.word	0x200018d8

0800d7b8 <__assert_func>:
 800d7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ba:	4614      	mov	r4, r2
 800d7bc:	461a      	mov	r2, r3
 800d7be:	4b09      	ldr	r3, [pc, #36]	@ (800d7e4 <__assert_func+0x2c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	68d8      	ldr	r0, [r3, #12]
 800d7c6:	b14c      	cbz	r4, 800d7dc <__assert_func+0x24>
 800d7c8:	4b07      	ldr	r3, [pc, #28]	@ (800d7e8 <__assert_func+0x30>)
 800d7ca:	9100      	str	r1, [sp, #0]
 800d7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7d0:	4906      	ldr	r1, [pc, #24]	@ (800d7ec <__assert_func+0x34>)
 800d7d2:	462b      	mov	r3, r5
 800d7d4:	f000 f870 	bl	800d8b8 <fiprintf>
 800d7d8:	f000 f880 	bl	800d8dc <abort>
 800d7dc:	4b04      	ldr	r3, [pc, #16]	@ (800d7f0 <__assert_func+0x38>)
 800d7de:	461c      	mov	r4, r3
 800d7e0:	e7f3      	b.n	800d7ca <__assert_func+0x12>
 800d7e2:	bf00      	nop
 800d7e4:	2000011c 	.word	0x2000011c
 800d7e8:	0800e031 	.word	0x0800e031
 800d7ec:	0800e03e 	.word	0x0800e03e
 800d7f0:	0800e06c 	.word	0x0800e06c

0800d7f4 <_calloc_r>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d7fa:	b934      	cbnz	r4, 800d80a <_calloc_r+0x16>
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f7ff f9a7 	bl	800cb50 <_malloc_r>
 800d802:	4606      	mov	r6, r0
 800d804:	b928      	cbnz	r0, 800d812 <_calloc_r+0x1e>
 800d806:	4630      	mov	r0, r6
 800d808:	bd70      	pop	{r4, r5, r6, pc}
 800d80a:	220c      	movs	r2, #12
 800d80c:	6002      	str	r2, [r0, #0]
 800d80e:	2600      	movs	r6, #0
 800d810:	e7f9      	b.n	800d806 <_calloc_r+0x12>
 800d812:	462a      	mov	r2, r5
 800d814:	4621      	mov	r1, r4
 800d816:	f7fe fa28 	bl	800bc6a <memset>
 800d81a:	e7f4      	b.n	800d806 <_calloc_r+0x12>

0800d81c <__ascii_mbtowc>:
 800d81c:	b082      	sub	sp, #8
 800d81e:	b901      	cbnz	r1, 800d822 <__ascii_mbtowc+0x6>
 800d820:	a901      	add	r1, sp, #4
 800d822:	b142      	cbz	r2, 800d836 <__ascii_mbtowc+0x1a>
 800d824:	b14b      	cbz	r3, 800d83a <__ascii_mbtowc+0x1e>
 800d826:	7813      	ldrb	r3, [r2, #0]
 800d828:	600b      	str	r3, [r1, #0]
 800d82a:	7812      	ldrb	r2, [r2, #0]
 800d82c:	1e10      	subs	r0, r2, #0
 800d82e:	bf18      	it	ne
 800d830:	2001      	movne	r0, #1
 800d832:	b002      	add	sp, #8
 800d834:	4770      	bx	lr
 800d836:	4610      	mov	r0, r2
 800d838:	e7fb      	b.n	800d832 <__ascii_mbtowc+0x16>
 800d83a:	f06f 0001 	mvn.w	r0, #1
 800d83e:	e7f8      	b.n	800d832 <__ascii_mbtowc+0x16>

0800d840 <_realloc_r>:
 800d840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d844:	4607      	mov	r7, r0
 800d846:	4614      	mov	r4, r2
 800d848:	460d      	mov	r5, r1
 800d84a:	b921      	cbnz	r1, 800d856 <_realloc_r+0x16>
 800d84c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	4611      	mov	r1, r2
 800d852:	f7ff b97d 	b.w	800cb50 <_malloc_r>
 800d856:	b92a      	cbnz	r2, 800d864 <_realloc_r+0x24>
 800d858:	f7ff f906 	bl	800ca68 <_free_r>
 800d85c:	4625      	mov	r5, r4
 800d85e:	4628      	mov	r0, r5
 800d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d864:	f000 f841 	bl	800d8ea <_malloc_usable_size_r>
 800d868:	4284      	cmp	r4, r0
 800d86a:	4606      	mov	r6, r0
 800d86c:	d802      	bhi.n	800d874 <_realloc_r+0x34>
 800d86e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d872:	d8f4      	bhi.n	800d85e <_realloc_r+0x1e>
 800d874:	4621      	mov	r1, r4
 800d876:	4638      	mov	r0, r7
 800d878:	f7ff f96a 	bl	800cb50 <_malloc_r>
 800d87c:	4680      	mov	r8, r0
 800d87e:	b908      	cbnz	r0, 800d884 <_realloc_r+0x44>
 800d880:	4645      	mov	r5, r8
 800d882:	e7ec      	b.n	800d85e <_realloc_r+0x1e>
 800d884:	42b4      	cmp	r4, r6
 800d886:	4622      	mov	r2, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	bf28      	it	cs
 800d88c:	4632      	movcs	r2, r6
 800d88e:	f7fe fa82 	bl	800bd96 <memcpy>
 800d892:	4629      	mov	r1, r5
 800d894:	4638      	mov	r0, r7
 800d896:	f7ff f8e7 	bl	800ca68 <_free_r>
 800d89a:	e7f1      	b.n	800d880 <_realloc_r+0x40>

0800d89c <__ascii_wctomb>:
 800d89c:	4603      	mov	r3, r0
 800d89e:	4608      	mov	r0, r1
 800d8a0:	b141      	cbz	r1, 800d8b4 <__ascii_wctomb+0x18>
 800d8a2:	2aff      	cmp	r2, #255	@ 0xff
 800d8a4:	d904      	bls.n	800d8b0 <__ascii_wctomb+0x14>
 800d8a6:	228a      	movs	r2, #138	@ 0x8a
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ae:	4770      	bx	lr
 800d8b0:	700a      	strb	r2, [r1, #0]
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	4770      	bx	lr
	...

0800d8b8 <fiprintf>:
 800d8b8:	b40e      	push	{r1, r2, r3}
 800d8ba:	b503      	push	{r0, r1, lr}
 800d8bc:	4601      	mov	r1, r0
 800d8be:	ab03      	add	r3, sp, #12
 800d8c0:	4805      	ldr	r0, [pc, #20]	@ (800d8d8 <fiprintf+0x20>)
 800d8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c6:	6800      	ldr	r0, [r0, #0]
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	f000 f83f 	bl	800d94c <_vfiprintf_r>
 800d8ce:	b002      	add	sp, #8
 800d8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8d4:	b003      	add	sp, #12
 800d8d6:	4770      	bx	lr
 800d8d8:	2000011c 	.word	0x2000011c

0800d8dc <abort>:
 800d8dc:	b508      	push	{r3, lr}
 800d8de:	2006      	movs	r0, #6
 800d8e0:	f000 fa08 	bl	800dcf4 <raise>
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7f4 fbed 	bl	80020c4 <_exit>

0800d8ea <_malloc_usable_size_r>:
 800d8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8ee:	1f18      	subs	r0, r3, #4
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	bfbc      	itt	lt
 800d8f4:	580b      	ldrlt	r3, [r1, r0]
 800d8f6:	18c0      	addlt	r0, r0, r3
 800d8f8:	4770      	bx	lr

0800d8fa <__sfputc_r>:
 800d8fa:	6893      	ldr	r3, [r2, #8]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	b410      	push	{r4}
 800d902:	6093      	str	r3, [r2, #8]
 800d904:	da08      	bge.n	800d918 <__sfputc_r+0x1e>
 800d906:	6994      	ldr	r4, [r2, #24]
 800d908:	42a3      	cmp	r3, r4
 800d90a:	db01      	blt.n	800d910 <__sfputc_r+0x16>
 800d90c:	290a      	cmp	r1, #10
 800d90e:	d103      	bne.n	800d918 <__sfputc_r+0x1e>
 800d910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d914:	f000 b932 	b.w	800db7c <__swbuf_r>
 800d918:	6813      	ldr	r3, [r2, #0]
 800d91a:	1c58      	adds	r0, r3, #1
 800d91c:	6010      	str	r0, [r2, #0]
 800d91e:	7019      	strb	r1, [r3, #0]
 800d920:	4608      	mov	r0, r1
 800d922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <__sfputs_r>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	4606      	mov	r6, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	4614      	mov	r4, r2
 800d930:	18d5      	adds	r5, r2, r3
 800d932:	42ac      	cmp	r4, r5
 800d934:	d101      	bne.n	800d93a <__sfputs_r+0x12>
 800d936:	2000      	movs	r0, #0
 800d938:	e007      	b.n	800d94a <__sfputs_r+0x22>
 800d93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93e:	463a      	mov	r2, r7
 800d940:	4630      	mov	r0, r6
 800d942:	f7ff ffda 	bl	800d8fa <__sfputc_r>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d1f3      	bne.n	800d932 <__sfputs_r+0xa>
 800d94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d94c <_vfiprintf_r>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	460d      	mov	r5, r1
 800d952:	b09d      	sub	sp, #116	@ 0x74
 800d954:	4614      	mov	r4, r2
 800d956:	4698      	mov	r8, r3
 800d958:	4606      	mov	r6, r0
 800d95a:	b118      	cbz	r0, 800d964 <_vfiprintf_r+0x18>
 800d95c:	6a03      	ldr	r3, [r0, #32]
 800d95e:	b90b      	cbnz	r3, 800d964 <_vfiprintf_r+0x18>
 800d960:	f7fe f8d4 	bl	800bb0c <__sinit>
 800d964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d966:	07d9      	lsls	r1, r3, #31
 800d968:	d405      	bmi.n	800d976 <_vfiprintf_r+0x2a>
 800d96a:	89ab      	ldrh	r3, [r5, #12]
 800d96c:	059a      	lsls	r2, r3, #22
 800d96e:	d402      	bmi.n	800d976 <_vfiprintf_r+0x2a>
 800d970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d972:	f7fe fa0e 	bl	800bd92 <__retarget_lock_acquire_recursive>
 800d976:	89ab      	ldrh	r3, [r5, #12]
 800d978:	071b      	lsls	r3, r3, #28
 800d97a:	d501      	bpl.n	800d980 <_vfiprintf_r+0x34>
 800d97c:	692b      	ldr	r3, [r5, #16]
 800d97e:	b99b      	cbnz	r3, 800d9a8 <_vfiprintf_r+0x5c>
 800d980:	4629      	mov	r1, r5
 800d982:	4630      	mov	r0, r6
 800d984:	f000 f938 	bl	800dbf8 <__swsetup_r>
 800d988:	b170      	cbz	r0, 800d9a8 <_vfiprintf_r+0x5c>
 800d98a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d98c:	07dc      	lsls	r4, r3, #31
 800d98e:	d504      	bpl.n	800d99a <_vfiprintf_r+0x4e>
 800d990:	f04f 30ff 	mov.w	r0, #4294967295
 800d994:	b01d      	add	sp, #116	@ 0x74
 800d996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99a:	89ab      	ldrh	r3, [r5, #12]
 800d99c:	0598      	lsls	r0, r3, #22
 800d99e:	d4f7      	bmi.n	800d990 <_vfiprintf_r+0x44>
 800d9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9a2:	f7fe f9f7 	bl	800bd94 <__retarget_lock_release_recursive>
 800d9a6:	e7f3      	b.n	800d990 <_vfiprintf_r+0x44>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ac:	2320      	movs	r3, #32
 800d9ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9b6:	2330      	movs	r3, #48	@ 0x30
 800d9b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db68 <_vfiprintf_r+0x21c>
 800d9bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9c0:	f04f 0901 	mov.w	r9, #1
 800d9c4:	4623      	mov	r3, r4
 800d9c6:	469a      	mov	sl, r3
 800d9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9cc:	b10a      	cbz	r2, 800d9d2 <_vfiprintf_r+0x86>
 800d9ce:	2a25      	cmp	r2, #37	@ 0x25
 800d9d0:	d1f9      	bne.n	800d9c6 <_vfiprintf_r+0x7a>
 800d9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d9d6:	d00b      	beq.n	800d9f0 <_vfiprintf_r+0xa4>
 800d9d8:	465b      	mov	r3, fp
 800d9da:	4622      	mov	r2, r4
 800d9dc:	4629      	mov	r1, r5
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7ff ffa2 	bl	800d928 <__sfputs_r>
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	f000 80a7 	beq.w	800db38 <_vfiprintf_r+0x1ec>
 800d9ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ec:	445a      	add	r2, fp
 800d9ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 809f 	beq.w	800db38 <_vfiprintf_r+0x1ec>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800da00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da04:	f10a 0a01 	add.w	sl, sl, #1
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	9307      	str	r3, [sp, #28]
 800da0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da10:	931a      	str	r3, [sp, #104]	@ 0x68
 800da12:	4654      	mov	r4, sl
 800da14:	2205      	movs	r2, #5
 800da16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1a:	4853      	ldr	r0, [pc, #332]	@ (800db68 <_vfiprintf_r+0x21c>)
 800da1c:	f7f2 fbd8 	bl	80001d0 <memchr>
 800da20:	9a04      	ldr	r2, [sp, #16]
 800da22:	b9d8      	cbnz	r0, 800da5c <_vfiprintf_r+0x110>
 800da24:	06d1      	lsls	r1, r2, #27
 800da26:	bf44      	itt	mi
 800da28:	2320      	movmi	r3, #32
 800da2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da2e:	0713      	lsls	r3, r2, #28
 800da30:	bf44      	itt	mi
 800da32:	232b      	movmi	r3, #43	@ 0x2b
 800da34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da38:	f89a 3000 	ldrb.w	r3, [sl]
 800da3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800da3e:	d015      	beq.n	800da6c <_vfiprintf_r+0x120>
 800da40:	9a07      	ldr	r2, [sp, #28]
 800da42:	4654      	mov	r4, sl
 800da44:	2000      	movs	r0, #0
 800da46:	f04f 0c0a 	mov.w	ip, #10
 800da4a:	4621      	mov	r1, r4
 800da4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da50:	3b30      	subs	r3, #48	@ 0x30
 800da52:	2b09      	cmp	r3, #9
 800da54:	d94b      	bls.n	800daee <_vfiprintf_r+0x1a2>
 800da56:	b1b0      	cbz	r0, 800da86 <_vfiprintf_r+0x13a>
 800da58:	9207      	str	r2, [sp, #28]
 800da5a:	e014      	b.n	800da86 <_vfiprintf_r+0x13a>
 800da5c:	eba0 0308 	sub.w	r3, r0, r8
 800da60:	fa09 f303 	lsl.w	r3, r9, r3
 800da64:	4313      	orrs	r3, r2
 800da66:	9304      	str	r3, [sp, #16]
 800da68:	46a2      	mov	sl, r4
 800da6a:	e7d2      	b.n	800da12 <_vfiprintf_r+0xc6>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	1d19      	adds	r1, r3, #4
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	9103      	str	r1, [sp, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	bfbb      	ittet	lt
 800da78:	425b      	neglt	r3, r3
 800da7a:	f042 0202 	orrlt.w	r2, r2, #2
 800da7e:	9307      	strge	r3, [sp, #28]
 800da80:	9307      	strlt	r3, [sp, #28]
 800da82:	bfb8      	it	lt
 800da84:	9204      	strlt	r2, [sp, #16]
 800da86:	7823      	ldrb	r3, [r4, #0]
 800da88:	2b2e      	cmp	r3, #46	@ 0x2e
 800da8a:	d10a      	bne.n	800daa2 <_vfiprintf_r+0x156>
 800da8c:	7863      	ldrb	r3, [r4, #1]
 800da8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da90:	d132      	bne.n	800daf8 <_vfiprintf_r+0x1ac>
 800da92:	9b03      	ldr	r3, [sp, #12]
 800da94:	1d1a      	adds	r2, r3, #4
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	9203      	str	r2, [sp, #12]
 800da9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da9e:	3402      	adds	r4, #2
 800daa0:	9305      	str	r3, [sp, #20]
 800daa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db78 <_vfiprintf_r+0x22c>
 800daa6:	7821      	ldrb	r1, [r4, #0]
 800daa8:	2203      	movs	r2, #3
 800daaa:	4650      	mov	r0, sl
 800daac:	f7f2 fb90 	bl	80001d0 <memchr>
 800dab0:	b138      	cbz	r0, 800dac2 <_vfiprintf_r+0x176>
 800dab2:	9b04      	ldr	r3, [sp, #16]
 800dab4:	eba0 000a 	sub.w	r0, r0, sl
 800dab8:	2240      	movs	r2, #64	@ 0x40
 800daba:	4082      	lsls	r2, r0
 800dabc:	4313      	orrs	r3, r2
 800dabe:	3401      	adds	r4, #1
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac6:	4829      	ldr	r0, [pc, #164]	@ (800db6c <_vfiprintf_r+0x220>)
 800dac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dacc:	2206      	movs	r2, #6
 800dace:	f7f2 fb7f 	bl	80001d0 <memchr>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d03f      	beq.n	800db56 <_vfiprintf_r+0x20a>
 800dad6:	4b26      	ldr	r3, [pc, #152]	@ (800db70 <_vfiprintf_r+0x224>)
 800dad8:	bb1b      	cbnz	r3, 800db22 <_vfiprintf_r+0x1d6>
 800dada:	9b03      	ldr	r3, [sp, #12]
 800dadc:	3307      	adds	r3, #7
 800dade:	f023 0307 	bic.w	r3, r3, #7
 800dae2:	3308      	adds	r3, #8
 800dae4:	9303      	str	r3, [sp, #12]
 800dae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae8:	443b      	add	r3, r7
 800daea:	9309      	str	r3, [sp, #36]	@ 0x24
 800daec:	e76a      	b.n	800d9c4 <_vfiprintf_r+0x78>
 800daee:	fb0c 3202 	mla	r2, ip, r2, r3
 800daf2:	460c      	mov	r4, r1
 800daf4:	2001      	movs	r0, #1
 800daf6:	e7a8      	b.n	800da4a <_vfiprintf_r+0xfe>
 800daf8:	2300      	movs	r3, #0
 800dafa:	3401      	adds	r4, #1
 800dafc:	9305      	str	r3, [sp, #20]
 800dafe:	4619      	mov	r1, r3
 800db00:	f04f 0c0a 	mov.w	ip, #10
 800db04:	4620      	mov	r0, r4
 800db06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db0a:	3a30      	subs	r2, #48	@ 0x30
 800db0c:	2a09      	cmp	r2, #9
 800db0e:	d903      	bls.n	800db18 <_vfiprintf_r+0x1cc>
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0c6      	beq.n	800daa2 <_vfiprintf_r+0x156>
 800db14:	9105      	str	r1, [sp, #20]
 800db16:	e7c4      	b.n	800daa2 <_vfiprintf_r+0x156>
 800db18:	fb0c 2101 	mla	r1, ip, r1, r2
 800db1c:	4604      	mov	r4, r0
 800db1e:	2301      	movs	r3, #1
 800db20:	e7f0      	b.n	800db04 <_vfiprintf_r+0x1b8>
 800db22:	ab03      	add	r3, sp, #12
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	462a      	mov	r2, r5
 800db28:	4b12      	ldr	r3, [pc, #72]	@ (800db74 <_vfiprintf_r+0x228>)
 800db2a:	a904      	add	r1, sp, #16
 800db2c:	4630      	mov	r0, r6
 800db2e:	f7fd fbab 	bl	800b288 <_printf_float>
 800db32:	4607      	mov	r7, r0
 800db34:	1c78      	adds	r0, r7, #1
 800db36:	d1d6      	bne.n	800dae6 <_vfiprintf_r+0x19a>
 800db38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db3a:	07d9      	lsls	r1, r3, #31
 800db3c:	d405      	bmi.n	800db4a <_vfiprintf_r+0x1fe>
 800db3e:	89ab      	ldrh	r3, [r5, #12]
 800db40:	059a      	lsls	r2, r3, #22
 800db42:	d402      	bmi.n	800db4a <_vfiprintf_r+0x1fe>
 800db44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db46:	f7fe f925 	bl	800bd94 <__retarget_lock_release_recursive>
 800db4a:	89ab      	ldrh	r3, [r5, #12]
 800db4c:	065b      	lsls	r3, r3, #25
 800db4e:	f53f af1f 	bmi.w	800d990 <_vfiprintf_r+0x44>
 800db52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db54:	e71e      	b.n	800d994 <_vfiprintf_r+0x48>
 800db56:	ab03      	add	r3, sp, #12
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	462a      	mov	r2, r5
 800db5c:	4b05      	ldr	r3, [pc, #20]	@ (800db74 <_vfiprintf_r+0x228>)
 800db5e:	a904      	add	r1, sp, #16
 800db60:	4630      	mov	r0, r6
 800db62:	f7fd fe29 	bl	800b7b8 <_printf_i>
 800db66:	e7e4      	b.n	800db32 <_vfiprintf_r+0x1e6>
 800db68:	0800e016 	.word	0x0800e016
 800db6c:	0800e020 	.word	0x0800e020
 800db70:	0800b289 	.word	0x0800b289
 800db74:	0800d929 	.word	0x0800d929
 800db78:	0800e01c 	.word	0x0800e01c

0800db7c <__swbuf_r>:
 800db7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7e:	460e      	mov	r6, r1
 800db80:	4614      	mov	r4, r2
 800db82:	4605      	mov	r5, r0
 800db84:	b118      	cbz	r0, 800db8e <__swbuf_r+0x12>
 800db86:	6a03      	ldr	r3, [r0, #32]
 800db88:	b90b      	cbnz	r3, 800db8e <__swbuf_r+0x12>
 800db8a:	f7fd ffbf 	bl	800bb0c <__sinit>
 800db8e:	69a3      	ldr	r3, [r4, #24]
 800db90:	60a3      	str	r3, [r4, #8]
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	071a      	lsls	r2, r3, #28
 800db96:	d501      	bpl.n	800db9c <__swbuf_r+0x20>
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	b943      	cbnz	r3, 800dbae <__swbuf_r+0x32>
 800db9c:	4621      	mov	r1, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f000 f82a 	bl	800dbf8 <__swsetup_r>
 800dba4:	b118      	cbz	r0, 800dbae <__swbuf_r+0x32>
 800dba6:	f04f 37ff 	mov.w	r7, #4294967295
 800dbaa:	4638      	mov	r0, r7
 800dbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	6922      	ldr	r2, [r4, #16]
 800dbb2:	1a98      	subs	r0, r3, r2
 800dbb4:	6963      	ldr	r3, [r4, #20]
 800dbb6:	b2f6      	uxtb	r6, r6
 800dbb8:	4283      	cmp	r3, r0
 800dbba:	4637      	mov	r7, r6
 800dbbc:	dc05      	bgt.n	800dbca <__swbuf_r+0x4e>
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f7ff fda7 	bl	800d714 <_fflush_r>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d1ed      	bne.n	800dba6 <__swbuf_r+0x2a>
 800dbca:	68a3      	ldr	r3, [r4, #8]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	60a3      	str	r3, [r4, #8]
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	6022      	str	r2, [r4, #0]
 800dbd6:	701e      	strb	r6, [r3, #0]
 800dbd8:	6962      	ldr	r2, [r4, #20]
 800dbda:	1c43      	adds	r3, r0, #1
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d004      	beq.n	800dbea <__swbuf_r+0x6e>
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	07db      	lsls	r3, r3, #31
 800dbe4:	d5e1      	bpl.n	800dbaa <__swbuf_r+0x2e>
 800dbe6:	2e0a      	cmp	r6, #10
 800dbe8:	d1df      	bne.n	800dbaa <__swbuf_r+0x2e>
 800dbea:	4621      	mov	r1, r4
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff fd91 	bl	800d714 <_fflush_r>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d0d9      	beq.n	800dbaa <__swbuf_r+0x2e>
 800dbf6:	e7d6      	b.n	800dba6 <__swbuf_r+0x2a>

0800dbf8 <__swsetup_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4b29      	ldr	r3, [pc, #164]	@ (800dca0 <__swsetup_r+0xa8>)
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	6818      	ldr	r0, [r3, #0]
 800dc00:	460c      	mov	r4, r1
 800dc02:	b118      	cbz	r0, 800dc0c <__swsetup_r+0x14>
 800dc04:	6a03      	ldr	r3, [r0, #32]
 800dc06:	b90b      	cbnz	r3, 800dc0c <__swsetup_r+0x14>
 800dc08:	f7fd ff80 	bl	800bb0c <__sinit>
 800dc0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc10:	0719      	lsls	r1, r3, #28
 800dc12:	d422      	bmi.n	800dc5a <__swsetup_r+0x62>
 800dc14:	06da      	lsls	r2, r3, #27
 800dc16:	d407      	bmi.n	800dc28 <__swsetup_r+0x30>
 800dc18:	2209      	movs	r2, #9
 800dc1a:	602a      	str	r2, [r5, #0]
 800dc1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295
 800dc26:	e033      	b.n	800dc90 <__swsetup_r+0x98>
 800dc28:	0758      	lsls	r0, r3, #29
 800dc2a:	d512      	bpl.n	800dc52 <__swsetup_r+0x5a>
 800dc2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc2e:	b141      	cbz	r1, 800dc42 <__swsetup_r+0x4a>
 800dc30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc34:	4299      	cmp	r1, r3
 800dc36:	d002      	beq.n	800dc3e <__swsetup_r+0x46>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f7fe ff15 	bl	800ca68 <_free_r>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc48:	81a3      	strh	r3, [r4, #12]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	6063      	str	r3, [r4, #4]
 800dc4e:	6923      	ldr	r3, [r4, #16]
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	f043 0308 	orr.w	r3, r3, #8
 800dc58:	81a3      	strh	r3, [r4, #12]
 800dc5a:	6923      	ldr	r3, [r4, #16]
 800dc5c:	b94b      	cbnz	r3, 800dc72 <__swsetup_r+0x7a>
 800dc5e:	89a3      	ldrh	r3, [r4, #12]
 800dc60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc68:	d003      	beq.n	800dc72 <__swsetup_r+0x7a>
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	f000 f883 	bl	800dd78 <__smakebuf_r>
 800dc72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc76:	f013 0201 	ands.w	r2, r3, #1
 800dc7a:	d00a      	beq.n	800dc92 <__swsetup_r+0x9a>
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	60a2      	str	r2, [r4, #8]
 800dc80:	6962      	ldr	r2, [r4, #20]
 800dc82:	4252      	negs	r2, r2
 800dc84:	61a2      	str	r2, [r4, #24]
 800dc86:	6922      	ldr	r2, [r4, #16]
 800dc88:	b942      	cbnz	r2, 800dc9c <__swsetup_r+0xa4>
 800dc8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc8e:	d1c5      	bne.n	800dc1c <__swsetup_r+0x24>
 800dc90:	bd38      	pop	{r3, r4, r5, pc}
 800dc92:	0799      	lsls	r1, r3, #30
 800dc94:	bf58      	it	pl
 800dc96:	6962      	ldrpl	r2, [r4, #20]
 800dc98:	60a2      	str	r2, [r4, #8]
 800dc9a:	e7f4      	b.n	800dc86 <__swsetup_r+0x8e>
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7f7      	b.n	800dc90 <__swsetup_r+0x98>
 800dca0:	2000011c 	.word	0x2000011c

0800dca4 <_raise_r>:
 800dca4:	291f      	cmp	r1, #31
 800dca6:	b538      	push	{r3, r4, r5, lr}
 800dca8:	4605      	mov	r5, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	d904      	bls.n	800dcb8 <_raise_r+0x14>
 800dcae:	2316      	movs	r3, #22
 800dcb0:	6003      	str	r3, [r0, #0]
 800dcb2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcba:	b112      	cbz	r2, 800dcc2 <_raise_r+0x1e>
 800dcbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcc0:	b94b      	cbnz	r3, 800dcd6 <_raise_r+0x32>
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f000 f830 	bl	800dd28 <_getpid_r>
 800dcc8:	4622      	mov	r2, r4
 800dcca:	4601      	mov	r1, r0
 800dccc:	4628      	mov	r0, r5
 800dcce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcd2:	f000 b817 	b.w	800dd04 <_kill_r>
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d00a      	beq.n	800dcf0 <_raise_r+0x4c>
 800dcda:	1c59      	adds	r1, r3, #1
 800dcdc:	d103      	bne.n	800dce6 <_raise_r+0x42>
 800dcde:	2316      	movs	r3, #22
 800dce0:	6003      	str	r3, [r0, #0]
 800dce2:	2001      	movs	r0, #1
 800dce4:	e7e7      	b.n	800dcb6 <_raise_r+0x12>
 800dce6:	2100      	movs	r1, #0
 800dce8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcec:	4620      	mov	r0, r4
 800dcee:	4798      	blx	r3
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e7e0      	b.n	800dcb6 <_raise_r+0x12>

0800dcf4 <raise>:
 800dcf4:	4b02      	ldr	r3, [pc, #8]	@ (800dd00 <raise+0xc>)
 800dcf6:	4601      	mov	r1, r0
 800dcf8:	6818      	ldr	r0, [r3, #0]
 800dcfa:	f7ff bfd3 	b.w	800dca4 <_raise_r>
 800dcfe:	bf00      	nop
 800dd00:	2000011c 	.word	0x2000011c

0800dd04 <_kill_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d07      	ldr	r5, [pc, #28]	@ (800dd24 <_kill_r+0x20>)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	4611      	mov	r1, r2
 800dd10:	602b      	str	r3, [r5, #0]
 800dd12:	f7f4 f9c7 	bl	80020a4 <_kill>
 800dd16:	1c43      	adds	r3, r0, #1
 800dd18:	d102      	bne.n	800dd20 <_kill_r+0x1c>
 800dd1a:	682b      	ldr	r3, [r5, #0]
 800dd1c:	b103      	cbz	r3, 800dd20 <_kill_r+0x1c>
 800dd1e:	6023      	str	r3, [r4, #0]
 800dd20:	bd38      	pop	{r3, r4, r5, pc}
 800dd22:	bf00      	nop
 800dd24:	200018d8 	.word	0x200018d8

0800dd28 <_getpid_r>:
 800dd28:	f7f4 b9b4 	b.w	8002094 <_getpid>

0800dd2c <__swhatbuf_r>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	460c      	mov	r4, r1
 800dd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd34:	2900      	cmp	r1, #0
 800dd36:	b096      	sub	sp, #88	@ 0x58
 800dd38:	4615      	mov	r5, r2
 800dd3a:	461e      	mov	r6, r3
 800dd3c:	da0d      	bge.n	800dd5a <__swhatbuf_r+0x2e>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd44:	f04f 0100 	mov.w	r1, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2340      	movne	r3, #64	@ 0x40
 800dd4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd50:	2000      	movs	r0, #0
 800dd52:	6031      	str	r1, [r6, #0]
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	b016      	add	sp, #88	@ 0x58
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	466a      	mov	r2, sp
 800dd5c:	f000 f848 	bl	800ddf0 <_fstat_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dbec      	blt.n	800dd3e <__swhatbuf_r+0x12>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd6e:	4259      	negs	r1, r3
 800dd70:	4159      	adcs	r1, r3
 800dd72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd76:	e7eb      	b.n	800dd50 <__swhatbuf_r+0x24>

0800dd78 <__smakebuf_r>:
 800dd78:	898b      	ldrh	r3, [r1, #12]
 800dd7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd7c:	079d      	lsls	r5, r3, #30
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460c      	mov	r4, r1
 800dd82:	d507      	bpl.n	800dd94 <__smakebuf_r+0x1c>
 800dd84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	6123      	str	r3, [r4, #16]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	6163      	str	r3, [r4, #20]
 800dd90:	b003      	add	sp, #12
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd94:	ab01      	add	r3, sp, #4
 800dd96:	466a      	mov	r2, sp
 800dd98:	f7ff ffc8 	bl	800dd2c <__swhatbuf_r>
 800dd9c:	9f00      	ldr	r7, [sp, #0]
 800dd9e:	4605      	mov	r5, r0
 800dda0:	4639      	mov	r1, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7fe fed4 	bl	800cb50 <_malloc_r>
 800dda8:	b948      	cbnz	r0, 800ddbe <__smakebuf_r+0x46>
 800ddaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddae:	059a      	lsls	r2, r3, #22
 800ddb0:	d4ee      	bmi.n	800dd90 <__smakebuf_r+0x18>
 800ddb2:	f023 0303 	bic.w	r3, r3, #3
 800ddb6:	f043 0302 	orr.w	r3, r3, #2
 800ddba:	81a3      	strh	r3, [r4, #12]
 800ddbc:	e7e2      	b.n	800dd84 <__smakebuf_r+0xc>
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	6020      	str	r0, [r4, #0]
 800ddc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddce:	b15b      	cbz	r3, 800dde8 <__smakebuf_r+0x70>
 800ddd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f000 f81d 	bl	800de14 <_isatty_r>
 800ddda:	b128      	cbz	r0, 800dde8 <__smakebuf_r+0x70>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f023 0303 	bic.w	r3, r3, #3
 800dde2:	f043 0301 	orr.w	r3, r3, #1
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	431d      	orrs	r5, r3
 800ddec:	81a5      	strh	r5, [r4, #12]
 800ddee:	e7cf      	b.n	800dd90 <__smakebuf_r+0x18>

0800ddf0 <_fstat_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_fstat_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f4 f9b1 	bl	8002164 <_fstat>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_fstat_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_fstat_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	200018d8 	.word	0x200018d8

0800de14 <_isatty_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d06      	ldr	r5, [pc, #24]	@ (800de30 <_isatty_r+0x1c>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4604      	mov	r4, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	602b      	str	r3, [r5, #0]
 800de20:	f7f4 f9b0 	bl	8002184 <_isatty>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_isatty_r+0x1a>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_isatty_r+0x1a>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	200018d8 	.word	0x200018d8

0800de34 <_init>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	bf00      	nop
 800de38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3a:	bc08      	pop	{r3}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4770      	bx	lr

0800de40 <_fini>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	bf00      	nop
 800de44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de46:	bc08      	pop	{r3}
 800de48:	469e      	mov	lr, r3
 800de4a:	4770      	bx	lr
